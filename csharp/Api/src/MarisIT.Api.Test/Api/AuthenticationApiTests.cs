/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using MarisIT.Api.Client;
using MarisIT.Api.Api;
using MarisIT.Api.Model;

namespace MarisIT.Api.Test
{
    /// <summary>
    ///  Class for testing AuthenticationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AuthenticationApiTests
    {
        private AuthenticationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthenticationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthenticationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AuthenticationApi
            //Assert.IsInstanceOf(typeof(AuthenticationApi), instance);
        }

        
        /// <summary>
        /// Test History
        /// </summary>
        [Test]
        public void HistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.History();
            //Assert.IsInstanceOf(typeof(List<History>), response, "response is List<History>");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoginRequest loginRequest = null;
            //var response = instance.Login(loginRequest);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test Report
        /// </summary>
        [Test]
        public void ReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.Report(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test TokenValid
        /// </summary>
        [Test]
        public void TokenValidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.TokenValid();
            //Assert.IsInstanceOf(typeof(bool), response, "response is bool");
        }
        
        /// <summary>
        /// Test Usage
        /// </summary>
        [Test]
        public void UsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Usage();
            //Assert.IsInstanceOf(typeof(AccountUsage), response, "response is AccountUsage");
        }
        
    }

}
