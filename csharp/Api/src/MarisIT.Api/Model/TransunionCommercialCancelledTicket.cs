/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialCancelledTicket
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialCancelledTicket :  IEquatable<TransunionCommercialCancelledTicket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialCancelledTicket" /> class.
        /// </summary>
        /// <param name="ticket">ticket.</param>
        /// <param name="subjectName">subjectName.</param>
        /// <param name="status">status.</param>
        /// <param name="cancelledStatus">cancelledStatus.</param>
        public TransunionCommercialCancelledTicket(List<string> ticket = default(List<string>), List<string> subjectName = default(List<string>), List<string> status = default(List<string>), List<string> cancelledStatus = default(List<string>))
        {
            this.Ticket = ticket;
            this.SubjectName = subjectName;
            this.Status = status;
            this.CancelledStatus = cancelledStatus;
            this.Ticket = ticket;
            this.SubjectName = subjectName;
            this.Status = status;
            this.CancelledStatus = cancelledStatus;
        }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name="ticket", EmitDefaultValue=true)]
        public List<string> Ticket { get; set; }

        /// <summary>
        /// Gets or Sets SubjectName
        /// </summary>
        [DataMember(Name="subjectName", EmitDefaultValue=true)]
        public List<string> SubjectName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public List<string> Status { get; set; }

        /// <summary>
        /// Gets or Sets CancelledStatus
        /// </summary>
        [DataMember(Name="cancelledStatus", EmitDefaultValue=true)]
        public List<string> CancelledStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialCancelledTicket {\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  SubjectName: ").Append(SubjectName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CancelledStatus: ").Append(CancelledStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialCancelledTicket);
        }

        /// <summary>
        /// Returns true if TransunionCommercialCancelledTicket instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialCancelledTicket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialCancelledTicket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ticket == input.Ticket ||
                    this.Ticket != null &&
                    input.Ticket != null &&
                    this.Ticket.SequenceEqual(input.Ticket)
                ) && 
                (
                    this.SubjectName == input.SubjectName ||
                    this.SubjectName != null &&
                    input.SubjectName != null &&
                    this.SubjectName.SequenceEqual(input.SubjectName)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status != null &&
                    input.Status != null &&
                    this.Status.SequenceEqual(input.Status)
                ) && 
                (
                    this.CancelledStatus == input.CancelledStatus ||
                    this.CancelledStatus != null &&
                    input.CancelledStatus != null &&
                    this.CancelledStatus.SequenceEqual(input.CancelledStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ticket != null)
                    hashCode = hashCode * 59 + this.Ticket.GetHashCode();
                if (this.SubjectName != null)
                    hashCode = hashCode * 59 + this.SubjectName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CancelledStatus != null)
                    hashCode = hashCode * 59 + this.CancelledStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
