/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118EvolutionPM01
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118EvolutionPM01 :  IEquatable<TransunionConsumer118EvolutionPM01>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118EvolutionPM01" /> class.
        /// </summary>
        /// <param name="supplierRefName">supplierRefName.</param>
        /// <param name="accountNo">accountNo.</param>
        /// <param name="subAccount">subAccount.</param>
        /// <param name="branchCd">branchCd.</param>
        /// <param name="openingBalance1">openingBalance1.</param>
        /// <param name="currentBalance1">currentBalance1.</param>
        /// <param name="overdueAmount1">overdueAmount1.</param>
        /// <param name="evolutionPMHistory">evolutionPMHistory.</param>
        public TransunionConsumer118EvolutionPM01(string supplierRefName = default(string), string accountNo = default(string), string subAccount = default(string), string branchCd = default(string), string openingBalance1 = default(string), string currentBalance1 = default(string), string overdueAmount1 = default(string), List<TransunionConsumer118EvolutionPM> evolutionPMHistory = default(List<TransunionConsumer118EvolutionPM>))
        {
            this.SupplierRefName = supplierRefName;
            this.AccountNo = accountNo;
            this.SubAccount = subAccount;
            this.BranchCd = branchCd;
            this.OpeningBalance1 = openingBalance1;
            this.CurrentBalance1 = currentBalance1;
            this.OverdueAmount1 = overdueAmount1;
            this.EvolutionPMHistory = evolutionPMHistory;
            this.SupplierRefName = supplierRefName;
            this.AccountNo = accountNo;
            this.SubAccount = subAccount;
            this.BranchCd = branchCd;
            this.OpeningBalance1 = openingBalance1;
            this.CurrentBalance1 = currentBalance1;
            this.OverdueAmount1 = overdueAmount1;
            this.EvolutionPMHistory = evolutionPMHistory;
        }

        /// <summary>
        /// Gets or Sets SupplierRefName
        /// </summary>
        [DataMember(Name="supplier_ref_name", EmitDefaultValue=true)]
        public string SupplierRefName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="account_no", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets SubAccount
        /// </summary>
        [DataMember(Name="sub_account", EmitDefaultValue=true)]
        public string SubAccount { get; set; }

        /// <summary>
        /// Gets or Sets BranchCd
        /// </summary>
        [DataMember(Name="branch_cd", EmitDefaultValue=true)]
        public string BranchCd { get; set; }

        /// <summary>
        /// Gets or Sets OpeningBalance1
        /// </summary>
        [DataMember(Name="opening_balance_1", EmitDefaultValue=true)]
        public string OpeningBalance1 { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalance1
        /// </summary>
        [DataMember(Name="current_balance_1", EmitDefaultValue=true)]
        public string CurrentBalance1 { get; set; }

        /// <summary>
        /// Gets or Sets OverdueAmount1
        /// </summary>
        [DataMember(Name="overdue_amount_1", EmitDefaultValue=true)]
        public string OverdueAmount1 { get; set; }

        /// <summary>
        /// Gets or Sets EvolutionPMHistory
        /// </summary>
        [DataMember(Name="evolutionPMHistory", EmitDefaultValue=true)]
        public List<TransunionConsumer118EvolutionPM> EvolutionPMHistory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118EvolutionPM01 {\n");
            sb.Append("  SupplierRefName: ").Append(SupplierRefName).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  BranchCd: ").Append(BranchCd).Append("\n");
            sb.Append("  OpeningBalance1: ").Append(OpeningBalance1).Append("\n");
            sb.Append("  CurrentBalance1: ").Append(CurrentBalance1).Append("\n");
            sb.Append("  OverdueAmount1: ").Append(OverdueAmount1).Append("\n");
            sb.Append("  EvolutionPMHistory: ").Append(EvolutionPMHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118EvolutionPM01);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118EvolutionPM01 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118EvolutionPM01 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118EvolutionPM01 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupplierRefName == input.SupplierRefName ||
                    (this.SupplierRefName != null &&
                    this.SupplierRefName.Equals(input.SupplierRefName))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.BranchCd == input.BranchCd ||
                    (this.BranchCd != null &&
                    this.BranchCd.Equals(input.BranchCd))
                ) && 
                (
                    this.OpeningBalance1 == input.OpeningBalance1 ||
                    (this.OpeningBalance1 != null &&
                    this.OpeningBalance1.Equals(input.OpeningBalance1))
                ) && 
                (
                    this.CurrentBalance1 == input.CurrentBalance1 ||
                    (this.CurrentBalance1 != null &&
                    this.CurrentBalance1.Equals(input.CurrentBalance1))
                ) && 
                (
                    this.OverdueAmount1 == input.OverdueAmount1 ||
                    (this.OverdueAmount1 != null &&
                    this.OverdueAmount1.Equals(input.OverdueAmount1))
                ) && 
                (
                    this.EvolutionPMHistory == input.EvolutionPMHistory ||
                    this.EvolutionPMHistory != null &&
                    input.EvolutionPMHistory != null &&
                    this.EvolutionPMHistory.SequenceEqual(input.EvolutionPMHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupplierRefName != null)
                    hashCode = hashCode * 59 + this.SupplierRefName.GetHashCode();
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                if (this.BranchCd != null)
                    hashCode = hashCode * 59 + this.BranchCd.GetHashCode();
                if (this.OpeningBalance1 != null)
                    hashCode = hashCode * 59 + this.OpeningBalance1.GetHashCode();
                if (this.CurrentBalance1 != null)
                    hashCode = hashCode * 59 + this.CurrentBalance1.GetHashCode();
                if (this.OverdueAmount1 != null)
                    hashCode = hashCode * 59 + this.OverdueAmount1.GetHashCode();
                if (this.EvolutionPMHistory != null)
                    hashCode = hashCode * 59 + this.EvolutionPMHistory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
