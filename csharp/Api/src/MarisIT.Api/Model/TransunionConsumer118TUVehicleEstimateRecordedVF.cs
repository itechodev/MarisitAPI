/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118TUVehicleEstimateRecordedVF
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118TUVehicleEstimateRecordedVF :  IEquatable<TransunionConsumer118TUVehicleEstimateRecordedVF>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118TUVehicleEstimateRecordedVF" /> class.
        /// </summary>
        /// <param name="meadAndMcGroutherCode">meadAndMcGroutherCode.</param>
        /// <param name="modelDescription">modelDescription.</param>
        /// <param name="additionalModelDescription">additionalModelDescription.</param>
        /// <param name="yearFirstRegistered">yearFirstRegistered.</param>
        /// <param name="newPriceList">newPriceList.</param>
        /// <param name="highestValue">highestValue.</param>
        /// <param name="lowestValue">lowestValue.</param>
        /// <param name="tradeValue">tradeValue.</param>
        /// <param name="retailValue">retailValue.</param>
        public TransunionConsumer118TUVehicleEstimateRecordedVF(string meadAndMcGroutherCode = default(string), string modelDescription = default(string), string additionalModelDescription = default(string), string yearFirstRegistered = default(string), string newPriceList = default(string), string highestValue = default(string), string lowestValue = default(string), string tradeValue = default(string), string retailValue = default(string))
        {
            this.MeadAndMcGroutherCode = meadAndMcGroutherCode;
            this.ModelDescription = modelDescription;
            this.AdditionalModelDescription = additionalModelDescription;
            this.YearFirstRegistered = yearFirstRegistered;
            this.NewPriceList = newPriceList;
            this.HighestValue = highestValue;
            this.LowestValue = lowestValue;
            this.TradeValue = tradeValue;
            this.RetailValue = retailValue;
            this.MeadAndMcGroutherCode = meadAndMcGroutherCode;
            this.ModelDescription = modelDescription;
            this.AdditionalModelDescription = additionalModelDescription;
            this.YearFirstRegistered = yearFirstRegistered;
            this.NewPriceList = newPriceList;
            this.HighestValue = highestValue;
            this.LowestValue = lowestValue;
            this.TradeValue = tradeValue;
            this.RetailValue = retailValue;
        }

        /// <summary>
        /// Gets or Sets MeadAndMcGroutherCode
        /// </summary>
        [DataMember(Name="meadAndMcGroutherCode", EmitDefaultValue=true)]
        public string MeadAndMcGroutherCode { get; set; }

        /// <summary>
        /// Gets or Sets ModelDescription
        /// </summary>
        [DataMember(Name="modelDescription", EmitDefaultValue=true)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalModelDescription
        /// </summary>
        [DataMember(Name="additionalModelDescription", EmitDefaultValue=true)]
        public string AdditionalModelDescription { get; set; }

        /// <summary>
        /// Gets or Sets YearFirstRegistered
        /// </summary>
        [DataMember(Name="yearFirstRegistered", EmitDefaultValue=true)]
        public string YearFirstRegistered { get; set; }

        /// <summary>
        /// Gets or Sets NewPriceList
        /// </summary>
        [DataMember(Name="newPriceList", EmitDefaultValue=true)]
        public string NewPriceList { get; set; }

        /// <summary>
        /// Gets or Sets HighestValue
        /// </summary>
        [DataMember(Name="highestValue", EmitDefaultValue=true)]
        public string HighestValue { get; set; }

        /// <summary>
        /// Gets or Sets LowestValue
        /// </summary>
        [DataMember(Name="lowestValue", EmitDefaultValue=true)]
        public string LowestValue { get; set; }

        /// <summary>
        /// Gets or Sets TradeValue
        /// </summary>
        [DataMember(Name="tradeValue", EmitDefaultValue=true)]
        public string TradeValue { get; set; }

        /// <summary>
        /// Gets or Sets RetailValue
        /// </summary>
        [DataMember(Name="retailValue", EmitDefaultValue=true)]
        public string RetailValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118TUVehicleEstimateRecordedVF {\n");
            sb.Append("  MeadAndMcGroutherCode: ").Append(MeadAndMcGroutherCode).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  AdditionalModelDescription: ").Append(AdditionalModelDescription).Append("\n");
            sb.Append("  YearFirstRegistered: ").Append(YearFirstRegistered).Append("\n");
            sb.Append("  NewPriceList: ").Append(NewPriceList).Append("\n");
            sb.Append("  HighestValue: ").Append(HighestValue).Append("\n");
            sb.Append("  LowestValue: ").Append(LowestValue).Append("\n");
            sb.Append("  TradeValue: ").Append(TradeValue).Append("\n");
            sb.Append("  RetailValue: ").Append(RetailValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118TUVehicleEstimateRecordedVF);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118TUVehicleEstimateRecordedVF instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118TUVehicleEstimateRecordedVF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118TUVehicleEstimateRecordedVF input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MeadAndMcGroutherCode == input.MeadAndMcGroutherCode ||
                    (this.MeadAndMcGroutherCode != null &&
                    this.MeadAndMcGroutherCode.Equals(input.MeadAndMcGroutherCode))
                ) && 
                (
                    this.ModelDescription == input.ModelDescription ||
                    (this.ModelDescription != null &&
                    this.ModelDescription.Equals(input.ModelDescription))
                ) && 
                (
                    this.AdditionalModelDescription == input.AdditionalModelDescription ||
                    (this.AdditionalModelDescription != null &&
                    this.AdditionalModelDescription.Equals(input.AdditionalModelDescription))
                ) && 
                (
                    this.YearFirstRegistered == input.YearFirstRegistered ||
                    (this.YearFirstRegistered != null &&
                    this.YearFirstRegistered.Equals(input.YearFirstRegistered))
                ) && 
                (
                    this.NewPriceList == input.NewPriceList ||
                    (this.NewPriceList != null &&
                    this.NewPriceList.Equals(input.NewPriceList))
                ) && 
                (
                    this.HighestValue == input.HighestValue ||
                    (this.HighestValue != null &&
                    this.HighestValue.Equals(input.HighestValue))
                ) && 
                (
                    this.LowestValue == input.LowestValue ||
                    (this.LowestValue != null &&
                    this.LowestValue.Equals(input.LowestValue))
                ) && 
                (
                    this.TradeValue == input.TradeValue ||
                    (this.TradeValue != null &&
                    this.TradeValue.Equals(input.TradeValue))
                ) && 
                (
                    this.RetailValue == input.RetailValue ||
                    (this.RetailValue != null &&
                    this.RetailValue.Equals(input.RetailValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeadAndMcGroutherCode != null)
                    hashCode = hashCode * 59 + this.MeadAndMcGroutherCode.GetHashCode();
                if (this.ModelDescription != null)
                    hashCode = hashCode * 59 + this.ModelDescription.GetHashCode();
                if (this.AdditionalModelDescription != null)
                    hashCode = hashCode * 59 + this.AdditionalModelDescription.GetHashCode();
                if (this.YearFirstRegistered != null)
                    hashCode = hashCode * 59 + this.YearFirstRegistered.GetHashCode();
                if (this.NewPriceList != null)
                    hashCode = hashCode * 59 + this.NewPriceList.GetHashCode();
                if (this.HighestValue != null)
                    hashCode = hashCode * 59 + this.HighestValue.GetHashCode();
                if (this.LowestValue != null)
                    hashCode = hashCode * 59 + this.LowestValue.GetHashCode();
                if (this.TradeValue != null)
                    hashCode = hashCode * 59 + this.TradeValue.GetHashCode();
                if (this.RetailValue != null)
                    hashCode = hashCode * 59 + this.RetailValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
