/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCollectionConsumerSummary
    /// </summary>
    [DataContract]
    public partial class XdsCollectionConsumerSummary :  IEquatable<XdsCollectionConsumerSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCollectionConsumerSummary" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="possibleContactabilityGroup">possibleContactabilityGroup.</param>
        /// <param name="possibleContactabilityGroupDesc">possibleContactabilityGroupDesc.</param>
        /// <param name="bestPossibleTelephoneNo">bestPossibleTelephoneNo.</param>
        /// <param name="bestPossibleTelephoneTypeInd">bestPossibleTelephoneTypeInd.</param>
        /// <param name="possibleRepmtGroup">possibleRepmtGroup.</param>
        /// <param name="possibleRepmtGroupDesc">possibleRepmtGroupDesc.</param>
        /// <param name="possibleRePmtAmt">possibleRePmtAmt.</param>
        public XdsCollectionConsumerSummary(string displayText = default(string), string possibleContactabilityGroup = default(string), string possibleContactabilityGroupDesc = default(string), string bestPossibleTelephoneNo = default(string), string bestPossibleTelephoneTypeInd = default(string), string possibleRepmtGroup = default(string), string possibleRepmtGroupDesc = default(string), string possibleRePmtAmt = default(string))
        {
            this.DisplayText = displayText;
            this.PossibleContactabilityGroup = possibleContactabilityGroup;
            this.PossibleContactabilityGroupDesc = possibleContactabilityGroupDesc;
            this.BestPossibleTelephoneNo = bestPossibleTelephoneNo;
            this.BestPossibleTelephoneTypeInd = bestPossibleTelephoneTypeInd;
            this.PossibleRepmtGroup = possibleRepmtGroup;
            this.PossibleRepmtGroupDesc = possibleRepmtGroupDesc;
            this.PossibleRePmtAmt = possibleRePmtAmt;
            this.DisplayText = displayText;
            this.PossibleContactabilityGroup = possibleContactabilityGroup;
            this.PossibleContactabilityGroupDesc = possibleContactabilityGroupDesc;
            this.BestPossibleTelephoneNo = bestPossibleTelephoneNo;
            this.BestPossibleTelephoneTypeInd = bestPossibleTelephoneTypeInd;
            this.PossibleRepmtGroup = possibleRepmtGroup;
            this.PossibleRepmtGroupDesc = possibleRepmtGroupDesc;
            this.PossibleRePmtAmt = possibleRePmtAmt;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets PossibleContactabilityGroup
        /// </summary>
        [DataMember(Name="possibleContactabilityGroup", EmitDefaultValue=true)]
        public string PossibleContactabilityGroup { get; set; }

        /// <summary>
        /// Gets or Sets PossibleContactabilityGroupDesc
        /// </summary>
        [DataMember(Name="possibleContactabilityGroupDesc", EmitDefaultValue=true)]
        public string PossibleContactabilityGroupDesc { get; set; }

        /// <summary>
        /// Gets or Sets BestPossibleTelephoneNo
        /// </summary>
        [DataMember(Name="bestPossibleTelephoneNo", EmitDefaultValue=true)]
        public string BestPossibleTelephoneNo { get; set; }

        /// <summary>
        /// Gets or Sets BestPossibleTelephoneTypeInd
        /// </summary>
        [DataMember(Name="bestPossibleTelephoneTypeInd", EmitDefaultValue=true)]
        public string BestPossibleTelephoneTypeInd { get; set; }

        /// <summary>
        /// Gets or Sets PossibleRepmtGroup
        /// </summary>
        [DataMember(Name="possibleRepmtGroup", EmitDefaultValue=true)]
        public string PossibleRepmtGroup { get; set; }

        /// <summary>
        /// Gets or Sets PossibleRepmtGroupDesc
        /// </summary>
        [DataMember(Name="possibleRepmtGroupDesc", EmitDefaultValue=true)]
        public string PossibleRepmtGroupDesc { get; set; }

        /// <summary>
        /// Gets or Sets PossibleRePmtAmt
        /// </summary>
        [DataMember(Name="possibleRePmtAmt", EmitDefaultValue=true)]
        public string PossibleRePmtAmt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCollectionConsumerSummary {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  PossibleContactabilityGroup: ").Append(PossibleContactabilityGroup).Append("\n");
            sb.Append("  PossibleContactabilityGroupDesc: ").Append(PossibleContactabilityGroupDesc).Append("\n");
            sb.Append("  BestPossibleTelephoneNo: ").Append(BestPossibleTelephoneNo).Append("\n");
            sb.Append("  BestPossibleTelephoneTypeInd: ").Append(BestPossibleTelephoneTypeInd).Append("\n");
            sb.Append("  PossibleRepmtGroup: ").Append(PossibleRepmtGroup).Append("\n");
            sb.Append("  PossibleRepmtGroupDesc: ").Append(PossibleRepmtGroupDesc).Append("\n");
            sb.Append("  PossibleRePmtAmt: ").Append(PossibleRePmtAmt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCollectionConsumerSummary);
        }

        /// <summary>
        /// Returns true if XdsCollectionConsumerSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCollectionConsumerSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCollectionConsumerSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.PossibleContactabilityGroup == input.PossibleContactabilityGroup ||
                    (this.PossibleContactabilityGroup != null &&
                    this.PossibleContactabilityGroup.Equals(input.PossibleContactabilityGroup))
                ) && 
                (
                    this.PossibleContactabilityGroupDesc == input.PossibleContactabilityGroupDesc ||
                    (this.PossibleContactabilityGroupDesc != null &&
                    this.PossibleContactabilityGroupDesc.Equals(input.PossibleContactabilityGroupDesc))
                ) && 
                (
                    this.BestPossibleTelephoneNo == input.BestPossibleTelephoneNo ||
                    (this.BestPossibleTelephoneNo != null &&
                    this.BestPossibleTelephoneNo.Equals(input.BestPossibleTelephoneNo))
                ) && 
                (
                    this.BestPossibleTelephoneTypeInd == input.BestPossibleTelephoneTypeInd ||
                    (this.BestPossibleTelephoneTypeInd != null &&
                    this.BestPossibleTelephoneTypeInd.Equals(input.BestPossibleTelephoneTypeInd))
                ) && 
                (
                    this.PossibleRepmtGroup == input.PossibleRepmtGroup ||
                    (this.PossibleRepmtGroup != null &&
                    this.PossibleRepmtGroup.Equals(input.PossibleRepmtGroup))
                ) && 
                (
                    this.PossibleRepmtGroupDesc == input.PossibleRepmtGroupDesc ||
                    (this.PossibleRepmtGroupDesc != null &&
                    this.PossibleRepmtGroupDesc.Equals(input.PossibleRepmtGroupDesc))
                ) && 
                (
                    this.PossibleRePmtAmt == input.PossibleRePmtAmt ||
                    (this.PossibleRePmtAmt != null &&
                    this.PossibleRePmtAmt.Equals(input.PossibleRePmtAmt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.PossibleContactabilityGroup != null)
                    hashCode = hashCode * 59 + this.PossibleContactabilityGroup.GetHashCode();
                if (this.PossibleContactabilityGroupDesc != null)
                    hashCode = hashCode * 59 + this.PossibleContactabilityGroupDesc.GetHashCode();
                if (this.BestPossibleTelephoneNo != null)
                    hashCode = hashCode * 59 + this.BestPossibleTelephoneNo.GetHashCode();
                if (this.BestPossibleTelephoneTypeInd != null)
                    hashCode = hashCode * 59 + this.BestPossibleTelephoneTypeInd.GetHashCode();
                if (this.PossibleRepmtGroup != null)
                    hashCode = hashCode * 59 + this.PossibleRepmtGroup.GetHashCode();
                if (this.PossibleRepmtGroupDesc != null)
                    hashCode = hashCode * 59 + this.PossibleRepmtGroupDesc.GetHashCode();
                if (this.PossibleRePmtAmt != null)
                    hashCode = hashCode * 59 + this.PossibleRePmtAmt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
