/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialAccountVerificationVH
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialAccountVerificationVH :  IEquatable<TransunionCommercialAccountVerificationVH>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialAccountVerificationVH" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="branchName">branchName.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="verifiedDated">verifiedDated.</param>
        /// <param name="accountDormant">accountDormant.</param>
        /// <param name="accountOpen3Months">accountOpen3Months.</param>
        /// <param name="accountAcceptsDebits">accountAcceptsDebits.</param>
        /// <param name="accountAcceptsCredits">accountAcceptsCredits.</param>
        public TransunionCommercialAccountVerificationVH(string majorProduct = default(string), string bankName = default(string), string branchCode = default(string), string branchName = default(string), string accountNumber = default(string), string accountType = default(string), string accountHolder = default(string), string startDate = default(string), string verifiedDated = default(string), string accountDormant = default(string), string accountOpen3Months = default(string), string accountAcceptsDebits = default(string), string accountAcceptsCredits = default(string))
        {
            this.MajorProduct = majorProduct;
            this.BankName = bankName;
            this.BranchCode = branchCode;
            this.BranchName = branchName;
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.AccountHolder = accountHolder;
            this.StartDate = startDate;
            this.VerifiedDated = verifiedDated;
            this.AccountDormant = accountDormant;
            this.AccountOpen3Months = accountOpen3Months;
            this.AccountAcceptsDebits = accountAcceptsDebits;
            this.AccountAcceptsCredits = accountAcceptsCredits;
            this.MajorProduct = majorProduct;
            this.BankName = bankName;
            this.BranchCode = branchCode;
            this.BranchName = branchName;
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.AccountHolder = accountHolder;
            this.StartDate = startDate;
            this.VerifiedDated = verifiedDated;
            this.AccountDormant = accountDormant;
            this.AccountOpen3Months = accountOpen3Months;
            this.AccountAcceptsDebits = accountAcceptsDebits;
            this.AccountAcceptsCredits = accountAcceptsCredits;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=true)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name="branchCode", EmitDefaultValue=true)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets BranchName
        /// </summary>
        [DataMember(Name="branchName", EmitDefaultValue=true)]
        public string BranchName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets AccountHolder
        /// </summary>
        [DataMember(Name="accountHolder", EmitDefaultValue=true)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedDated
        /// </summary>
        [DataMember(Name="verifiedDated", EmitDefaultValue=true)]
        public string VerifiedDated { get; set; }

        /// <summary>
        /// Gets or Sets AccountDormant
        /// </summary>
        [DataMember(Name="accountDormant", EmitDefaultValue=true)]
        public string AccountDormant { get; set; }

        /// <summary>
        /// Gets or Sets AccountOpen3Months
        /// </summary>
        [DataMember(Name="accountOpen3Months", EmitDefaultValue=true)]
        public string AccountOpen3Months { get; set; }

        /// <summary>
        /// Gets or Sets AccountAcceptsDebits
        /// </summary>
        [DataMember(Name="accountAcceptsDebits", EmitDefaultValue=true)]
        public string AccountAcceptsDebits { get; set; }

        /// <summary>
        /// Gets or Sets AccountAcceptsCredits
        /// </summary>
        [DataMember(Name="accountAcceptsCredits", EmitDefaultValue=true)]
        public string AccountAcceptsCredits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialAccountVerificationVH {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  VerifiedDated: ").Append(VerifiedDated).Append("\n");
            sb.Append("  AccountDormant: ").Append(AccountDormant).Append("\n");
            sb.Append("  AccountOpen3Months: ").Append(AccountOpen3Months).Append("\n");
            sb.Append("  AccountAcceptsDebits: ").Append(AccountAcceptsDebits).Append("\n");
            sb.Append("  AccountAcceptsCredits: ").Append(AccountAcceptsCredits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialAccountVerificationVH);
        }

        /// <summary>
        /// Returns true if TransunionCommercialAccountVerificationVH instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialAccountVerificationVH to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialAccountVerificationVH input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.VerifiedDated == input.VerifiedDated ||
                    (this.VerifiedDated != null &&
                    this.VerifiedDated.Equals(input.VerifiedDated))
                ) && 
                (
                    this.AccountDormant == input.AccountDormant ||
                    (this.AccountDormant != null &&
                    this.AccountDormant.Equals(input.AccountDormant))
                ) && 
                (
                    this.AccountOpen3Months == input.AccountOpen3Months ||
                    (this.AccountOpen3Months != null &&
                    this.AccountOpen3Months.Equals(input.AccountOpen3Months))
                ) && 
                (
                    this.AccountAcceptsDebits == input.AccountAcceptsDebits ||
                    (this.AccountAcceptsDebits != null &&
                    this.AccountAcceptsDebits.Equals(input.AccountAcceptsDebits))
                ) && 
                (
                    this.AccountAcceptsCredits == input.AccountAcceptsCredits ||
                    (this.AccountAcceptsCredits != null &&
                    this.AccountAcceptsCredits.Equals(input.AccountAcceptsCredits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.BranchName != null)
                    hashCode = hashCode * 59 + this.BranchName.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountHolder != null)
                    hashCode = hashCode * 59 + this.AccountHolder.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.VerifiedDated != null)
                    hashCode = hashCode * 59 + this.VerifiedDated.GetHashCode();
                if (this.AccountDormant != null)
                    hashCode = hashCode * 59 + this.AccountDormant.GetHashCode();
                if (this.AccountOpen3Months != null)
                    hashCode = hashCode * 59 + this.AccountOpen3Months.GetHashCode();
                if (this.AccountAcceptsDebits != null)
                    hashCode = hashCode * 59 + this.AccountAcceptsDebits.GetHashCode();
                if (this.AccountAcceptsCredits != null)
                    hashCode = hashCode * 59 + this.AccountAcceptsCredits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
