/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialShareInfo
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialShareInfo :  IEquatable<TransunionCommercialShareInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialShareInfo" /> class.
        /// </summary>
        /// <param name="shareType">shareType.</param>
        /// <param name="shareNumber">shareNumber.</param>
        /// <param name="shareValue">shareValue.</param>
        public TransunionCommercialShareInfo(string shareType = default(string), string shareNumber = default(string), string shareValue = default(string))
        {
            this.ShareType = shareType;
            this.ShareNumber = shareNumber;
            this.ShareValue = shareValue;
            this.ShareType = shareType;
            this.ShareNumber = shareNumber;
            this.ShareValue = shareValue;
        }

        /// <summary>
        /// Gets or Sets ShareType
        /// </summary>
        [DataMember(Name="shareType", EmitDefaultValue=true)]
        public string ShareType { get; set; }

        /// <summary>
        /// Gets or Sets ShareNumber
        /// </summary>
        [DataMember(Name="shareNumber", EmitDefaultValue=true)]
        public string ShareNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShareValue
        /// </summary>
        [DataMember(Name="shareValue", EmitDefaultValue=true)]
        public string ShareValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialShareInfo {\n");
            sb.Append("  ShareType: ").Append(ShareType).Append("\n");
            sb.Append("  ShareNumber: ").Append(ShareNumber).Append("\n");
            sb.Append("  ShareValue: ").Append(ShareValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialShareInfo);
        }

        /// <summary>
        /// Returns true if TransunionCommercialShareInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialShareInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialShareInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShareType == input.ShareType ||
                    (this.ShareType != null &&
                    this.ShareType.Equals(input.ShareType))
                ) && 
                (
                    this.ShareNumber == input.ShareNumber ||
                    (this.ShareNumber != null &&
                    this.ShareNumber.Equals(input.ShareNumber))
                ) && 
                (
                    this.ShareValue == input.ShareValue ||
                    (this.ShareValue != null &&
                    this.ShareValue.Equals(input.ShareValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShareType != null)
                    hashCode = hashCode * 59 + this.ShareType.GetHashCode();
                if (this.ShareNumber != null)
                    hashCode = hashCode * 59 + this.ShareNumber.GetHashCode();
                if (this.ShareValue != null)
                    hashCode = hashCode * 59 + this.ShareValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
