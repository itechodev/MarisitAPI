/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialDeedsMultipleOwnerDetail
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialDeedsMultipleOwnerDetail :  IEquatable<TransunionCommercialDeedsMultipleOwnerDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialDeedsMultipleOwnerDetail" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="deedsOwnersDetail">deedsOwnersDetail.</param>
        /// <param name="rowID">rowID.</param>
        public TransunionCommercialDeedsMultipleOwnerDetail(string majorProduct = default(string), List<TransunionCommercialDeedsOwnerDetail> deedsOwnersDetail = default(List<TransunionCommercialDeedsOwnerDetail>), string rowID = default(string))
        {
            this.MajorProduct = majorProduct;
            this.DeedsOwnersDetail = deedsOwnersDetail;
            this.RowID = rowID;
            this.MajorProduct = majorProduct;
            this.DeedsOwnersDetail = deedsOwnersDetail;
            this.RowID = rowID;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets DeedsOwnersDetail
        /// </summary>
        [DataMember(Name="deedsOwnersDetail", EmitDefaultValue=true)]
        public List<TransunionCommercialDeedsOwnerDetail> DeedsOwnersDetail { get; set; }

        /// <summary>
        /// Gets or Sets RowID
        /// </summary>
        [DataMember(Name="rowID", EmitDefaultValue=true)]
        public string RowID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialDeedsMultipleOwnerDetail {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  DeedsOwnersDetail: ").Append(DeedsOwnersDetail).Append("\n");
            sb.Append("  RowID: ").Append(RowID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialDeedsMultipleOwnerDetail);
        }

        /// <summary>
        /// Returns true if TransunionCommercialDeedsMultipleOwnerDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialDeedsMultipleOwnerDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialDeedsMultipleOwnerDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.DeedsOwnersDetail == input.DeedsOwnersDetail ||
                    this.DeedsOwnersDetail != null &&
                    input.DeedsOwnersDetail != null &&
                    this.DeedsOwnersDetail.SequenceEqual(input.DeedsOwnersDetail)
                ) && 
                (
                    this.RowID == input.RowID ||
                    (this.RowID != null &&
                    this.RowID.Equals(input.RowID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.DeedsOwnersDetail != null)
                    hashCode = hashCode * 59 + this.DeedsOwnersDetail.GetHashCode();
                if (this.RowID != null)
                    hashCode = hashCode * 59 + this.RowID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
