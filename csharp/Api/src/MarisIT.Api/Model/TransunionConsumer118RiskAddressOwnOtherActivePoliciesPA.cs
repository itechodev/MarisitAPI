/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA :  IEquatable<TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA" /> class.
        /// </summary>
        /// <param name="requestIndicator">requestIndicator.</param>
        /// <param name="ownOtherActivePolicyIndicator">ownOtherActivePolicyIndicator.</param>
        /// <param name="insurerName">insurerName.</param>
        /// <param name="policyNumber">policyNumber.</param>
        /// <param name="riskType">riskType.</param>
        /// <param name="policyStatus">policyStatus.</param>
        /// <param name="policyInceptionDate">policyInceptionDate.</param>
        /// <param name="policyCancellationDate">policyCancellationDate.</param>
        /// <param name="activeRiskAddresses">activeRiskAddresses.</param>
        public TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA(string requestIndicator = default(string), string ownOtherActivePolicyIndicator = default(string), string insurerName = default(string), string policyNumber = default(string), List<string> riskType = default(List<string>), string policyStatus = default(string), string policyInceptionDate = default(string), string policyCancellationDate = default(string), List<TransunionConsumer118ActiveRiskAddresses> activeRiskAddresses = default(List<TransunionConsumer118ActiveRiskAddresses>))
        {
            this.RequestIndicator = requestIndicator;
            this.OwnOtherActivePolicyIndicator = ownOtherActivePolicyIndicator;
            this.InsurerName = insurerName;
            this.PolicyNumber = policyNumber;
            this.RiskType = riskType;
            this.PolicyStatus = policyStatus;
            this.PolicyInceptionDate = policyInceptionDate;
            this.PolicyCancellationDate = policyCancellationDate;
            this.ActiveRiskAddresses = activeRiskAddresses;
            this.RequestIndicator = requestIndicator;
            this.OwnOtherActivePolicyIndicator = ownOtherActivePolicyIndicator;
            this.InsurerName = insurerName;
            this.PolicyNumber = policyNumber;
            this.RiskType = riskType;
            this.PolicyStatus = policyStatus;
            this.PolicyInceptionDate = policyInceptionDate;
            this.PolicyCancellationDate = policyCancellationDate;
            this.ActiveRiskAddresses = activeRiskAddresses;
        }

        /// <summary>
        /// Gets or Sets RequestIndicator
        /// </summary>
        [DataMember(Name="requestIndicator", EmitDefaultValue=true)]
        public string RequestIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OwnOtherActivePolicyIndicator
        /// </summary>
        [DataMember(Name="own_OtherActivePolicyIndicator", EmitDefaultValue=true)]
        public string OwnOtherActivePolicyIndicator { get; set; }

        /// <summary>
        /// Gets or Sets InsurerName
        /// </summary>
        [DataMember(Name="insurerName", EmitDefaultValue=true)]
        public string InsurerName { get; set; }

        /// <summary>
        /// Gets or Sets PolicyNumber
        /// </summary>
        [DataMember(Name="policyNumber", EmitDefaultValue=true)]
        public string PolicyNumber { get; set; }

        /// <summary>
        /// Gets or Sets RiskType
        /// </summary>
        [DataMember(Name="riskType", EmitDefaultValue=true)]
        public List<string> RiskType { get; set; }

        /// <summary>
        /// Gets or Sets PolicyStatus
        /// </summary>
        [DataMember(Name="policyStatus", EmitDefaultValue=true)]
        public string PolicyStatus { get; set; }

        /// <summary>
        /// Gets or Sets PolicyInceptionDate
        /// </summary>
        [DataMember(Name="policyInceptionDate", EmitDefaultValue=true)]
        public string PolicyInceptionDate { get; set; }

        /// <summary>
        /// Gets or Sets PolicyCancellationDate
        /// </summary>
        [DataMember(Name="policyCancellationDate", EmitDefaultValue=true)]
        public string PolicyCancellationDate { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRiskAddresses
        /// </summary>
        [DataMember(Name="activeRiskAddresses", EmitDefaultValue=true)]
        public List<TransunionConsumer118ActiveRiskAddresses> ActiveRiskAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA {\n");
            sb.Append("  RequestIndicator: ").Append(RequestIndicator).Append("\n");
            sb.Append("  OwnOtherActivePolicyIndicator: ").Append(OwnOtherActivePolicyIndicator).Append("\n");
            sb.Append("  InsurerName: ").Append(InsurerName).Append("\n");
            sb.Append("  PolicyNumber: ").Append(PolicyNumber).Append("\n");
            sb.Append("  RiskType: ").Append(RiskType).Append("\n");
            sb.Append("  PolicyStatus: ").Append(PolicyStatus).Append("\n");
            sb.Append("  PolicyInceptionDate: ").Append(PolicyInceptionDate).Append("\n");
            sb.Append("  PolicyCancellationDate: ").Append(PolicyCancellationDate).Append("\n");
            sb.Append("  ActiveRiskAddresses: ").Append(ActiveRiskAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118RiskAddressOwnOtherActivePoliciesPA input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestIndicator == input.RequestIndicator ||
                    (this.RequestIndicator != null &&
                    this.RequestIndicator.Equals(input.RequestIndicator))
                ) && 
                (
                    this.OwnOtherActivePolicyIndicator == input.OwnOtherActivePolicyIndicator ||
                    (this.OwnOtherActivePolicyIndicator != null &&
                    this.OwnOtherActivePolicyIndicator.Equals(input.OwnOtherActivePolicyIndicator))
                ) && 
                (
                    this.InsurerName == input.InsurerName ||
                    (this.InsurerName != null &&
                    this.InsurerName.Equals(input.InsurerName))
                ) && 
                (
                    this.PolicyNumber == input.PolicyNumber ||
                    (this.PolicyNumber != null &&
                    this.PolicyNumber.Equals(input.PolicyNumber))
                ) && 
                (
                    this.RiskType == input.RiskType ||
                    this.RiskType != null &&
                    input.RiskType != null &&
                    this.RiskType.SequenceEqual(input.RiskType)
                ) && 
                (
                    this.PolicyStatus == input.PolicyStatus ||
                    (this.PolicyStatus != null &&
                    this.PolicyStatus.Equals(input.PolicyStatus))
                ) && 
                (
                    this.PolicyInceptionDate == input.PolicyInceptionDate ||
                    (this.PolicyInceptionDate != null &&
                    this.PolicyInceptionDate.Equals(input.PolicyInceptionDate))
                ) && 
                (
                    this.PolicyCancellationDate == input.PolicyCancellationDate ||
                    (this.PolicyCancellationDate != null &&
                    this.PolicyCancellationDate.Equals(input.PolicyCancellationDate))
                ) && 
                (
                    this.ActiveRiskAddresses == input.ActiveRiskAddresses ||
                    this.ActiveRiskAddresses != null &&
                    input.ActiveRiskAddresses != null &&
                    this.ActiveRiskAddresses.SequenceEqual(input.ActiveRiskAddresses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestIndicator != null)
                    hashCode = hashCode * 59 + this.RequestIndicator.GetHashCode();
                if (this.OwnOtherActivePolicyIndicator != null)
                    hashCode = hashCode * 59 + this.OwnOtherActivePolicyIndicator.GetHashCode();
                if (this.InsurerName != null)
                    hashCode = hashCode * 59 + this.InsurerName.GetHashCode();
                if (this.PolicyNumber != null)
                    hashCode = hashCode * 59 + this.PolicyNumber.GetHashCode();
                if (this.RiskType != null)
                    hashCode = hashCode * 59 + this.RiskType.GetHashCode();
                if (this.PolicyStatus != null)
                    hashCode = hashCode * 59 + this.PolicyStatus.GetHashCode();
                if (this.PolicyInceptionDate != null)
                    hashCode = hashCode * 59 + this.PolicyInceptionDate.GetHashCode();
                if (this.PolicyCancellationDate != null)
                    hashCode = hashCode * 59 + this.PolicyCancellationDate.GetHashCode();
                if (this.ActiveRiskAddresses != null)
                    hashCode = hashCode * 59 + this.ActiveRiskAddresses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
