/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPPREVENQ
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPPREVENQ :  IEquatable<CompuscanCOMPPREVENQ>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPPREVENQ" /> class.
        /// </summary>
        /// <param name="branchname">branchname.</param>
        /// <param name="contactperson">contactperson.</param>
        /// <param name="enqdate">enqdate.</param>
        /// <param name="telephonenumber">telephonenumber.</param>
        public CompuscanCOMPPREVENQ(string branchname = default(string), string contactperson = default(string), string enqdate = default(string), string telephonenumber = default(string))
        {
            this.Branchname = branchname;
            this.Contactperson = contactperson;
            this.Enqdate = enqdate;
            this.Telephonenumber = telephonenumber;
            this.Branchname = branchname;
            this.Contactperson = contactperson;
            this.Enqdate = enqdate;
            this.Telephonenumber = telephonenumber;
        }

        /// <summary>
        /// Gets or Sets Branchname
        /// </summary>
        [DataMember(Name="branchname", EmitDefaultValue=true)]
        public string Branchname { get; set; }

        /// <summary>
        /// Gets or Sets Contactperson
        /// </summary>
        [DataMember(Name="contactperson", EmitDefaultValue=true)]
        public string Contactperson { get; set; }

        /// <summary>
        /// Gets or Sets Enqdate
        /// </summary>
        [DataMember(Name="enqdate", EmitDefaultValue=true)]
        public string Enqdate { get; set; }

        /// <summary>
        /// Gets or Sets Telephonenumber
        /// </summary>
        [DataMember(Name="telephonenumber", EmitDefaultValue=true)]
        public string Telephonenumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPPREVENQ {\n");
            sb.Append("  Branchname: ").Append(Branchname).Append("\n");
            sb.Append("  Contactperson: ").Append(Contactperson).Append("\n");
            sb.Append("  Enqdate: ").Append(Enqdate).Append("\n");
            sb.Append("  Telephonenumber: ").Append(Telephonenumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPPREVENQ);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPPREVENQ instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPPREVENQ to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPPREVENQ input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Branchname == input.Branchname ||
                    (this.Branchname != null &&
                    this.Branchname.Equals(input.Branchname))
                ) && 
                (
                    this.Contactperson == input.Contactperson ||
                    (this.Contactperson != null &&
                    this.Contactperson.Equals(input.Contactperson))
                ) && 
                (
                    this.Enqdate == input.Enqdate ||
                    (this.Enqdate != null &&
                    this.Enqdate.Equals(input.Enqdate))
                ) && 
                (
                    this.Telephonenumber == input.Telephonenumber ||
                    (this.Telephonenumber != null &&
                    this.Telephonenumber.Equals(input.Telephonenumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Branchname != null)
                    hashCode = hashCode * 59 + this.Branchname.GetHashCode();
                if (this.Contactperson != null)
                    hashCode = hashCode * 59 + this.Contactperson.GetHashCode();
                if (this.Enqdate != null)
                    hashCode = hashCode * 59 + this.Enqdate.GetHashCode();
                if (this.Telephonenumber != null)
                    hashCode = hashCode * 59 + this.Telephonenumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
