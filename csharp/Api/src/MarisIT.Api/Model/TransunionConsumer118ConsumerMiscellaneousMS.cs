/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ConsumerMiscellaneousMS
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ConsumerMiscellaneousMS :  IEquatable<TransunionConsumer118ConsumerMiscellaneousMS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ConsumerMiscellaneousMS" /> class.
        /// </summary>
        /// <param name="recordSequence">recordSequence.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="partSequence">partSequence.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="infoDate">infoDate.</param>
        /// <param name="type">type.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="remarks1">remarks1.</param>
        public TransunionConsumer118ConsumerMiscellaneousMS(string recordSequence = default(string), string partNumber = default(string), string partSequence = default(string), string consumerNo = default(string), string infoDate = default(string), string type = default(string), string remarks = default(string), string remarks1 = default(string))
        {
            this.RecordSequence = recordSequence;
            this.PartNumber = partNumber;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.InfoDate = infoDate;
            this.Type = type;
            this.Remarks = remarks;
            this.Remarks1 = remarks1;
            this.RecordSequence = recordSequence;
            this.PartNumber = partNumber;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.InfoDate = infoDate;
            this.Type = type;
            this.Remarks = remarks;
            this.Remarks1 = remarks1;
        }

        /// <summary>
        /// Gets or Sets RecordSequence
        /// </summary>
        [DataMember(Name="recordSequence", EmitDefaultValue=true)]
        public string RecordSequence { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="partNumber", EmitDefaultValue=true)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets PartSequence
        /// </summary>
        [DataMember(Name="partSequence", EmitDefaultValue=true)]
        public string PartSequence { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets InfoDate
        /// </summary>
        [DataMember(Name="infoDate", EmitDefaultValue=true)]
        public string InfoDate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets Remarks1
        /// </summary>
        [DataMember(Name="remarks1", EmitDefaultValue=true)]
        public string Remarks1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ConsumerMiscellaneousMS {\n");
            sb.Append("  RecordSequence: ").Append(RecordSequence).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  PartSequence: ").Append(PartSequence).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  InfoDate: ").Append(InfoDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  Remarks1: ").Append(Remarks1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ConsumerMiscellaneousMS);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ConsumerMiscellaneousMS instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ConsumerMiscellaneousMS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ConsumerMiscellaneousMS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordSequence == input.RecordSequence ||
                    (this.RecordSequence != null &&
                    this.RecordSequence.Equals(input.RecordSequence))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.PartSequence == input.PartSequence ||
                    (this.PartSequence != null &&
                    this.PartSequence.Equals(input.PartSequence))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.InfoDate == input.InfoDate ||
                    (this.InfoDate != null &&
                    this.InfoDate.Equals(input.InfoDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.Remarks1 == input.Remarks1 ||
                    (this.Remarks1 != null &&
                    this.Remarks1.Equals(input.Remarks1))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordSequence != null)
                    hashCode = hashCode * 59 + this.RecordSequence.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.PartSequence != null)
                    hashCode = hashCode * 59 + this.PartSequence.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.InfoDate != null)
                    hashCode = hashCode * 59 + this.InfoDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.Remarks1 != null)
                    hashCode = hashCode * 59 + this.Remarks1.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
