/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsAKANames
    /// </summary>
    [DataContract]
    public partial class XdsAKANames :  IEquatable<XdsAKANames>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsAKANames" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="homeAffairsName">homeAffairsName.</param>
        /// <param name="lastUpdateddate">lastUpdateddate.</param>
        /// <param name="secondName">secondName.</param>
        /// <param name="surName">surName.</param>
        public XdsAKANames(string displayText = default(string), string firstName = default(string), string homeAffairsName = default(string), string lastUpdateddate = default(string), string secondName = default(string), string surName = default(string))
        {
            this.DisplayText = displayText;
            this.FirstName = firstName;
            this.HomeAffairsName = homeAffairsName;
            this.LastUpdateddate = lastUpdateddate;
            this.SecondName = secondName;
            this.SurName = surName;
            this.DisplayText = displayText;
            this.FirstName = firstName;
            this.HomeAffairsName = homeAffairsName;
            this.LastUpdateddate = lastUpdateddate;
            this.SecondName = secondName;
            this.SurName = surName;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets HomeAffairsName
        /// </summary>
        [DataMember(Name="homeAffairsName", EmitDefaultValue=true)]
        public string HomeAffairsName { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdateddate
        /// </summary>
        [DataMember(Name="lastUpdateddate", EmitDefaultValue=true)]
        public string LastUpdateddate { get; set; }

        /// <summary>
        /// Gets or Sets SecondName
        /// </summary>
        [DataMember(Name="secondName", EmitDefaultValue=true)]
        public string SecondName { get; set; }

        /// <summary>
        /// Gets or Sets SurName
        /// </summary>
        [DataMember(Name="surName", EmitDefaultValue=true)]
        public string SurName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsAKANames {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  HomeAffairsName: ").Append(HomeAffairsName).Append("\n");
            sb.Append("  LastUpdateddate: ").Append(LastUpdateddate).Append("\n");
            sb.Append("  SecondName: ").Append(SecondName).Append("\n");
            sb.Append("  SurName: ").Append(SurName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsAKANames);
        }

        /// <summary>
        /// Returns true if XdsAKANames instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsAKANames to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsAKANames input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.HomeAffairsName == input.HomeAffairsName ||
                    (this.HomeAffairsName != null &&
                    this.HomeAffairsName.Equals(input.HomeAffairsName))
                ) && 
                (
                    this.LastUpdateddate == input.LastUpdateddate ||
                    (this.LastUpdateddate != null &&
                    this.LastUpdateddate.Equals(input.LastUpdateddate))
                ) && 
                (
                    this.SecondName == input.SecondName ||
                    (this.SecondName != null &&
                    this.SecondName.Equals(input.SecondName))
                ) && 
                (
                    this.SurName == input.SurName ||
                    (this.SurName != null &&
                    this.SurName.Equals(input.SurName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.HomeAffairsName != null)
                    hashCode = hashCode * 59 + this.HomeAffairsName.GetHashCode();
                if (this.LastUpdateddate != null)
                    hashCode = hashCode * 59 + this.LastUpdateddate.GetHashCode();
                if (this.SecondName != null)
                    hashCode = hashCode * 59 + this.SecondName.GetHashCode();
                if (this.SurName != null)
                    hashCode = hashCode * 59 + this.SurName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
