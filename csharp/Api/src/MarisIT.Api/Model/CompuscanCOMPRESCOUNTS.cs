/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPRESCOUNTS
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPRESCOUNTS :  IEquatable<CompuscanCOMPRESCOUNTS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPRESCOUNTS" /> class.
        /// </summary>
        /// <param name="adrscnt">adrscnt.</param>
        /// <param name="audcnt">audcnt.</param>
        /// <param name="bankerscnt">bankerscnt.</param>
        /// <param name="commaddcnt">commaddcnt.</param>
        /// <param name="commconcnt">commconcnt.</param>
        /// <param name="contractscnt">contractscnt.</param>
        /// <param name="diradrscnt">diradrscnt.</param>
        /// <param name="dircnt">dircnt.</param>
        /// <param name="fincnt">fincnt.</param>
        /// <param name="insurecnt">insurecnt.</param>
        /// <param name="judgecnt">judgecnt.</param>
        /// <param name="lnkcmpcnt">lnkcmpcnt.</param>
        /// <param name="nonactiveprincipalscnt">nonactiveprincipalscnt.</param>
        /// <param name="noticescnt">noticescnt.</param>
        /// <param name="prevenqcnt">prevenqcnt.</param>
        /// <param name="principalanalyticscnt">principalanalyticscnt.</param>
        /// <param name="propcnt">propcnt.</param>
        /// <param name="staffcnt">staffcnt.</param>
        /// <param name="tradehiscnt">tradehiscnt.</param>
        /// <param name="traderefcnt">traderefcnt.</param>
        /// <param name="vehiclecnt">vehiclecnt.</param>
        public CompuscanCOMPRESCOUNTS(int adrscnt = default(int), int audcnt = default(int), int bankerscnt = default(int), int commaddcnt = default(int), int commconcnt = default(int), int contractscnt = default(int), int diradrscnt = default(int), int dircnt = default(int), int fincnt = default(int), int insurecnt = default(int), int judgecnt = default(int), int lnkcmpcnt = default(int), int nonactiveprincipalscnt = default(int), int noticescnt = default(int), int prevenqcnt = default(int), int principalanalyticscnt = default(int), int propcnt = default(int), int staffcnt = default(int), int tradehiscnt = default(int), int traderefcnt = default(int), int vehiclecnt = default(int))
        {
            this.Adrscnt = adrscnt;
            this.Audcnt = audcnt;
            this.Bankerscnt = bankerscnt;
            this.Commaddcnt = commaddcnt;
            this.Commconcnt = commconcnt;
            this.Contractscnt = contractscnt;
            this.Diradrscnt = diradrscnt;
            this.Dircnt = dircnt;
            this.Fincnt = fincnt;
            this.Insurecnt = insurecnt;
            this.Judgecnt = judgecnt;
            this.Lnkcmpcnt = lnkcmpcnt;
            this.Nonactiveprincipalscnt = nonactiveprincipalscnt;
            this.Noticescnt = noticescnt;
            this.Prevenqcnt = prevenqcnt;
            this.Principalanalyticscnt = principalanalyticscnt;
            this.Propcnt = propcnt;
            this.Staffcnt = staffcnt;
            this.Tradehiscnt = tradehiscnt;
            this.Traderefcnt = traderefcnt;
            this.Vehiclecnt = vehiclecnt;
        }

        /// <summary>
        /// Gets or Sets Adrscnt
        /// </summary>
        [DataMember(Name="adrscnt", EmitDefaultValue=false)]
        public int Adrscnt { get; set; }

        /// <summary>
        /// Gets or Sets Audcnt
        /// </summary>
        [DataMember(Name="audcnt", EmitDefaultValue=false)]
        public int Audcnt { get; set; }

        /// <summary>
        /// Gets or Sets Bankerscnt
        /// </summary>
        [DataMember(Name="bankerscnt", EmitDefaultValue=false)]
        public int Bankerscnt { get; set; }

        /// <summary>
        /// Gets or Sets Commaddcnt
        /// </summary>
        [DataMember(Name="commaddcnt", EmitDefaultValue=false)]
        public int Commaddcnt { get; set; }

        /// <summary>
        /// Gets or Sets Commconcnt
        /// </summary>
        [DataMember(Name="commconcnt", EmitDefaultValue=false)]
        public int Commconcnt { get; set; }

        /// <summary>
        /// Gets or Sets Contractscnt
        /// </summary>
        [DataMember(Name="contractscnt", EmitDefaultValue=false)]
        public int Contractscnt { get; set; }

        /// <summary>
        /// Gets or Sets Diradrscnt
        /// </summary>
        [DataMember(Name="diradrscnt", EmitDefaultValue=false)]
        public int Diradrscnt { get; set; }

        /// <summary>
        /// Gets or Sets Dircnt
        /// </summary>
        [DataMember(Name="dircnt", EmitDefaultValue=false)]
        public int Dircnt { get; set; }

        /// <summary>
        /// Gets or Sets Fincnt
        /// </summary>
        [DataMember(Name="fincnt", EmitDefaultValue=false)]
        public int Fincnt { get; set; }

        /// <summary>
        /// Gets or Sets Insurecnt
        /// </summary>
        [DataMember(Name="insurecnt", EmitDefaultValue=false)]
        public int Insurecnt { get; set; }

        /// <summary>
        /// Gets or Sets Judgecnt
        /// </summary>
        [DataMember(Name="judgecnt", EmitDefaultValue=false)]
        public int Judgecnt { get; set; }

        /// <summary>
        /// Gets or Sets Lnkcmpcnt
        /// </summary>
        [DataMember(Name="lnkcmpcnt", EmitDefaultValue=false)]
        public int Lnkcmpcnt { get; set; }

        /// <summary>
        /// Gets or Sets Nonactiveprincipalscnt
        /// </summary>
        [DataMember(Name="nonactiveprincipalscnt", EmitDefaultValue=false)]
        public int Nonactiveprincipalscnt { get; set; }

        /// <summary>
        /// Gets or Sets Noticescnt
        /// </summary>
        [DataMember(Name="noticescnt", EmitDefaultValue=false)]
        public int Noticescnt { get; set; }

        /// <summary>
        /// Gets or Sets Prevenqcnt
        /// </summary>
        [DataMember(Name="prevenqcnt", EmitDefaultValue=false)]
        public int Prevenqcnt { get; set; }

        /// <summary>
        /// Gets or Sets Principalanalyticscnt
        /// </summary>
        [DataMember(Name="principalanalyticscnt", EmitDefaultValue=false)]
        public int Principalanalyticscnt { get; set; }

        /// <summary>
        /// Gets or Sets Propcnt
        /// </summary>
        [DataMember(Name="propcnt", EmitDefaultValue=false)]
        public int Propcnt { get; set; }

        /// <summary>
        /// Gets or Sets Staffcnt
        /// </summary>
        [DataMember(Name="staffcnt", EmitDefaultValue=false)]
        public int Staffcnt { get; set; }

        /// <summary>
        /// Gets or Sets Tradehiscnt
        /// </summary>
        [DataMember(Name="tradehiscnt", EmitDefaultValue=false)]
        public int Tradehiscnt { get; set; }

        /// <summary>
        /// Gets or Sets Traderefcnt
        /// </summary>
        [DataMember(Name="traderefcnt", EmitDefaultValue=false)]
        public int Traderefcnt { get; set; }

        /// <summary>
        /// Gets or Sets Vehiclecnt
        /// </summary>
        [DataMember(Name="vehiclecnt", EmitDefaultValue=false)]
        public int Vehiclecnt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPRESCOUNTS {\n");
            sb.Append("  Adrscnt: ").Append(Adrscnt).Append("\n");
            sb.Append("  Audcnt: ").Append(Audcnt).Append("\n");
            sb.Append("  Bankerscnt: ").Append(Bankerscnt).Append("\n");
            sb.Append("  Commaddcnt: ").Append(Commaddcnt).Append("\n");
            sb.Append("  Commconcnt: ").Append(Commconcnt).Append("\n");
            sb.Append("  Contractscnt: ").Append(Contractscnt).Append("\n");
            sb.Append("  Diradrscnt: ").Append(Diradrscnt).Append("\n");
            sb.Append("  Dircnt: ").Append(Dircnt).Append("\n");
            sb.Append("  Fincnt: ").Append(Fincnt).Append("\n");
            sb.Append("  Insurecnt: ").Append(Insurecnt).Append("\n");
            sb.Append("  Judgecnt: ").Append(Judgecnt).Append("\n");
            sb.Append("  Lnkcmpcnt: ").Append(Lnkcmpcnt).Append("\n");
            sb.Append("  Nonactiveprincipalscnt: ").Append(Nonactiveprincipalscnt).Append("\n");
            sb.Append("  Noticescnt: ").Append(Noticescnt).Append("\n");
            sb.Append("  Prevenqcnt: ").Append(Prevenqcnt).Append("\n");
            sb.Append("  Principalanalyticscnt: ").Append(Principalanalyticscnt).Append("\n");
            sb.Append("  Propcnt: ").Append(Propcnt).Append("\n");
            sb.Append("  Staffcnt: ").Append(Staffcnt).Append("\n");
            sb.Append("  Tradehiscnt: ").Append(Tradehiscnt).Append("\n");
            sb.Append("  Traderefcnt: ").Append(Traderefcnt).Append("\n");
            sb.Append("  Vehiclecnt: ").Append(Vehiclecnt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPRESCOUNTS);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPRESCOUNTS instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPRESCOUNTS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPRESCOUNTS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Adrscnt == input.Adrscnt ||
                    (this.Adrscnt != null &&
                    this.Adrscnt.Equals(input.Adrscnt))
                ) && 
                (
                    this.Audcnt == input.Audcnt ||
                    (this.Audcnt != null &&
                    this.Audcnt.Equals(input.Audcnt))
                ) && 
                (
                    this.Bankerscnt == input.Bankerscnt ||
                    (this.Bankerscnt != null &&
                    this.Bankerscnt.Equals(input.Bankerscnt))
                ) && 
                (
                    this.Commaddcnt == input.Commaddcnt ||
                    (this.Commaddcnt != null &&
                    this.Commaddcnt.Equals(input.Commaddcnt))
                ) && 
                (
                    this.Commconcnt == input.Commconcnt ||
                    (this.Commconcnt != null &&
                    this.Commconcnt.Equals(input.Commconcnt))
                ) && 
                (
                    this.Contractscnt == input.Contractscnt ||
                    (this.Contractscnt != null &&
                    this.Contractscnt.Equals(input.Contractscnt))
                ) && 
                (
                    this.Diradrscnt == input.Diradrscnt ||
                    (this.Diradrscnt != null &&
                    this.Diradrscnt.Equals(input.Diradrscnt))
                ) && 
                (
                    this.Dircnt == input.Dircnt ||
                    (this.Dircnt != null &&
                    this.Dircnt.Equals(input.Dircnt))
                ) && 
                (
                    this.Fincnt == input.Fincnt ||
                    (this.Fincnt != null &&
                    this.Fincnt.Equals(input.Fincnt))
                ) && 
                (
                    this.Insurecnt == input.Insurecnt ||
                    (this.Insurecnt != null &&
                    this.Insurecnt.Equals(input.Insurecnt))
                ) && 
                (
                    this.Judgecnt == input.Judgecnt ||
                    (this.Judgecnt != null &&
                    this.Judgecnt.Equals(input.Judgecnt))
                ) && 
                (
                    this.Lnkcmpcnt == input.Lnkcmpcnt ||
                    (this.Lnkcmpcnt != null &&
                    this.Lnkcmpcnt.Equals(input.Lnkcmpcnt))
                ) && 
                (
                    this.Nonactiveprincipalscnt == input.Nonactiveprincipalscnt ||
                    (this.Nonactiveprincipalscnt != null &&
                    this.Nonactiveprincipalscnt.Equals(input.Nonactiveprincipalscnt))
                ) && 
                (
                    this.Noticescnt == input.Noticescnt ||
                    (this.Noticescnt != null &&
                    this.Noticescnt.Equals(input.Noticescnt))
                ) && 
                (
                    this.Prevenqcnt == input.Prevenqcnt ||
                    (this.Prevenqcnt != null &&
                    this.Prevenqcnt.Equals(input.Prevenqcnt))
                ) && 
                (
                    this.Principalanalyticscnt == input.Principalanalyticscnt ||
                    (this.Principalanalyticscnt != null &&
                    this.Principalanalyticscnt.Equals(input.Principalanalyticscnt))
                ) && 
                (
                    this.Propcnt == input.Propcnt ||
                    (this.Propcnt != null &&
                    this.Propcnt.Equals(input.Propcnt))
                ) && 
                (
                    this.Staffcnt == input.Staffcnt ||
                    (this.Staffcnt != null &&
                    this.Staffcnt.Equals(input.Staffcnt))
                ) && 
                (
                    this.Tradehiscnt == input.Tradehiscnt ||
                    (this.Tradehiscnt != null &&
                    this.Tradehiscnt.Equals(input.Tradehiscnt))
                ) && 
                (
                    this.Traderefcnt == input.Traderefcnt ||
                    (this.Traderefcnt != null &&
                    this.Traderefcnt.Equals(input.Traderefcnt))
                ) && 
                (
                    this.Vehiclecnt == input.Vehiclecnt ||
                    (this.Vehiclecnt != null &&
                    this.Vehiclecnt.Equals(input.Vehiclecnt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Adrscnt != null)
                    hashCode = hashCode * 59 + this.Adrscnt.GetHashCode();
                if (this.Audcnt != null)
                    hashCode = hashCode * 59 + this.Audcnt.GetHashCode();
                if (this.Bankerscnt != null)
                    hashCode = hashCode * 59 + this.Bankerscnt.GetHashCode();
                if (this.Commaddcnt != null)
                    hashCode = hashCode * 59 + this.Commaddcnt.GetHashCode();
                if (this.Commconcnt != null)
                    hashCode = hashCode * 59 + this.Commconcnt.GetHashCode();
                if (this.Contractscnt != null)
                    hashCode = hashCode * 59 + this.Contractscnt.GetHashCode();
                if (this.Diradrscnt != null)
                    hashCode = hashCode * 59 + this.Diradrscnt.GetHashCode();
                if (this.Dircnt != null)
                    hashCode = hashCode * 59 + this.Dircnt.GetHashCode();
                if (this.Fincnt != null)
                    hashCode = hashCode * 59 + this.Fincnt.GetHashCode();
                if (this.Insurecnt != null)
                    hashCode = hashCode * 59 + this.Insurecnt.GetHashCode();
                if (this.Judgecnt != null)
                    hashCode = hashCode * 59 + this.Judgecnt.GetHashCode();
                if (this.Lnkcmpcnt != null)
                    hashCode = hashCode * 59 + this.Lnkcmpcnt.GetHashCode();
                if (this.Nonactiveprincipalscnt != null)
                    hashCode = hashCode * 59 + this.Nonactiveprincipalscnt.GetHashCode();
                if (this.Noticescnt != null)
                    hashCode = hashCode * 59 + this.Noticescnt.GetHashCode();
                if (this.Prevenqcnt != null)
                    hashCode = hashCode * 59 + this.Prevenqcnt.GetHashCode();
                if (this.Principalanalyticscnt != null)
                    hashCode = hashCode * 59 + this.Principalanalyticscnt.GetHashCode();
                if (this.Propcnt != null)
                    hashCode = hashCode * 59 + this.Propcnt.GetHashCode();
                if (this.Staffcnt != null)
                    hashCode = hashCode * 59 + this.Staffcnt.GetHashCode();
                if (this.Tradehiscnt != null)
                    hashCode = hashCode * 59 + this.Tradehiscnt.GetHashCode();
                if (this.Traderefcnt != null)
                    hashCode = hashCode * 59 + this.Traderefcnt.GetHashCode();
                if (this.Vehiclecnt != null)
                    hashCode = hashCode * 59 + this.Vehiclecnt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
