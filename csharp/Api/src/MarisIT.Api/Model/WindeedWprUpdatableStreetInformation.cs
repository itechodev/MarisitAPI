/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprUpdatableStreetInformation
    /// </summary>
    [DataContract]
    public partial class WindeedWprUpdatableStreetInformation :  IEquatable<WindeedWprUpdatableStreetInformation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets StreetType
        /// </summary>
        [DataMember(Name="streetType", EmitDefaultValue=false)]
        public WindeedWprStreetType? StreetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprUpdatableStreetInformation" /> class.
        /// </summary>
        /// <param name="streetNumber">streetNumber.</param>
        /// <param name="streetNumberSuffix">streetNumberSuffix.</param>
        /// <param name="streetName">streetName.</param>
        /// <param name="buildingName">buildingName.</param>
        /// <param name="streetType">streetType.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="town">town.</param>
        public WindeedWprUpdatableStreetInformation(string streetNumber = default(string), string streetNumberSuffix = default(string), string streetName = default(string), string buildingName = default(string), WindeedWprStreetType? streetType = default(WindeedWprStreetType?), string suburb = default(string), string town = default(string))
        {
            this.StreetNumber = streetNumber;
            this.StreetNumberSuffix = streetNumberSuffix;
            this.StreetName = streetName;
            this.BuildingName = buildingName;
            this.Suburb = suburb;
            this.Town = town;
            this.StreetNumber = streetNumber;
            this.StreetNumberSuffix = streetNumberSuffix;
            this.StreetName = streetName;
            this.BuildingName = buildingName;
            this.StreetType = streetType;
            this.Suburb = suburb;
            this.Town = town;
        }

        /// <summary>
        /// Gets or Sets StreetNumber
        /// </summary>
        [DataMember(Name="streetNumber", EmitDefaultValue=true)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets StreetNumberSuffix
        /// </summary>
        [DataMember(Name="streetNumberSuffix", EmitDefaultValue=true)]
        public string StreetNumberSuffix { get; set; }

        /// <summary>
        /// Gets or Sets StreetName
        /// </summary>
        [DataMember(Name="streetName", EmitDefaultValue=true)]
        public string StreetName { get; set; }

        /// <summary>
        /// Gets or Sets BuildingName
        /// </summary>
        [DataMember(Name="buildingName", EmitDefaultValue=true)]
        public string BuildingName { get; set; }


        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name="town", EmitDefaultValue=true)]
        public string Town { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprUpdatableStreetInformation {\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  StreetNumberSuffix: ").Append(StreetNumberSuffix).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  BuildingName: ").Append(BuildingName).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprUpdatableStreetInformation);
        }

        /// <summary>
        /// Returns true if WindeedWprUpdatableStreetInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprUpdatableStreetInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprUpdatableStreetInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.StreetNumberSuffix == input.StreetNumberSuffix ||
                    (this.StreetNumberSuffix != null &&
                    this.StreetNumberSuffix.Equals(input.StreetNumberSuffix))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.BuildingName == input.BuildingName ||
                    (this.BuildingName != null &&
                    this.BuildingName.Equals(input.BuildingName))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Town == input.Town ||
                    (this.Town != null &&
                    this.Town.Equals(input.Town))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.StreetNumberSuffix != null)
                    hashCode = hashCode * 59 + this.StreetNumberSuffix.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.BuildingName != null)
                    hashCode = hashCode * 59 + this.BuildingName.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Town != null)
                    hashCode = hashCode * 59 + this.Town.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
