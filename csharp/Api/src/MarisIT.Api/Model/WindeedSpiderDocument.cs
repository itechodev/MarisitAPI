/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedSpiderDocument
    /// </summary>
    [DataContract]
    public partial class WindeedSpiderDocument :  IEquatable<WindeedSpiderDocument>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedSpiderRegistrar? DeedsOffice { get; set; }
        /// <summary>
        /// Gets or Sets DocumentGroup
        /// </summary>
        [DataMember(Name="documentGroup", EmitDefaultValue=false)]
        public WindeedSpiderDocumentGroup? DocumentGroup { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedSpiderDocument" /> class.
        /// </summary>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="documentGroup">documentGroup.</param>
        /// <param name="microfilmNumber">microfilmNumber.</param>
        /// <param name="documentNumber">documentNumber.</param>
        /// <param name="purchasePrice">purchasePrice.</param>
        /// <param name="purchasePriceDescription">purchasePriceDescription.</param>
        /// <param name="purchaseDate">purchaseDate.</param>
        /// <param name="registrationDate">registrationDate.</param>
        /// <param name="share">share.</param>
        /// <param name="owners">owners.</param>
        public WindeedSpiderDocument(WindeedSpiderRegistrar? deedsOffice = default(WindeedSpiderRegistrar?), string documentType = default(string), WindeedSpiderDocumentGroup? documentGroup = default(WindeedSpiderDocumentGroup?), string microfilmNumber = default(string), string documentNumber = default(string), double? purchasePrice = default(double?), string purchasePriceDescription = default(string), DateTime? purchaseDate = default(DateTime?), DateTime? registrationDate = default(DateTime?), double? share = default(double?), List<WindeedSpiderOwner> owners = default(List<WindeedSpiderOwner>))
        {
            this.DocumentType = documentType;
            this.MicrofilmNumber = microfilmNumber;
            this.DocumentNumber = documentNumber;
            this.PurchasePrice = purchasePrice;
            this.PurchasePriceDescription = purchasePriceDescription;
            this.PurchaseDate = purchaseDate;
            this.RegistrationDate = registrationDate;
            this.Share = share;
            this.Owners = owners;
            this.DeedsOffice = deedsOffice;
            this.DocumentType = documentType;
            this.DocumentGroup = documentGroup;
            this.MicrofilmNumber = microfilmNumber;
            this.DocumentNumber = documentNumber;
            this.PurchasePrice = purchasePrice;
            this.PurchasePriceDescription = purchasePriceDescription;
            this.PurchaseDate = purchaseDate;
            this.RegistrationDate = registrationDate;
            this.Share = share;
            this.Owners = owners;
        }


        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=true)]
        public string DocumentType { get; set; }


        /// <summary>
        /// Gets or Sets MicrofilmNumber
        /// </summary>
        [DataMember(Name="microfilmNumber", EmitDefaultValue=true)]
        public string MicrofilmNumber { get; set; }

        /// <summary>
        /// Gets or Sets DocumentNumber
        /// </summary>
        [DataMember(Name="documentNumber", EmitDefaultValue=true)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="purchasePrice", EmitDefaultValue=true)]
        public double? PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceDescription
        /// </summary>
        [DataMember(Name="purchasePriceDescription", EmitDefaultValue=true)]
        public string PurchasePriceDescription { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchaseDate", EmitDefaultValue=true)]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name="registrationDate", EmitDefaultValue=true)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [DataMember(Name="share", EmitDefaultValue=true)]
        public double? Share { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=true)]
        public List<WindeedSpiderOwner> Owners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedSpiderDocument {\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentGroup: ").Append(DocumentGroup).Append("\n");
            sb.Append("  MicrofilmNumber: ").Append(MicrofilmNumber).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  PurchasePriceDescription: ").Append(PurchasePriceDescription).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedSpiderDocument);
        }

        /// <summary>
        /// Returns true if WindeedSpiderDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedSpiderDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedSpiderDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DocumentGroup == input.DocumentGroup ||
                    (this.DocumentGroup != null &&
                    this.DocumentGroup.Equals(input.DocumentGroup))
                ) && 
                (
                    this.MicrofilmNumber == input.MicrofilmNumber ||
                    (this.MicrofilmNumber != null &&
                    this.MicrofilmNumber.Equals(input.MicrofilmNumber))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.PurchasePriceDescription == input.PurchasePriceDescription ||
                    (this.PurchasePriceDescription != null &&
                    this.PurchasePriceDescription.Equals(input.PurchasePriceDescription))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.Share == input.Share ||
                    (this.Share != null &&
                    this.Share.Equals(input.Share))
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.DocumentGroup != null)
                    hashCode = hashCode * 59 + this.DocumentGroup.GetHashCode();
                if (this.MicrofilmNumber != null)
                    hashCode = hashCode * 59 + this.MicrofilmNumber.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.PurchasePriceDescription != null)
                    hashCode = hashCode * 59 + this.PurchasePriceDescription.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.Share != null)
                    hashCode = hashCode * 59 + this.Share.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
