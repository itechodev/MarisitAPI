/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsDirectorEnquiryHistory
    /// </summary>
    [DataContract]
    public partial class XdsDirectorEnquiryHistory :  IEquatable<XdsDirectorEnquiryHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsDirectorEnquiryHistory" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="enquiryDate">enquiryDate.</param>
        /// <param name="subscriberBusinessTypeDesc">subscriberBusinessTypeDesc.</param>
        /// <param name="subscriberContact">subscriberContact.</param>
        /// <param name="subscriberName">subscriberName.</param>
        public XdsDirectorEnquiryHistory(string displayText = default(string), string enquiryDate = default(string), string subscriberBusinessTypeDesc = default(string), string subscriberContact = default(string), string subscriberName = default(string))
        {
            this.DisplayText = displayText;
            this.EnquiryDate = enquiryDate;
            this.SubscriberBusinessTypeDesc = subscriberBusinessTypeDesc;
            this.SubscriberContact = subscriberContact;
            this.SubscriberName = subscriberName;
            this.DisplayText = displayText;
            this.EnquiryDate = enquiryDate;
            this.SubscriberBusinessTypeDesc = subscriberBusinessTypeDesc;
            this.SubscriberContact = subscriberContact;
            this.SubscriberName = subscriberName;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryDate
        /// </summary>
        [DataMember(Name="enquiryDate", EmitDefaultValue=true)]
        public string EnquiryDate { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberBusinessTypeDesc
        /// </summary>
        [DataMember(Name="subscriberBusinessTypeDesc", EmitDefaultValue=true)]
        public string SubscriberBusinessTypeDesc { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberContact
        /// </summary>
        [DataMember(Name="subscriberContact", EmitDefaultValue=true)]
        public string SubscriberContact { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="subscriberName", EmitDefaultValue=true)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsDirectorEnquiryHistory {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  EnquiryDate: ").Append(EnquiryDate).Append("\n");
            sb.Append("  SubscriberBusinessTypeDesc: ").Append(SubscriberBusinessTypeDesc).Append("\n");
            sb.Append("  SubscriberContact: ").Append(SubscriberContact).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsDirectorEnquiryHistory);
        }

        /// <summary>
        /// Returns true if XdsDirectorEnquiryHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsDirectorEnquiryHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsDirectorEnquiryHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.EnquiryDate == input.EnquiryDate ||
                    (this.EnquiryDate != null &&
                    this.EnquiryDate.Equals(input.EnquiryDate))
                ) && 
                (
                    this.SubscriberBusinessTypeDesc == input.SubscriberBusinessTypeDesc ||
                    (this.SubscriberBusinessTypeDesc != null &&
                    this.SubscriberBusinessTypeDesc.Equals(input.SubscriberBusinessTypeDesc))
                ) && 
                (
                    this.SubscriberContact == input.SubscriberContact ||
                    (this.SubscriberContact != null &&
                    this.SubscriberContact.Equals(input.SubscriberContact))
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.EnquiryDate != null)
                    hashCode = hashCode * 59 + this.EnquiryDate.GetHashCode();
                if (this.SubscriberBusinessTypeDesc != null)
                    hashCode = hashCode * 59 + this.SubscriberBusinessTypeDesc.GetHashCode();
                if (this.SubscriberContact != null)
                    hashCode = hashCode * 59 + this.SubscriberContact.GetHashCode();
                if (this.SubscriberName != null)
                    hashCode = hashCode * 59 + this.SubscriberName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
