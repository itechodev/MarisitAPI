/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCommercialBankCodeHistory
    /// </summary>
    [DataContract]
    public partial class XdsCommercialBankCodeHistory :  IEquatable<XdsCommercialBankCodeHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialBankCodeHistory" /> class.
        /// </summary>
        /// <param name="accountName">accountName.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="bank">bank.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="bankComments">bankComments.</param>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="branchName">branchName.</param>
        /// <param name="comment">comment.</param>
        /// <param name="company">company.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="dateOpened">dateOpened.</param>
        /// <param name="dateRequested">dateRequested.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="enquiryAmount">enquiryAmount.</param>
        /// <param name="yearswithBank">yearswithBank.</param>
        /// <param name="terms">terms.</param>
        public XdsCommercialBankCodeHistory(string accountName = default(string), string accountNumber = default(string), string bank = default(string), string bankCode = default(string), string bankComments = default(string), string branchCode = default(string), string branchName = default(string), string comment = default(string), string company = default(string), string currencyType = default(string), string dateOpened = default(string), string dateRequested = default(string), string displayText = default(string), string enquiryAmount = default(string), string yearswithBank = default(string), string terms = default(string))
        {
            this.AccountName = accountName;
            this.AccountNumber = accountNumber;
            this.Bank = bank;
            this.BankCode = bankCode;
            this.BankComments = bankComments;
            this.BranchCode = branchCode;
            this.BranchName = branchName;
            this.Comment = comment;
            this.Company = company;
            this.CurrencyType = currencyType;
            this.DateOpened = dateOpened;
            this.DateRequested = dateRequested;
            this.DisplayText = displayText;
            this.EnquiryAmount = enquiryAmount;
            this.YearswithBank = yearswithBank;
            this.Terms = terms;
            this.AccountName = accountName;
            this.AccountNumber = accountNumber;
            this.Bank = bank;
            this.BankCode = bankCode;
            this.BankComments = bankComments;
            this.BranchCode = branchCode;
            this.BranchName = branchName;
            this.Comment = comment;
            this.Company = company;
            this.CurrencyType = currencyType;
            this.DateOpened = dateOpened;
            this.DateRequested = dateRequested;
            this.DisplayText = displayText;
            this.EnquiryAmount = enquiryAmount;
            this.YearswithBank = yearswithBank;
            this.Terms = terms;
        }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=true)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=true)]
        public string Bank { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="bankCode", EmitDefaultValue=true)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets BankComments
        /// </summary>
        [DataMember(Name="bankComments", EmitDefaultValue=true)]
        public string BankComments { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name="branchCode", EmitDefaultValue=true)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets BranchName
        /// </summary>
        [DataMember(Name="branchName", EmitDefaultValue=true)]
        public string BranchName { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=true)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=true)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets DateOpened
        /// </summary>
        [DataMember(Name="dateOpened", EmitDefaultValue=true)]
        public string DateOpened { get; set; }

        /// <summary>
        /// Gets or Sets DateRequested
        /// </summary>
        [DataMember(Name="dateRequested", EmitDefaultValue=true)]
        public string DateRequested { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryAmount
        /// </summary>
        [DataMember(Name="enquiryAmount", EmitDefaultValue=true)]
        public string EnquiryAmount { get; set; }

        /// <summary>
        /// Gets or Sets YearswithBank
        /// </summary>
        [DataMember(Name="yearswithBank", EmitDefaultValue=true)]
        public string YearswithBank { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=true)]
        public string Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCommercialBankCodeHistory {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankComments: ").Append(BankComments).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  DateOpened: ").Append(DateOpened).Append("\n");
            sb.Append("  DateRequested: ").Append(DateRequested).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  EnquiryAmount: ").Append(EnquiryAmount).Append("\n");
            sb.Append("  YearswithBank: ").Append(YearswithBank).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCommercialBankCodeHistory);
        }

        /// <summary>
        /// Returns true if XdsCommercialBankCodeHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCommercialBankCodeHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCommercialBankCodeHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BankComments == input.BankComments ||
                    (this.BankComments != null &&
                    this.BankComments.Equals(input.BankComments))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.BranchName == input.BranchName ||
                    (this.BranchName != null &&
                    this.BranchName.Equals(input.BranchName))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.DateOpened == input.DateOpened ||
                    (this.DateOpened != null &&
                    this.DateOpened.Equals(input.DateOpened))
                ) && 
                (
                    this.DateRequested == input.DateRequested ||
                    (this.DateRequested != null &&
                    this.DateRequested.Equals(input.DateRequested))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.EnquiryAmount == input.EnquiryAmount ||
                    (this.EnquiryAmount != null &&
                    this.EnquiryAmount.Equals(input.EnquiryAmount))
                ) && 
                (
                    this.YearswithBank == input.YearswithBank ||
                    (this.YearswithBank != null &&
                    this.YearswithBank.Equals(input.YearswithBank))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BankComments != null)
                    hashCode = hashCode * 59 + this.BankComments.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.BranchName != null)
                    hashCode = hashCode * 59 + this.BranchName.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CurrencyType != null)
                    hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.DateOpened != null)
                    hashCode = hashCode * 59 + this.DateOpened.GetHashCode();
                if (this.DateRequested != null)
                    hashCode = hashCode * 59 + this.DateRequested.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.EnquiryAmount != null)
                    hashCode = hashCode * 59 + this.EnquiryAmount.GetHashCode();
                if (this.YearswithBank != null)
                    hashCode = hashCode * 59 + this.YearswithBank.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
