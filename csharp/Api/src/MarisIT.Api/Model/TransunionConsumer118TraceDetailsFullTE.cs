/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118TraceDetailsFullTE
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118TraceDetailsFullTE :  IEquatable<TransunionConsumer118TraceDetailsFullTE>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118TraceDetailsFullTE" /> class.
        /// </summary>
        /// <param name="detailsFull">detailsFull.</param>
        /// <param name="count">count.</param>
        /// <param name="occurance">occurance.</param>
        public TransunionConsumer118TraceDetailsFullTE(string detailsFull = default(string), string count = default(string), string occurance = default(string))
        {
            this.DetailsFull = detailsFull;
            this.Count = count;
            this.Occurance = occurance;
            this.DetailsFull = detailsFull;
            this.Count = count;
            this.Occurance = occurance;
        }

        /// <summary>
        /// Gets or Sets DetailsFull
        /// </summary>
        [DataMember(Name="detailsFull", EmitDefaultValue=true)]
        public string DetailsFull { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public string Count { get; set; }

        /// <summary>
        /// Gets or Sets Occurance
        /// </summary>
        [DataMember(Name="occurance", EmitDefaultValue=true)]
        public string Occurance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118TraceDetailsFullTE {\n");
            sb.Append("  DetailsFull: ").Append(DetailsFull).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Occurance: ").Append(Occurance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118TraceDetailsFullTE);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118TraceDetailsFullTE instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118TraceDetailsFullTE to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118TraceDetailsFullTE input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetailsFull == input.DetailsFull ||
                    (this.DetailsFull != null &&
                    this.DetailsFull.Equals(input.DetailsFull))
                ) && 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Occurance == input.Occurance ||
                    (this.Occurance != null &&
                    this.Occurance.Equals(input.Occurance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailsFull != null)
                    hashCode = hashCode * 59 + this.DetailsFull.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Occurance != null)
                    hashCode = hashCode * 59 + this.Occurance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
