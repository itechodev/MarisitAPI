/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialEmpiricaEM04
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialEmpiricaEM04 :  IEquatable<TransunionCommercialEmpiricaEM04>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialEmpiricaEM04" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="empiricaScore">empiricaScore.</param>
        /// <param name="exclusionCode">exclusionCode.</param>
        /// <param name="exclusionCodeDescription">exclusionCodeDescription.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="reasonDescription">reasonDescription.</param>
        /// <param name="expansionScore">expansionScore.</param>
        /// <param name="expansionScoreDescription">expansionScoreDescription.</param>
        public TransunionCommercialEmpiricaEM04(string consumerNo = default(string), string empiricaScore = default(string), string exclusionCode = default(string), string exclusionCodeDescription = default(string), List<string> reasonCode = default(List<string>), List<string> reasonDescription = default(List<string>), string expansionScore = default(string), string expansionScoreDescription = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
            this.ExpansionScore = expansionScore;
            this.ExpansionScoreDescription = expansionScoreDescription;
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
            this.ExpansionScore = expansionScore;
            this.ExpansionScoreDescription = expansionScoreDescription;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaScore
        /// </summary>
        [DataMember(Name="empiricaScore", EmitDefaultValue=true)]
        public string EmpiricaScore { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCode
        /// </summary>
        [DataMember(Name="exclusionCode", EmitDefaultValue=true)]
        public string ExclusionCode { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCodeDescription
        /// </summary>
        [DataMember(Name="exclusionCodeDescription", EmitDefaultValue=true)]
        public string ExclusionCodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="reasonCode", EmitDefaultValue=true)]
        public List<string> ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonDescription
        /// </summary>
        [DataMember(Name="reasonDescription", EmitDefaultValue=true)]
        public List<string> ReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionScore
        /// </summary>
        [DataMember(Name="expansionScore", EmitDefaultValue=true)]
        public string ExpansionScore { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionScoreDescription
        /// </summary>
        [DataMember(Name="expansionScoreDescription", EmitDefaultValue=true)]
        public string ExpansionScoreDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialEmpiricaEM04 {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  EmpiricaScore: ").Append(EmpiricaScore).Append("\n");
            sb.Append("  ExclusionCode: ").Append(ExclusionCode).Append("\n");
            sb.Append("  ExclusionCodeDescription: ").Append(ExclusionCodeDescription).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonDescription: ").Append(ReasonDescription).Append("\n");
            sb.Append("  ExpansionScore: ").Append(ExpansionScore).Append("\n");
            sb.Append("  ExpansionScoreDescription: ").Append(ExpansionScoreDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialEmpiricaEM04);
        }

        /// <summary>
        /// Returns true if TransunionCommercialEmpiricaEM04 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialEmpiricaEM04 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialEmpiricaEM04 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.EmpiricaScore == input.EmpiricaScore ||
                    (this.EmpiricaScore != null &&
                    this.EmpiricaScore.Equals(input.EmpiricaScore))
                ) && 
                (
                    this.ExclusionCode == input.ExclusionCode ||
                    (this.ExclusionCode != null &&
                    this.ExclusionCode.Equals(input.ExclusionCode))
                ) && 
                (
                    this.ExclusionCodeDescription == input.ExclusionCodeDescription ||
                    (this.ExclusionCodeDescription != null &&
                    this.ExclusionCodeDescription.Equals(input.ExclusionCodeDescription))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    this.ReasonCode != null &&
                    input.ReasonCode != null &&
                    this.ReasonCode.SequenceEqual(input.ReasonCode)
                ) && 
                (
                    this.ReasonDescription == input.ReasonDescription ||
                    this.ReasonDescription != null &&
                    input.ReasonDescription != null &&
                    this.ReasonDescription.SequenceEqual(input.ReasonDescription)
                ) && 
                (
                    this.ExpansionScore == input.ExpansionScore ||
                    (this.ExpansionScore != null &&
                    this.ExpansionScore.Equals(input.ExpansionScore))
                ) && 
                (
                    this.ExpansionScoreDescription == input.ExpansionScoreDescription ||
                    (this.ExpansionScoreDescription != null &&
                    this.ExpansionScoreDescription.Equals(input.ExpansionScoreDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.EmpiricaScore != null)
                    hashCode = hashCode * 59 + this.EmpiricaScore.GetHashCode();
                if (this.ExclusionCode != null)
                    hashCode = hashCode * 59 + this.ExclusionCode.GetHashCode();
                if (this.ExclusionCodeDescription != null)
                    hashCode = hashCode * 59 + this.ExclusionCodeDescription.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.ReasonDescription != null)
                    hashCode = hashCode * 59 + this.ReasonDescription.GetHashCode();
                if (this.ExpansionScore != null)
                    hashCode = hashCode * 59 + this.ExpansionScore.GetHashCode();
                if (this.ExpansionScoreDescription != null)
                    hashCode = hashCode * 59 + this.ExpansionScoreDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
