/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCommercialTradeReferencesInformation
    /// </summary>
    [DataContract]
    public partial class XdsCommercialTradeReferencesInformation :  IEquatable<XdsCommercialTradeReferencesInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialTradeReferencesInformation" /> class.
        /// </summary>
        /// <param name="ageOfAccount">ageOfAccount.</param>
        /// <param name="averagePurchases">averagePurchases.</param>
        /// <param name="comment">comment.</param>
        /// <param name="comment1">comment1.</param>
        /// <param name="createdondate">createdondate.</param>
        /// <param name="creditLimit">creditLimit.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="maxLimit">maxLimit.</param>
        /// <param name="nortarial">nortarial.</param>
        /// <param name="otherCurrencyType">otherCurrencyType.</param>
        /// <param name="reportTradeRefID">reportTradeRefID.</param>
        /// <param name="supplier">supplier.</param>
        /// <param name="suretyValue">suretyValue.</param>
        /// <param name="telephoneContact">telephoneContact.</param>
        /// <param name="terms">terms.</param>
        /// <param name="termsTaken">termsTaken.</param>
        /// <param name="tradeReferenceNumber">tradeReferenceNumber.</param>
        public XdsCommercialTradeReferencesInformation(string ageOfAccount = default(string), string averagePurchases = default(string), string comment = default(string), string comment1 = default(string), string createdondate = default(string), string creditLimit = default(string), string currencyType = default(string), string displayText = default(string), string maxLimit = default(string), string nortarial = default(string), string otherCurrencyType = default(string), string reportTradeRefID = default(string), string supplier = default(string), string suretyValue = default(string), string telephoneContact = default(string), string terms = default(string), string termsTaken = default(string), string tradeReferenceNumber = default(string))
        {
            this.AgeOfAccount = ageOfAccount;
            this.AveragePurchases = averagePurchases;
            this.Comment = comment;
            this.Comment1 = comment1;
            this.Createdondate = createdondate;
            this.CreditLimit = creditLimit;
            this.CurrencyType = currencyType;
            this.DisplayText = displayText;
            this.MaxLimit = maxLimit;
            this.Nortarial = nortarial;
            this.OtherCurrencyType = otherCurrencyType;
            this.ReportTradeRefID = reportTradeRefID;
            this.Supplier = supplier;
            this.SuretyValue = suretyValue;
            this.TelephoneContact = telephoneContact;
            this.Terms = terms;
            this.TermsTaken = termsTaken;
            this.TradeReferenceNumber = tradeReferenceNumber;
            this.AgeOfAccount = ageOfAccount;
            this.AveragePurchases = averagePurchases;
            this.Comment = comment;
            this.Comment1 = comment1;
            this.Createdondate = createdondate;
            this.CreditLimit = creditLimit;
            this.CurrencyType = currencyType;
            this.DisplayText = displayText;
            this.MaxLimit = maxLimit;
            this.Nortarial = nortarial;
            this.OtherCurrencyType = otherCurrencyType;
            this.ReportTradeRefID = reportTradeRefID;
            this.Supplier = supplier;
            this.SuretyValue = suretyValue;
            this.TelephoneContact = telephoneContact;
            this.Terms = terms;
            this.TermsTaken = termsTaken;
            this.TradeReferenceNumber = tradeReferenceNumber;
        }

        /// <summary>
        /// Gets or Sets AgeOfAccount
        /// </summary>
        [DataMember(Name="ageOfAccount", EmitDefaultValue=true)]
        public string AgeOfAccount { get; set; }

        /// <summary>
        /// Gets or Sets AveragePurchases
        /// </summary>
        [DataMember(Name="averagePurchases", EmitDefaultValue=true)]
        public string AveragePurchases { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Comment1
        /// </summary>
        [DataMember(Name="comment1", EmitDefaultValue=true)]
        public string Comment1 { get; set; }

        /// <summary>
        /// Gets or Sets Createdondate
        /// </summary>
        [DataMember(Name="createdondate", EmitDefaultValue=true)]
        public string Createdondate { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name="creditLimit", EmitDefaultValue=true)]
        public string CreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=true)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets MaxLimit
        /// </summary>
        [DataMember(Name="maxLimit", EmitDefaultValue=true)]
        public string MaxLimit { get; set; }

        /// <summary>
        /// Gets or Sets Nortarial
        /// </summary>
        [DataMember(Name="nortarial", EmitDefaultValue=true)]
        public string Nortarial { get; set; }

        /// <summary>
        /// Gets or Sets OtherCurrencyType
        /// </summary>
        [DataMember(Name="otherCurrencyType", EmitDefaultValue=true)]
        public string OtherCurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets ReportTradeRefID
        /// </summary>
        [DataMember(Name="reportTradeRefID", EmitDefaultValue=true)]
        public string ReportTradeRefID { get; set; }

        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [DataMember(Name="supplier", EmitDefaultValue=true)]
        public string Supplier { get; set; }

        /// <summary>
        /// Gets or Sets SuretyValue
        /// </summary>
        [DataMember(Name="suretyValue", EmitDefaultValue=true)]
        public string SuretyValue { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneContact
        /// </summary>
        [DataMember(Name="telephoneContact", EmitDefaultValue=true)]
        public string TelephoneContact { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=true)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets TermsTaken
        /// </summary>
        [DataMember(Name="termsTaken", EmitDefaultValue=true)]
        public string TermsTaken { get; set; }

        /// <summary>
        /// Gets or Sets TradeReferenceNumber
        /// </summary>
        [DataMember(Name="tradeReferenceNumber", EmitDefaultValue=true)]
        public string TradeReferenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCommercialTradeReferencesInformation {\n");
            sb.Append("  AgeOfAccount: ").Append(AgeOfAccount).Append("\n");
            sb.Append("  AveragePurchases: ").Append(AveragePurchases).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Comment1: ").Append(Comment1).Append("\n");
            sb.Append("  Createdondate: ").Append(Createdondate).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  MaxLimit: ").Append(MaxLimit).Append("\n");
            sb.Append("  Nortarial: ").Append(Nortarial).Append("\n");
            sb.Append("  OtherCurrencyType: ").Append(OtherCurrencyType).Append("\n");
            sb.Append("  ReportTradeRefID: ").Append(ReportTradeRefID).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  SuretyValue: ").Append(SuretyValue).Append("\n");
            sb.Append("  TelephoneContact: ").Append(TelephoneContact).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  TermsTaken: ").Append(TermsTaken).Append("\n");
            sb.Append("  TradeReferenceNumber: ").Append(TradeReferenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCommercialTradeReferencesInformation);
        }

        /// <summary>
        /// Returns true if XdsCommercialTradeReferencesInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCommercialTradeReferencesInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCommercialTradeReferencesInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgeOfAccount == input.AgeOfAccount ||
                    (this.AgeOfAccount != null &&
                    this.AgeOfAccount.Equals(input.AgeOfAccount))
                ) && 
                (
                    this.AveragePurchases == input.AveragePurchases ||
                    (this.AveragePurchases != null &&
                    this.AveragePurchases.Equals(input.AveragePurchases))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Comment1 == input.Comment1 ||
                    (this.Comment1 != null &&
                    this.Comment1.Equals(input.Comment1))
                ) && 
                (
                    this.Createdondate == input.Createdondate ||
                    (this.Createdondate != null &&
                    this.Createdondate.Equals(input.Createdondate))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    (this.CurrencyType != null &&
                    this.CurrencyType.Equals(input.CurrencyType))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.MaxLimit == input.MaxLimit ||
                    (this.MaxLimit != null &&
                    this.MaxLimit.Equals(input.MaxLimit))
                ) && 
                (
                    this.Nortarial == input.Nortarial ||
                    (this.Nortarial != null &&
                    this.Nortarial.Equals(input.Nortarial))
                ) && 
                (
                    this.OtherCurrencyType == input.OtherCurrencyType ||
                    (this.OtherCurrencyType != null &&
                    this.OtherCurrencyType.Equals(input.OtherCurrencyType))
                ) && 
                (
                    this.ReportTradeRefID == input.ReportTradeRefID ||
                    (this.ReportTradeRefID != null &&
                    this.ReportTradeRefID.Equals(input.ReportTradeRefID))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.SuretyValue == input.SuretyValue ||
                    (this.SuretyValue != null &&
                    this.SuretyValue.Equals(input.SuretyValue))
                ) && 
                (
                    this.TelephoneContact == input.TelephoneContact ||
                    (this.TelephoneContact != null &&
                    this.TelephoneContact.Equals(input.TelephoneContact))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.TermsTaken == input.TermsTaken ||
                    (this.TermsTaken != null &&
                    this.TermsTaken.Equals(input.TermsTaken))
                ) && 
                (
                    this.TradeReferenceNumber == input.TradeReferenceNumber ||
                    (this.TradeReferenceNumber != null &&
                    this.TradeReferenceNumber.Equals(input.TradeReferenceNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgeOfAccount != null)
                    hashCode = hashCode * 59 + this.AgeOfAccount.GetHashCode();
                if (this.AveragePurchases != null)
                    hashCode = hashCode * 59 + this.AveragePurchases.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Comment1 != null)
                    hashCode = hashCode * 59 + this.Comment1.GetHashCode();
                if (this.Createdondate != null)
                    hashCode = hashCode * 59 + this.Createdondate.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.CurrencyType != null)
                    hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.MaxLimit != null)
                    hashCode = hashCode * 59 + this.MaxLimit.GetHashCode();
                if (this.Nortarial != null)
                    hashCode = hashCode * 59 + this.Nortarial.GetHashCode();
                if (this.OtherCurrencyType != null)
                    hashCode = hashCode * 59 + this.OtherCurrencyType.GetHashCode();
                if (this.ReportTradeRefID != null)
                    hashCode = hashCode * 59 + this.ReportTradeRefID.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.SuretyValue != null)
                    hashCode = hashCode * 59 + this.SuretyValue.GetHashCode();
                if (this.TelephoneContact != null)
                    hashCode = hashCode * 59 + this.TelephoneContact.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.TermsTaken != null)
                    hashCode = hashCode * 59 + this.TermsTaken.GetHashCode();
                if (this.TradeReferenceNumber != null)
                    hashCode = hashCode * 59 + this.TradeReferenceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
