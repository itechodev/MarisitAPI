/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118TerminationDTO
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118TerminationDTO :  IEquatable<TransunionConsumer118TerminationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118TerminationDTO" /> class.
        /// </summary>
        /// <param name="terminationDate">terminationDate.</param>
        /// <param name="lastPaidBasicSalary">lastPaidBasicSalary.</param>
        /// <param name="terminationReason">terminationReason.</param>
        /// <param name="transactionItemId">transactionItemId.</param>
        /// <param name="isliteVersion">isliteVersion.</param>
        public TransunionConsumer118TerminationDTO(DateTime terminationDate = default(DateTime), double lastPaidBasicSalary = default(double), string terminationReason = default(string), string transactionItemId = default(string), bool isliteVersion = default(bool))
        {
            this.TerminationReason = terminationReason;
            this.TransactionItemId = transactionItemId;
            this.TerminationDate = terminationDate;
            this.LastPaidBasicSalary = lastPaidBasicSalary;
            this.TerminationReason = terminationReason;
            this.TransactionItemId = transactionItemId;
            this.IsliteVersion = isliteVersion;
        }

        /// <summary>
        /// Gets or Sets TerminationDate
        /// </summary>
        [DataMember(Name="terminationDate", EmitDefaultValue=false)]
        public DateTime TerminationDate { get; set; }

        /// <summary>
        /// Gets or Sets LastPaidBasicSalary
        /// </summary>
        [DataMember(Name="lastPaidBasicSalary", EmitDefaultValue=false)]
        public double LastPaidBasicSalary { get; set; }

        /// <summary>
        /// Gets or Sets TerminationReason
        /// </summary>
        [DataMember(Name="terminationReason", EmitDefaultValue=true)]
        public string TerminationReason { get; set; }

        /// <summary>
        /// Gets or Sets TransactionItemId
        /// </summary>
        [DataMember(Name="transactionItemId", EmitDefaultValue=true)]
        public string TransactionItemId { get; set; }

        /// <summary>
        /// Gets or Sets IsliteVersion
        /// </summary>
        [DataMember(Name="isliteVersion", EmitDefaultValue=false)]
        public bool IsliteVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118TerminationDTO {\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  LastPaidBasicSalary: ").Append(LastPaidBasicSalary).Append("\n");
            sb.Append("  TerminationReason: ").Append(TerminationReason).Append("\n");
            sb.Append("  TransactionItemId: ").Append(TransactionItemId).Append("\n");
            sb.Append("  IsliteVersion: ").Append(IsliteVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118TerminationDTO);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118TerminationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118TerminationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118TerminationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TerminationDate == input.TerminationDate ||
                    (this.TerminationDate != null &&
                    this.TerminationDate.Equals(input.TerminationDate))
                ) && 
                (
                    this.LastPaidBasicSalary == input.LastPaidBasicSalary ||
                    (this.LastPaidBasicSalary != null &&
                    this.LastPaidBasicSalary.Equals(input.LastPaidBasicSalary))
                ) && 
                (
                    this.TerminationReason == input.TerminationReason ||
                    (this.TerminationReason != null &&
                    this.TerminationReason.Equals(input.TerminationReason))
                ) && 
                (
                    this.TransactionItemId == input.TransactionItemId ||
                    (this.TransactionItemId != null &&
                    this.TransactionItemId.Equals(input.TransactionItemId))
                ) && 
                (
                    this.IsliteVersion == input.IsliteVersion ||
                    (this.IsliteVersion != null &&
                    this.IsliteVersion.Equals(input.IsliteVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TerminationDate != null)
                    hashCode = hashCode * 59 + this.TerminationDate.GetHashCode();
                if (this.LastPaidBasicSalary != null)
                    hashCode = hashCode * 59 + this.LastPaidBasicSalary.GetHashCode();
                if (this.TerminationReason != null)
                    hashCode = hashCode * 59 + this.TerminationReason.GetHashCode();
                if (this.TransactionItemId != null)
                    hashCode = hashCode * 59 + this.TransactionItemId.GetHashCode();
                if (this.IsliteVersion != null)
                    hashCode = hashCode * 59 + this.IsliteVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
