/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118VehicleDataUZ01
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118VehicleDataUZ01 :  IEquatable<TransunionConsumer118VehicleDataUZ01>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118VehicleDataUZ01" /> class.
        /// </summary>
        /// <param name="vinNumber">vinNumber.</param>
        /// <param name="engineNumber">engineNumber.</param>
        /// <param name="licenseNumber">licenseNumber.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="yearOfFinance">yearOfFinance.</param>
        /// <param name="yearOfManufacture">yearOfManufacture.</param>
        /// <param name="mmData">mmData.</param>
        /// <param name="color">color.</param>
        /// <param name="agreements">agreements.</param>
        /// <param name="message">message.</param>
        public TransunionConsumer118VehicleDataUZ01(string vinNumber = default(string), string engineNumber = default(string), string licenseNumber = default(string), string make = default(string), string model = default(string), string yearOfFinance = default(string), string yearOfManufacture = default(string), List<TransunionConsumer118MMData> mmData = default(List<TransunionConsumer118MMData>), string color = default(string), List<TransunionConsumer118Agreement> agreements = default(List<TransunionConsumer118Agreement>), string message = default(string))
        {
            this.VinNumber = vinNumber;
            this.EngineNumber = engineNumber;
            this.LicenseNumber = licenseNumber;
            this.Make = make;
            this.Model = model;
            this.YearOfFinance = yearOfFinance;
            this.YearOfManufacture = yearOfManufacture;
            this.MmData = mmData;
            this.Color = color;
            this.Agreements = agreements;
            this.Message = message;
            this.VinNumber = vinNumber;
            this.EngineNumber = engineNumber;
            this.LicenseNumber = licenseNumber;
            this.Make = make;
            this.Model = model;
            this.YearOfFinance = yearOfFinance;
            this.YearOfManufacture = yearOfManufacture;
            this.MmData = mmData;
            this.Color = color;
            this.Agreements = agreements;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets VinNumber
        /// </summary>
        [DataMember(Name="vinNumber", EmitDefaultValue=true)]
        public string VinNumber { get; set; }

        /// <summary>
        /// Gets or Sets EngineNumber
        /// </summary>
        [DataMember(Name="engineNumber", EmitDefaultValue=true)]
        public string EngineNumber { get; set; }

        /// <summary>
        /// Gets or Sets LicenseNumber
        /// </summary>
        [DataMember(Name="licenseNumber", EmitDefaultValue=true)]
        public string LicenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=true)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets YearOfFinance
        /// </summary>
        [DataMember(Name="yearOfFinance", EmitDefaultValue=true)]
        public string YearOfFinance { get; set; }

        /// <summary>
        /// Gets or Sets YearOfManufacture
        /// </summary>
        [DataMember(Name="yearOfManufacture", EmitDefaultValue=true)]
        public string YearOfManufacture { get; set; }

        /// <summary>
        /// Gets or Sets MmData
        /// </summary>
        [DataMember(Name="mmData", EmitDefaultValue=true)]
        public List<TransunionConsumer118MMData> MmData { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Agreements
        /// </summary>
        [DataMember(Name="agreements", EmitDefaultValue=true)]
        public List<TransunionConsumer118Agreement> Agreements { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118VehicleDataUZ01 {\n");
            sb.Append("  VinNumber: ").Append(VinNumber).Append("\n");
            sb.Append("  EngineNumber: ").Append(EngineNumber).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  YearOfFinance: ").Append(YearOfFinance).Append("\n");
            sb.Append("  YearOfManufacture: ").Append(YearOfManufacture).Append("\n");
            sb.Append("  MmData: ").Append(MmData).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Agreements: ").Append(Agreements).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118VehicleDataUZ01);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118VehicleDataUZ01 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118VehicleDataUZ01 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118VehicleDataUZ01 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VinNumber == input.VinNumber ||
                    (this.VinNumber != null &&
                    this.VinNumber.Equals(input.VinNumber))
                ) && 
                (
                    this.EngineNumber == input.EngineNumber ||
                    (this.EngineNumber != null &&
                    this.EngineNumber.Equals(input.EngineNumber))
                ) && 
                (
                    this.LicenseNumber == input.LicenseNumber ||
                    (this.LicenseNumber != null &&
                    this.LicenseNumber.Equals(input.LicenseNumber))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.YearOfFinance == input.YearOfFinance ||
                    (this.YearOfFinance != null &&
                    this.YearOfFinance.Equals(input.YearOfFinance))
                ) && 
                (
                    this.YearOfManufacture == input.YearOfManufacture ||
                    (this.YearOfManufacture != null &&
                    this.YearOfManufacture.Equals(input.YearOfManufacture))
                ) && 
                (
                    this.MmData == input.MmData ||
                    this.MmData != null &&
                    input.MmData != null &&
                    this.MmData.SequenceEqual(input.MmData)
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Agreements == input.Agreements ||
                    this.Agreements != null &&
                    input.Agreements != null &&
                    this.Agreements.SequenceEqual(input.Agreements)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VinNumber != null)
                    hashCode = hashCode * 59 + this.VinNumber.GetHashCode();
                if (this.EngineNumber != null)
                    hashCode = hashCode * 59 + this.EngineNumber.GetHashCode();
                if (this.LicenseNumber != null)
                    hashCode = hashCode * 59 + this.LicenseNumber.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.YearOfFinance != null)
                    hashCode = hashCode * 59 + this.YearOfFinance.GetHashCode();
                if (this.YearOfManufacture != null)
                    hashCode = hashCode * 59 + this.YearOfManufacture.GetHashCode();
                if (this.MmData != null)
                    hashCode = hashCode * 59 + this.MmData.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Agreements != null)
                    hashCode = hashCode * 59 + this.Agreements.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
