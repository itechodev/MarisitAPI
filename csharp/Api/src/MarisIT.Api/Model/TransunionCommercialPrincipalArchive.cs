/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialPrincipalArchive
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialPrincipalArchive :  IEquatable<TransunionCommercialPrincipalArchive>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialPrincipalArchive" /> class.
        /// </summary>
        /// <param name="registrationNumber">registrationNumber.</param>
        /// <param name="surname">surname.</param>
        /// <param name="initials">initials.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="position">position.</param>
        /// <param name="dateStarted">dateStarted.</param>
        /// <param name="dateResigned">dateResigned.</param>
        /// <param name="businessName">businessName.</param>
        public TransunionCommercialPrincipalArchive(string registrationNumber = default(string), string surname = default(string), string initials = default(string), string idNumber = default(string), string dateOfBirth = default(string), string position = default(string), string dateStarted = default(string), string dateResigned = default(string), string businessName = default(string))
        {
            this.RegistrationNumber = registrationNumber;
            this.Surname = surname;
            this.Initials = initials;
            this.IdNumber = idNumber;
            this.DateOfBirth = dateOfBirth;
            this.Position = position;
            this.DateStarted = dateStarted;
            this.DateResigned = dateResigned;
            this.BusinessName = businessName;
            this.RegistrationNumber = registrationNumber;
            this.Surname = surname;
            this.Initials = initials;
            this.IdNumber = idNumber;
            this.DateOfBirth = dateOfBirth;
            this.Position = position;
            this.DateStarted = dateStarted;
            this.DateResigned = dateResigned;
            this.BusinessName = businessName;
        }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=true)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials", EmitDefaultValue=true)]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets DateStarted
        /// </summary>
        [DataMember(Name="dateStarted", EmitDefaultValue=true)]
        public string DateStarted { get; set; }

        /// <summary>
        /// Gets or Sets DateResigned
        /// </summary>
        [DataMember(Name="dateResigned", EmitDefaultValue=true)]
        public string DateResigned { get; set; }

        /// <summary>
        /// Gets or Sets BusinessName
        /// </summary>
        [DataMember(Name="businessName", EmitDefaultValue=true)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialPrincipalArchive {\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  DateStarted: ").Append(DateStarted).Append("\n");
            sb.Append("  DateResigned: ").Append(DateResigned).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialPrincipalArchive);
        }

        /// <summary>
        /// Returns true if TransunionCommercialPrincipalArchive instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialPrincipalArchive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialPrincipalArchive input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.DateStarted == input.DateStarted ||
                    (this.DateStarted != null &&
                    this.DateStarted.Equals(input.DateStarted))
                ) && 
                (
                    this.DateResigned == input.DateResigned ||
                    (this.DateResigned != null &&
                    this.DateResigned.Equals(input.DateResigned))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.DateStarted != null)
                    hashCode = hashCode * 59 + this.DateStarted.GetHashCode();
                if (this.DateResigned != null)
                    hashCode = hashCode * 59 + this.DateResigned.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
