/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialFinancialStabilityIndicatorFS
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialFinancialStabilityIndicatorFS :  IEquatable<TransunionCommercialFinancialStabilityIndicatorFS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialFinancialStabilityIndicatorFS" /> class.
        /// </summary>
        /// <param name="majorProductCode">majorProductCode.</param>
        /// <param name="infoDate">infoDate.</param>
        /// <param name="financialYear">financialYear.</param>
        /// <param name="rating">rating.</param>
        /// <param name="condition">condition.</param>
        /// <param name="trend">trend.</param>
        /// <param name="comment">comment.</param>
        public TransunionCommercialFinancialStabilityIndicatorFS(string majorProductCode = default(string), string infoDate = default(string), string financialYear = default(string), string rating = default(string), string condition = default(string), string trend = default(string), string comment = default(string))
        {
            this.MajorProductCode = majorProductCode;
            this.InfoDate = infoDate;
            this.FinancialYear = financialYear;
            this.Rating = rating;
            this.Condition = condition;
            this.Trend = trend;
            this.Comment = comment;
            this.MajorProductCode = majorProductCode;
            this.InfoDate = infoDate;
            this.FinancialYear = financialYear;
            this.Rating = rating;
            this.Condition = condition;
            this.Trend = trend;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets MajorProductCode
        /// </summary>
        [DataMember(Name="majorProductCode", EmitDefaultValue=true)]
        public string MajorProductCode { get; set; }

        /// <summary>
        /// Gets or Sets InfoDate
        /// </summary>
        [DataMember(Name="infoDate", EmitDefaultValue=true)]
        public string InfoDate { get; set; }

        /// <summary>
        /// Gets or Sets FinancialYear
        /// </summary>
        [DataMember(Name="financialYear", EmitDefaultValue=true)]
        public string FinancialYear { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public string Rating { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=true)]
        public string Condition { get; set; }

        /// <summary>
        /// Gets or Sets Trend
        /// </summary>
        [DataMember(Name="trend", EmitDefaultValue=true)]
        public string Trend { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialFinancialStabilityIndicatorFS {\n");
            sb.Append("  MajorProductCode: ").Append(MajorProductCode).Append("\n");
            sb.Append("  InfoDate: ").Append(InfoDate).Append("\n");
            sb.Append("  FinancialYear: ").Append(FinancialYear).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Trend: ").Append(Trend).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialFinancialStabilityIndicatorFS);
        }

        /// <summary>
        /// Returns true if TransunionCommercialFinancialStabilityIndicatorFS instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialFinancialStabilityIndicatorFS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialFinancialStabilityIndicatorFS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProductCode == input.MajorProductCode ||
                    (this.MajorProductCode != null &&
                    this.MajorProductCode.Equals(input.MajorProductCode))
                ) && 
                (
                    this.InfoDate == input.InfoDate ||
                    (this.InfoDate != null &&
                    this.InfoDate.Equals(input.InfoDate))
                ) && 
                (
                    this.FinancialYear == input.FinancialYear ||
                    (this.FinancialYear != null &&
                    this.FinancialYear.Equals(input.FinancialYear))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Trend == input.Trend ||
                    (this.Trend != null &&
                    this.Trend.Equals(input.Trend))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProductCode != null)
                    hashCode = hashCode * 59 + this.MajorProductCode.GetHashCode();
                if (this.InfoDate != null)
                    hashCode = hashCode * 59 + this.InfoDate.GetHashCode();
                if (this.FinancialYear != null)
                    hashCode = hashCode * 59 + this.FinancialYear.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Trend != null)
                    hashCode = hashCode * 59 + this.Trend.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
