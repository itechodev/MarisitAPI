/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCommercialDefaultAlert
    /// </summary>
    [DataContract]
    public partial class XdsCommercialDefaultAlert :  IEquatable<XdsCommercialDefaultAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialDefaultAlert" /> class.
        /// </summary>
        /// <param name="company">company.</param>
        /// <param name="accountNo">accountNo.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="amount">amount.</param>
        /// <param name="statuscode">statuscode.</param>
        /// <param name="dateLoaded">dateLoaded.</param>
        /// <param name="commercialName">commercialName.</param>
        /// <param name="comments">comments.</param>
        public XdsCommercialDefaultAlert(string company = default(string), string accountNo = default(string), string accountType = default(string), string amount = default(string), string statuscode = default(string), string dateLoaded = default(string), string commercialName = default(string), string comments = default(string))
        {
            this.Company = company;
            this.AccountNo = accountNo;
            this.AccountType = accountType;
            this.Amount = amount;
            this.Statuscode = statuscode;
            this.DateLoaded = dateLoaded;
            this.CommercialName = commercialName;
            this.Comments = comments;
            this.Company = company;
            this.AccountNo = accountNo;
            this.AccountType = accountType;
            this.Amount = amount;
            this.Statuscode = statuscode;
            this.DateLoaded = dateLoaded;
            this.CommercialName = commercialName;
            this.Comments = comments;
        }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=true)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="accountNo", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Statuscode
        /// </summary>
        [DataMember(Name="statuscode", EmitDefaultValue=true)]
        public string Statuscode { get; set; }

        /// <summary>
        /// Gets or Sets DateLoaded
        /// </summary>
        [DataMember(Name="dateLoaded", EmitDefaultValue=true)]
        public string DateLoaded { get; set; }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="commercialName", EmitDefaultValue=true)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCommercialDefaultAlert {\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Statuscode: ").Append(Statuscode).Append("\n");
            sb.Append("  DateLoaded: ").Append(DateLoaded).Append("\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCommercialDefaultAlert);
        }

        /// <summary>
        /// Returns true if XdsCommercialDefaultAlert instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCommercialDefaultAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCommercialDefaultAlert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Statuscode == input.Statuscode ||
                    (this.Statuscode != null &&
                    this.Statuscode.Equals(input.Statuscode))
                ) && 
                (
                    this.DateLoaded == input.DateLoaded ||
                    (this.DateLoaded != null &&
                    this.DateLoaded.Equals(input.DateLoaded))
                ) && 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Statuscode != null)
                    hashCode = hashCode * 59 + this.Statuscode.GetHashCode();
                if (this.DateLoaded != null)
                    hashCode = hashCode * 59 + this.DateLoaded.GetHashCode();
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
