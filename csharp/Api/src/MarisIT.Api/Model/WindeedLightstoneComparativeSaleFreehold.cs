/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedLightstoneComparativeSaleFreehold
    /// </summary>
    [DataContract]
    public partial class WindeedLightstoneComparativeSaleFreehold :  IEquatable<WindeedLightstoneComparativeSaleFreehold>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedLightstoneRegistrar? DeedsOffice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedLightstoneComparativeSaleFreehold" /> class.
        /// </summary>
        /// <param name="dbKey">dbKey.</param>
        /// <param name="distance">distance.</param>
        /// <param name="lastSaleDate">lastSaleDate.</param>
        /// <param name="lastSaleAmount">lastSaleAmount.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="lpiCode">lpiCode.</param>
        /// <param name="registrationDate">registrationDate.</param>
        /// <param name="mapKey">mapKey.</param>
        /// <param name="extent">extent.</param>
        /// <param name="portionNumber">portionNumber.</param>
        /// <param name="randPerSqm">randPerSqm.</param>
        /// <param name="township">township.</param>
        /// <param name="erfNumber">erfNumber.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="address">address.</param>
        public WindeedLightstoneComparativeSaleFreehold(Guid? dbKey = default(Guid?), double? distance = default(double?), DateTime? lastSaleDate = default(DateTime?), double? lastSaleAmount = default(double?), WindeedLightstoneRegistrar? deedsOffice = default(WindeedLightstoneRegistrar?), double? latitude = default(double?), double? longitude = default(double?), string lpiCode = default(string), DateTime? registrationDate = default(DateTime?), int? mapKey = default(int?), int? extent = default(int?), int? portionNumber = default(int?), double? randPerSqm = default(double?), string township = default(string), int? erfNumber = default(int?), string suburb = default(string), string address = default(string))
        {
            this.DbKey = dbKey;
            this.Distance = distance;
            this.LastSaleDate = lastSaleDate;
            this.LastSaleAmount = lastSaleAmount;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.LpiCode = lpiCode;
            this.RegistrationDate = registrationDate;
            this.MapKey = mapKey;
            this.Extent = extent;
            this.PortionNumber = portionNumber;
            this.RandPerSqm = randPerSqm;
            this.Township = township;
            this.ErfNumber = erfNumber;
            this.Suburb = suburb;
            this.Address = address;
            this.DbKey = dbKey;
            this.Distance = distance;
            this.LastSaleDate = lastSaleDate;
            this.LastSaleAmount = lastSaleAmount;
            this.DeedsOffice = deedsOffice;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.LpiCode = lpiCode;
            this.RegistrationDate = registrationDate;
            this.MapKey = mapKey;
            this.Extent = extent;
            this.PortionNumber = portionNumber;
            this.RandPerSqm = randPerSqm;
            this.Township = township;
            this.ErfNumber = erfNumber;
            this.Suburb = suburb;
            this.Address = address;
        }

        /// <summary>
        /// Gets or Sets DbKey
        /// </summary>
        [DataMember(Name="dbKey", EmitDefaultValue=true)]
        public Guid? DbKey { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=true)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets LastSaleDate
        /// </summary>
        [DataMember(Name="lastSaleDate", EmitDefaultValue=true)]
        public DateTime? LastSaleDate { get; set; }

        /// <summary>
        /// Gets or Sets LastSaleAmount
        /// </summary>
        [DataMember(Name="lastSaleAmount", EmitDefaultValue=true)]
        public double? LastSaleAmount { get; set; }


        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets LpiCode
        /// </summary>
        [DataMember(Name="lpiCode", EmitDefaultValue=true)]
        public string LpiCode { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name="registrationDate", EmitDefaultValue=true)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets MapKey
        /// </summary>
        [DataMember(Name="mapKey", EmitDefaultValue=true)]
        public int? MapKey { get; set; }

        /// <summary>
        /// Gets or Sets Extent
        /// </summary>
        [DataMember(Name="extent", EmitDefaultValue=true)]
        public int? Extent { get; set; }

        /// <summary>
        /// Gets or Sets PortionNumber
        /// </summary>
        [DataMember(Name="portionNumber", EmitDefaultValue=true)]
        public int? PortionNumber { get; set; }

        /// <summary>
        /// Gets or Sets RandPerSqm
        /// </summary>
        [DataMember(Name="randPerSqm", EmitDefaultValue=true)]
        public double? RandPerSqm { get; set; }

        /// <summary>
        /// Gets or Sets Township
        /// </summary>
        [DataMember(Name="township", EmitDefaultValue=true)]
        public string Township { get; set; }

        /// <summary>
        /// Gets or Sets ErfNumber
        /// </summary>
        [DataMember(Name="erfNumber", EmitDefaultValue=true)]
        public int? ErfNumber { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedLightstoneComparativeSaleFreehold {\n");
            sb.Append("  DbKey: ").Append(DbKey).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  LastSaleDate: ").Append(LastSaleDate).Append("\n");
            sb.Append("  LastSaleAmount: ").Append(LastSaleAmount).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  LpiCode: ").Append(LpiCode).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  MapKey: ").Append(MapKey).Append("\n");
            sb.Append("  Extent: ").Append(Extent).Append("\n");
            sb.Append("  PortionNumber: ").Append(PortionNumber).Append("\n");
            sb.Append("  RandPerSqm: ").Append(RandPerSqm).Append("\n");
            sb.Append("  Township: ").Append(Township).Append("\n");
            sb.Append("  ErfNumber: ").Append(ErfNumber).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedLightstoneComparativeSaleFreehold);
        }

        /// <summary>
        /// Returns true if WindeedLightstoneComparativeSaleFreehold instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedLightstoneComparativeSaleFreehold to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedLightstoneComparativeSaleFreehold input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DbKey == input.DbKey ||
                    (this.DbKey != null &&
                    this.DbKey.Equals(input.DbKey))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.LastSaleDate == input.LastSaleDate ||
                    (this.LastSaleDate != null &&
                    this.LastSaleDate.Equals(input.LastSaleDate))
                ) && 
                (
                    this.LastSaleAmount == input.LastSaleAmount ||
                    (this.LastSaleAmount != null &&
                    this.LastSaleAmount.Equals(input.LastSaleAmount))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.LpiCode == input.LpiCode ||
                    (this.LpiCode != null &&
                    this.LpiCode.Equals(input.LpiCode))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.MapKey == input.MapKey ||
                    (this.MapKey != null &&
                    this.MapKey.Equals(input.MapKey))
                ) && 
                (
                    this.Extent == input.Extent ||
                    (this.Extent != null &&
                    this.Extent.Equals(input.Extent))
                ) && 
                (
                    this.PortionNumber == input.PortionNumber ||
                    (this.PortionNumber != null &&
                    this.PortionNumber.Equals(input.PortionNumber))
                ) && 
                (
                    this.RandPerSqm == input.RandPerSqm ||
                    (this.RandPerSqm != null &&
                    this.RandPerSqm.Equals(input.RandPerSqm))
                ) && 
                (
                    this.Township == input.Township ||
                    (this.Township != null &&
                    this.Township.Equals(input.Township))
                ) && 
                (
                    this.ErfNumber == input.ErfNumber ||
                    (this.ErfNumber != null &&
                    this.ErfNumber.Equals(input.ErfNumber))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DbKey != null)
                    hashCode = hashCode * 59 + this.DbKey.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.LastSaleDate != null)
                    hashCode = hashCode * 59 + this.LastSaleDate.GetHashCode();
                if (this.LastSaleAmount != null)
                    hashCode = hashCode * 59 + this.LastSaleAmount.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.LpiCode != null)
                    hashCode = hashCode * 59 + this.LpiCode.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.MapKey != null)
                    hashCode = hashCode * 59 + this.MapKey.GetHashCode();
                if (this.Extent != null)
                    hashCode = hashCode * 59 + this.Extent.GetHashCode();
                if (this.PortionNumber != null)
                    hashCode = hashCode * 59 + this.PortionNumber.GetHashCode();
                if (this.RandPerSqm != null)
                    hashCode = hashCode * 59 + this.RandPerSqm.GetHashCode();
                if (this.Township != null)
                    hashCode = hashCode * 59 + this.Township.GetHashCode();
                if (this.ErfNumber != null)
                    hashCode = hashCode * 59 + this.ErfNumber.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
