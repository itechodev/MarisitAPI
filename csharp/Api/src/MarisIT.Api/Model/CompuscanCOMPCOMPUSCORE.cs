/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPCOMPUSCORE
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPCOMPUSCORE :  IEquatable<CompuscanCOMPCOMPUSCORE>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPCOMPUSCORE" /> class.
        /// </summary>
        /// <param name="ac">ac.</param>
        /// <param name="bcode">bcode.</param>
        /// <param name="colour">colour.</param>
        /// <param name="declineR1">declineR1.</param>
        /// <param name="declineR1DESC">declineR1DESC.</param>
        /// <param name="declineR2">declineR2.</param>
        /// <param name="declineR2DESC">declineR2DESC.</param>
        /// <param name="declineR3">declineR3.</param>
        /// <param name="declineR3DESC">declineR3DESC.</param>
        /// <param name="declineR4">declineR4.</param>
        /// <param name="declineR4DESC">declineR4DESC.</param>
        /// <param name="declineR5">declineR5.</param>
        /// <param name="declineR5DESC">declineR5DESC.</param>
        /// <param name="risktype">risktype.</param>
        /// <param name="score">score.</param>
        /// <param name="scoretype">scoretype.</param>
        /// <param name="thinfileindicator">thinfileindicator.</param>
        /// <param name="version">version.</param>
        public CompuscanCOMPCOMPUSCORE(string ac = default(string), string bcode = default(string), string colour = default(string), string declineR1 = default(string), string declineR1DESC = default(string), string declineR2 = default(string), string declineR2DESC = default(string), string declineR3 = default(string), string declineR3DESC = default(string), string declineR4 = default(string), string declineR4DESC = default(string), string declineR5 = default(string), string declineR5DESC = default(string), string risktype = default(string), string score = default(string), string scoretype = default(string), string thinfileindicator = default(string), string version = default(string))
        {
            this.Ac = ac;
            this.Bcode = bcode;
            this.Colour = colour;
            this.DeclineR1 = declineR1;
            this.DeclineR1DESC = declineR1DESC;
            this.DeclineR2 = declineR2;
            this.DeclineR2DESC = declineR2DESC;
            this.DeclineR3 = declineR3;
            this.DeclineR3DESC = declineR3DESC;
            this.DeclineR4 = declineR4;
            this.DeclineR4DESC = declineR4DESC;
            this.DeclineR5 = declineR5;
            this.DeclineR5DESC = declineR5DESC;
            this.Risktype = risktype;
            this.Score = score;
            this.Scoretype = scoretype;
            this.Thinfileindicator = thinfileindicator;
            this._Version = version;
            this.Ac = ac;
            this.Bcode = bcode;
            this.Colour = colour;
            this.DeclineR1 = declineR1;
            this.DeclineR1DESC = declineR1DESC;
            this.DeclineR2 = declineR2;
            this.DeclineR2DESC = declineR2DESC;
            this.DeclineR3 = declineR3;
            this.DeclineR3DESC = declineR3DESC;
            this.DeclineR4 = declineR4;
            this.DeclineR4DESC = declineR4DESC;
            this.DeclineR5 = declineR5;
            this.DeclineR5DESC = declineR5DESC;
            this.Risktype = risktype;
            this.Score = score;
            this.Scoretype = scoretype;
            this.Thinfileindicator = thinfileindicator;
            this._Version = version;
        }

        /// <summary>
        /// Gets or Sets Ac
        /// </summary>
        [DataMember(Name="ac", EmitDefaultValue=true)]
        public string Ac { get; set; }

        /// <summary>
        /// Gets or Sets Bcode
        /// </summary>
        [DataMember(Name="bcode", EmitDefaultValue=true)]
        public string Bcode { get; set; }

        /// <summary>
        /// Gets or Sets Colour
        /// </summary>
        [DataMember(Name="colour", EmitDefaultValue=true)]
        public string Colour { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR1
        /// </summary>
        [DataMember(Name="declineR1", EmitDefaultValue=true)]
        public string DeclineR1 { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR1DESC
        /// </summary>
        [DataMember(Name="declineR1DESC", EmitDefaultValue=true)]
        public string DeclineR1DESC { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR2
        /// </summary>
        [DataMember(Name="declineR2", EmitDefaultValue=true)]
        public string DeclineR2 { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR2DESC
        /// </summary>
        [DataMember(Name="declineR2DESC", EmitDefaultValue=true)]
        public string DeclineR2DESC { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR3
        /// </summary>
        [DataMember(Name="declineR3", EmitDefaultValue=true)]
        public string DeclineR3 { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR3DESC
        /// </summary>
        [DataMember(Name="declineR3DESC", EmitDefaultValue=true)]
        public string DeclineR3DESC { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR4
        /// </summary>
        [DataMember(Name="declineR4", EmitDefaultValue=true)]
        public string DeclineR4 { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR4DESC
        /// </summary>
        [DataMember(Name="declineR4DESC", EmitDefaultValue=true)]
        public string DeclineR4DESC { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR5
        /// </summary>
        [DataMember(Name="declineR5", EmitDefaultValue=true)]
        public string DeclineR5 { get; set; }

        /// <summary>
        /// Gets or Sets DeclineR5DESC
        /// </summary>
        [DataMember(Name="declineR5DESC", EmitDefaultValue=true)]
        public string DeclineR5DESC { get; set; }

        /// <summary>
        /// Gets or Sets Risktype
        /// </summary>
        [DataMember(Name="risktype", EmitDefaultValue=true)]
        public string Risktype { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=true)]
        public string Score { get; set; }

        /// <summary>
        /// Gets or Sets Scoretype
        /// </summary>
        [DataMember(Name="scoretype", EmitDefaultValue=true)]
        public string Scoretype { get; set; }

        /// <summary>
        /// Gets or Sets Thinfileindicator
        /// </summary>
        [DataMember(Name="thinfileindicator", EmitDefaultValue=true)]
        public string Thinfileindicator { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPCOMPUSCORE {\n");
            sb.Append("  Ac: ").Append(Ac).Append("\n");
            sb.Append("  Bcode: ").Append(Bcode).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("  DeclineR1: ").Append(DeclineR1).Append("\n");
            sb.Append("  DeclineR1DESC: ").Append(DeclineR1DESC).Append("\n");
            sb.Append("  DeclineR2: ").Append(DeclineR2).Append("\n");
            sb.Append("  DeclineR2DESC: ").Append(DeclineR2DESC).Append("\n");
            sb.Append("  DeclineR3: ").Append(DeclineR3).Append("\n");
            sb.Append("  DeclineR3DESC: ").Append(DeclineR3DESC).Append("\n");
            sb.Append("  DeclineR4: ").Append(DeclineR4).Append("\n");
            sb.Append("  DeclineR4DESC: ").Append(DeclineR4DESC).Append("\n");
            sb.Append("  DeclineR5: ").Append(DeclineR5).Append("\n");
            sb.Append("  DeclineR5DESC: ").Append(DeclineR5DESC).Append("\n");
            sb.Append("  Risktype: ").Append(Risktype).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Scoretype: ").Append(Scoretype).Append("\n");
            sb.Append("  Thinfileindicator: ").Append(Thinfileindicator).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPCOMPUSCORE);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPCOMPUSCORE instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPCOMPUSCORE to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPCOMPUSCORE input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ac == input.Ac ||
                    (this.Ac != null &&
                    this.Ac.Equals(input.Ac))
                ) && 
                (
                    this.Bcode == input.Bcode ||
                    (this.Bcode != null &&
                    this.Bcode.Equals(input.Bcode))
                ) && 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                ) && 
                (
                    this.DeclineR1 == input.DeclineR1 ||
                    (this.DeclineR1 != null &&
                    this.DeclineR1.Equals(input.DeclineR1))
                ) && 
                (
                    this.DeclineR1DESC == input.DeclineR1DESC ||
                    (this.DeclineR1DESC != null &&
                    this.DeclineR1DESC.Equals(input.DeclineR1DESC))
                ) && 
                (
                    this.DeclineR2 == input.DeclineR2 ||
                    (this.DeclineR2 != null &&
                    this.DeclineR2.Equals(input.DeclineR2))
                ) && 
                (
                    this.DeclineR2DESC == input.DeclineR2DESC ||
                    (this.DeclineR2DESC != null &&
                    this.DeclineR2DESC.Equals(input.DeclineR2DESC))
                ) && 
                (
                    this.DeclineR3 == input.DeclineR3 ||
                    (this.DeclineR3 != null &&
                    this.DeclineR3.Equals(input.DeclineR3))
                ) && 
                (
                    this.DeclineR3DESC == input.DeclineR3DESC ||
                    (this.DeclineR3DESC != null &&
                    this.DeclineR3DESC.Equals(input.DeclineR3DESC))
                ) && 
                (
                    this.DeclineR4 == input.DeclineR4 ||
                    (this.DeclineR4 != null &&
                    this.DeclineR4.Equals(input.DeclineR4))
                ) && 
                (
                    this.DeclineR4DESC == input.DeclineR4DESC ||
                    (this.DeclineR4DESC != null &&
                    this.DeclineR4DESC.Equals(input.DeclineR4DESC))
                ) && 
                (
                    this.DeclineR5 == input.DeclineR5 ||
                    (this.DeclineR5 != null &&
                    this.DeclineR5.Equals(input.DeclineR5))
                ) && 
                (
                    this.DeclineR5DESC == input.DeclineR5DESC ||
                    (this.DeclineR5DESC != null &&
                    this.DeclineR5DESC.Equals(input.DeclineR5DESC))
                ) && 
                (
                    this.Risktype == input.Risktype ||
                    (this.Risktype != null &&
                    this.Risktype.Equals(input.Risktype))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Scoretype == input.Scoretype ||
                    (this.Scoretype != null &&
                    this.Scoretype.Equals(input.Scoretype))
                ) && 
                (
                    this.Thinfileindicator == input.Thinfileindicator ||
                    (this.Thinfileindicator != null &&
                    this.Thinfileindicator.Equals(input.Thinfileindicator))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ac != null)
                    hashCode = hashCode * 59 + this.Ac.GetHashCode();
                if (this.Bcode != null)
                    hashCode = hashCode * 59 + this.Bcode.GetHashCode();
                if (this.Colour != null)
                    hashCode = hashCode * 59 + this.Colour.GetHashCode();
                if (this.DeclineR1 != null)
                    hashCode = hashCode * 59 + this.DeclineR1.GetHashCode();
                if (this.DeclineR1DESC != null)
                    hashCode = hashCode * 59 + this.DeclineR1DESC.GetHashCode();
                if (this.DeclineR2 != null)
                    hashCode = hashCode * 59 + this.DeclineR2.GetHashCode();
                if (this.DeclineR2DESC != null)
                    hashCode = hashCode * 59 + this.DeclineR2DESC.GetHashCode();
                if (this.DeclineR3 != null)
                    hashCode = hashCode * 59 + this.DeclineR3.GetHashCode();
                if (this.DeclineR3DESC != null)
                    hashCode = hashCode * 59 + this.DeclineR3DESC.GetHashCode();
                if (this.DeclineR4 != null)
                    hashCode = hashCode * 59 + this.DeclineR4.GetHashCode();
                if (this.DeclineR4DESC != null)
                    hashCode = hashCode * 59 + this.DeclineR4DESC.GetHashCode();
                if (this.DeclineR5 != null)
                    hashCode = hashCode * 59 + this.DeclineR5.GetHashCode();
                if (this.DeclineR5DESC != null)
                    hashCode = hashCode * 59 + this.DeclineR5DESC.GetHashCode();
                if (this.Risktype != null)
                    hashCode = hashCode * 59 + this.Risktype.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Scoretype != null)
                    hashCode = hashCode * 59 + this.Scoretype.GetHashCode();
                if (this.Thinfileindicator != null)
                    hashCode = hashCode * 59 + this.Thinfileindicator.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
