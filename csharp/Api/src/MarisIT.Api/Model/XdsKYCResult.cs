/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsKYCResult
    /// </summary>
    [DataContract]
    public partial class XdsKYCResult :  IEquatable<XdsKYCResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsKYCResult" /> class.
        /// </summary>
        /// <param name="enquiryDate">enquiryDate.</param>
        /// <param name="id">id.</param>
        /// <param name="idStatusDesc">idStatusDesc.</param>
        /// <param name="idStatusInd">idStatusInd.</param>
        /// <param name="kycStatusDesc">kycStatusDesc.</param>
        /// <param name="kycStatusInd">kycStatusInd.</param>
        /// <param name="residentialAddress">residentialAddress.</param>
        /// <param name="sources">sources.</param>
        /// <param name="totalSourcesUsed">totalSourcesUsed.</param>
        public XdsKYCResult(string enquiryDate = default(string), string id = default(string), string idStatusDesc = default(string), string idStatusInd = default(string), string kycStatusDesc = default(string), string kycStatusInd = default(string), string residentialAddress = default(string), string sources = default(string), string totalSourcesUsed = default(string))
        {
            this.EnquiryDate = enquiryDate;
            this.Id = id;
            this.IdStatusDesc = idStatusDesc;
            this.IdStatusInd = idStatusInd;
            this.KycStatusDesc = kycStatusDesc;
            this.KycStatusInd = kycStatusInd;
            this.ResidentialAddress = residentialAddress;
            this.Sources = sources;
            this.TotalSourcesUsed = totalSourcesUsed;
            this.EnquiryDate = enquiryDate;
            this.Id = id;
            this.IdStatusDesc = idStatusDesc;
            this.IdStatusInd = idStatusInd;
            this.KycStatusDesc = kycStatusDesc;
            this.KycStatusInd = kycStatusInd;
            this.ResidentialAddress = residentialAddress;
            this.Sources = sources;
            this.TotalSourcesUsed = totalSourcesUsed;
        }

        /// <summary>
        /// Gets or Sets EnquiryDate
        /// </summary>
        [DataMember(Name="enquiryDate", EmitDefaultValue=true)]
        public string EnquiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IdStatusDesc
        /// </summary>
        [DataMember(Name="idStatusDesc", EmitDefaultValue=true)]
        public string IdStatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets IdStatusInd
        /// </summary>
        [DataMember(Name="idStatusInd", EmitDefaultValue=true)]
        public string IdStatusInd { get; set; }

        /// <summary>
        /// Gets or Sets KycStatusDesc
        /// </summary>
        [DataMember(Name="kycStatusDesc", EmitDefaultValue=true)]
        public string KycStatusDesc { get; set; }

        /// <summary>
        /// Gets or Sets KycStatusInd
        /// </summary>
        [DataMember(Name="kycStatusInd", EmitDefaultValue=true)]
        public string KycStatusInd { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name="residentialAddress", EmitDefaultValue=true)]
        public string ResidentialAddress { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name="sources", EmitDefaultValue=true)]
        public string Sources { get; set; }

        /// <summary>
        /// Gets or Sets TotalSourcesUsed
        /// </summary>
        [DataMember(Name="totalSourcesUsed", EmitDefaultValue=true)]
        public string TotalSourcesUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsKYCResult {\n");
            sb.Append("  EnquiryDate: ").Append(EnquiryDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdStatusDesc: ").Append(IdStatusDesc).Append("\n");
            sb.Append("  IdStatusInd: ").Append(IdStatusInd).Append("\n");
            sb.Append("  KycStatusDesc: ").Append(KycStatusDesc).Append("\n");
            sb.Append("  KycStatusInd: ").Append(KycStatusInd).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  TotalSourcesUsed: ").Append(TotalSourcesUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsKYCResult);
        }

        /// <summary>
        /// Returns true if XdsKYCResult instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsKYCResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsKYCResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnquiryDate == input.EnquiryDate ||
                    (this.EnquiryDate != null &&
                    this.EnquiryDate.Equals(input.EnquiryDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdStatusDesc == input.IdStatusDesc ||
                    (this.IdStatusDesc != null &&
                    this.IdStatusDesc.Equals(input.IdStatusDesc))
                ) && 
                (
                    this.IdStatusInd == input.IdStatusInd ||
                    (this.IdStatusInd != null &&
                    this.IdStatusInd.Equals(input.IdStatusInd))
                ) && 
                (
                    this.KycStatusDesc == input.KycStatusDesc ||
                    (this.KycStatusDesc != null &&
                    this.KycStatusDesc.Equals(input.KycStatusDesc))
                ) && 
                (
                    this.KycStatusInd == input.KycStatusInd ||
                    (this.KycStatusInd != null &&
                    this.KycStatusInd.Equals(input.KycStatusInd))
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    (this.ResidentialAddress != null &&
                    this.ResidentialAddress.Equals(input.ResidentialAddress))
                ) && 
                (
                    this.Sources == input.Sources ||
                    (this.Sources != null &&
                    this.Sources.Equals(input.Sources))
                ) && 
                (
                    this.TotalSourcesUsed == input.TotalSourcesUsed ||
                    (this.TotalSourcesUsed != null &&
                    this.TotalSourcesUsed.Equals(input.TotalSourcesUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnquiryDate != null)
                    hashCode = hashCode * 59 + this.EnquiryDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdStatusDesc != null)
                    hashCode = hashCode * 59 + this.IdStatusDesc.GetHashCode();
                if (this.IdStatusInd != null)
                    hashCode = hashCode * 59 + this.IdStatusInd.GetHashCode();
                if (this.KycStatusDesc != null)
                    hashCode = hashCode * 59 + this.KycStatusDesc.GetHashCode();
                if (this.KycStatusInd != null)
                    hashCode = hashCode * 59 + this.KycStatusInd.GetHashCode();
                if (this.ResidentialAddress != null)
                    hashCode = hashCode * 59 + this.ResidentialAddress.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                if (this.TotalSourcesUsed != null)
                    hashCode = hashCode * 59 + this.TotalSourcesUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
