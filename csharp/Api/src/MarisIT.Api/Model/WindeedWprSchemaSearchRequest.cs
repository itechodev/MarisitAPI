/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprSchemaSearchRequest
    /// </summary>
    [DataContract]
    public partial class WindeedWprSchemaSearchRequest :  IEquatable<WindeedWprSchemaSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprSchemaSearchRequest" /> class.
        /// </summary>
        /// <param name="schemaName">schemaName.</param>
        /// <param name="schemaNumber">schemaNumber.</param>
        /// <param name="unitNumber">unitNumber.</param>
        /// <param name="type">type.</param>
        /// <param name="name">name.</param>
        /// <param name="number">number.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="reference">reference.</param>
        public WindeedWprSchemaSearchRequest(string schemaName = default(string), int? schemaNumber = default(int?), int? unitNumber = default(int?), int? type = default(int?), string name = default(string), int? number = default(int?), string suburb = default(string), string reference = default(string))
        {
            this.SchemaName = schemaName;
            this.SchemaNumber = schemaNumber;
            this.UnitNumber = unitNumber;
            this.Type = type;
            this.Name = name;
            this.Number = number;
            this.Suburb = suburb;
            this.Reference = reference;
            this.SchemaName = schemaName;
            this.SchemaNumber = schemaNumber;
            this.UnitNumber = unitNumber;
            this.Type = type;
            this.Name = name;
            this.Number = number;
            this.Suburb = suburb;
            this.Reference = reference;
        }

        /// <summary>
        /// Gets or Sets SchemaName
        /// </summary>
        [DataMember(Name="schemaName", EmitDefaultValue=true)]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or Sets SchemaNumber
        /// </summary>
        [DataMember(Name="schemaNumber", EmitDefaultValue=true)]
        public int? SchemaNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [DataMember(Name="unitNumber", EmitDefaultValue=true)]
        public int? UnitNumber { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=true)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprSchemaSearchRequest {\n");
            sb.Append("  SchemaName: ").Append(SchemaName).Append("\n");
            sb.Append("  SchemaNumber: ").Append(SchemaNumber).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprSchemaSearchRequest);
        }

        /// <summary>
        /// Returns true if WindeedWprSchemaSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprSchemaSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprSchemaSearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemaName == input.SchemaName ||
                    (this.SchemaName != null &&
                    this.SchemaName.Equals(input.SchemaName))
                ) && 
                (
                    this.SchemaNumber == input.SchemaNumber ||
                    (this.SchemaNumber != null &&
                    this.SchemaNumber.Equals(input.SchemaNumber))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaName != null)
                    hashCode = hashCode * 59 + this.SchemaName.GetHashCode();
                if (this.SchemaNumber != null)
                    hashCode = hashCode * 59 + this.SchemaNumber.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
