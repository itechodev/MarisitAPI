/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118HomeOwnersAO
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118HomeOwnersAO :  IEquatable<TransunionConsumer118HomeOwnersAO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118HomeOwnersAO" /> class.
        /// </summary>
        /// <param name="riskAddress1">riskAddress1.</param>
        /// <param name="riskAddress2">riskAddress2.</param>
        /// <param name="riskAddress3">riskAddress3.</param>
        /// <param name="riskAddress4">riskAddress4.</param>
        /// <param name="riskAddressPostalCode">riskAddressPostalCode.</param>
        /// <param name="riskAddressProvinceCode">riskAddressProvinceCode.</param>
        public TransunionConsumer118HomeOwnersAO(string riskAddress1 = default(string), string riskAddress2 = default(string), string riskAddress3 = default(string), string riskAddress4 = default(string), string riskAddressPostalCode = default(string), string riskAddressProvinceCode = default(string))
        {
            this.RiskAddress1 = riskAddress1;
            this.RiskAddress2 = riskAddress2;
            this.RiskAddress3 = riskAddress3;
            this.RiskAddress4 = riskAddress4;
            this.RiskAddressPostalCode = riskAddressPostalCode;
            this.RiskAddressProvinceCode = riskAddressProvinceCode;
            this.RiskAddress1 = riskAddress1;
            this.RiskAddress2 = riskAddress2;
            this.RiskAddress3 = riskAddress3;
            this.RiskAddress4 = riskAddress4;
            this.RiskAddressPostalCode = riskAddressPostalCode;
            this.RiskAddressProvinceCode = riskAddressProvinceCode;
        }

        /// <summary>
        /// Gets or Sets RiskAddress1
        /// </summary>
        [DataMember(Name="riskAddress1", EmitDefaultValue=true)]
        public string RiskAddress1 { get; set; }

        /// <summary>
        /// Gets or Sets RiskAddress2
        /// </summary>
        [DataMember(Name="riskAddress2", EmitDefaultValue=true)]
        public string RiskAddress2 { get; set; }

        /// <summary>
        /// Gets or Sets RiskAddress3
        /// </summary>
        [DataMember(Name="riskAddress3", EmitDefaultValue=true)]
        public string RiskAddress3 { get; set; }

        /// <summary>
        /// Gets or Sets RiskAddress4
        /// </summary>
        [DataMember(Name="riskAddress4", EmitDefaultValue=true)]
        public string RiskAddress4 { get; set; }

        /// <summary>
        /// Gets or Sets RiskAddressPostalCode
        /// </summary>
        [DataMember(Name="riskAddressPostalCode", EmitDefaultValue=true)]
        public string RiskAddressPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RiskAddressProvinceCode
        /// </summary>
        [DataMember(Name="riskAddressProvinceCode", EmitDefaultValue=true)]
        public string RiskAddressProvinceCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118HomeOwnersAO {\n");
            sb.Append("  RiskAddress1: ").Append(RiskAddress1).Append("\n");
            sb.Append("  RiskAddress2: ").Append(RiskAddress2).Append("\n");
            sb.Append("  RiskAddress3: ").Append(RiskAddress3).Append("\n");
            sb.Append("  RiskAddress4: ").Append(RiskAddress4).Append("\n");
            sb.Append("  RiskAddressPostalCode: ").Append(RiskAddressPostalCode).Append("\n");
            sb.Append("  RiskAddressProvinceCode: ").Append(RiskAddressProvinceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118HomeOwnersAO);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118HomeOwnersAO instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118HomeOwnersAO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118HomeOwnersAO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RiskAddress1 == input.RiskAddress1 ||
                    (this.RiskAddress1 != null &&
                    this.RiskAddress1.Equals(input.RiskAddress1))
                ) && 
                (
                    this.RiskAddress2 == input.RiskAddress2 ||
                    (this.RiskAddress2 != null &&
                    this.RiskAddress2.Equals(input.RiskAddress2))
                ) && 
                (
                    this.RiskAddress3 == input.RiskAddress3 ||
                    (this.RiskAddress3 != null &&
                    this.RiskAddress3.Equals(input.RiskAddress3))
                ) && 
                (
                    this.RiskAddress4 == input.RiskAddress4 ||
                    (this.RiskAddress4 != null &&
                    this.RiskAddress4.Equals(input.RiskAddress4))
                ) && 
                (
                    this.RiskAddressPostalCode == input.RiskAddressPostalCode ||
                    (this.RiskAddressPostalCode != null &&
                    this.RiskAddressPostalCode.Equals(input.RiskAddressPostalCode))
                ) && 
                (
                    this.RiskAddressProvinceCode == input.RiskAddressProvinceCode ||
                    (this.RiskAddressProvinceCode != null &&
                    this.RiskAddressProvinceCode.Equals(input.RiskAddressProvinceCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RiskAddress1 != null)
                    hashCode = hashCode * 59 + this.RiskAddress1.GetHashCode();
                if (this.RiskAddress2 != null)
                    hashCode = hashCode * 59 + this.RiskAddress2.GetHashCode();
                if (this.RiskAddress3 != null)
                    hashCode = hashCode * 59 + this.RiskAddress3.GetHashCode();
                if (this.RiskAddress4 != null)
                    hashCode = hashCode * 59 + this.RiskAddress4.GetHashCode();
                if (this.RiskAddressPostalCode != null)
                    hashCode = hashCode * 59 + this.RiskAddressPostalCode.GetHashCode();
                if (this.RiskAddressProvinceCode != null)
                    hashCode = hashCode * 59 + this.RiskAddressProvinceCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
