/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerAffordability
    /// </summary>
    [DataContract]
    public partial class XdsConsumerAffordability :  IEquatable<XdsConsumerAffordability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerAffordability" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="consumerID">consumerID.</param>
        /// <param name="predictedIncome">predictedIncome.</param>
        /// <param name="exclusionReason">exclusionReason.</param>
        /// <param name="predAvailableinstalment">predAvailableinstalment.</param>
        /// <param name="totalCommitments">totalCommitments.</param>
        /// <param name="estimatedExpenses">estimatedExpenses.</param>
        /// <param name="totalPredictedExpenses">totalPredictedExpenses.</param>
        public XdsConsumerAffordability(string displayText = default(string), string consumerID = default(string), string predictedIncome = default(string), string exclusionReason = default(string), string predAvailableinstalment = default(string), string totalCommitments = default(string), string estimatedExpenses = default(string), string totalPredictedExpenses = default(string))
        {
            this.DisplayText = displayText;
            this.ConsumerID = consumerID;
            this.PredictedIncome = predictedIncome;
            this.ExclusionReason = exclusionReason;
            this.PredAvailableinstalment = predAvailableinstalment;
            this.TotalCommitments = totalCommitments;
            this.EstimatedExpenses = estimatedExpenses;
            this.TotalPredictedExpenses = totalPredictedExpenses;
            this.DisplayText = displayText;
            this.ConsumerID = consumerID;
            this.PredictedIncome = predictedIncome;
            this.ExclusionReason = exclusionReason;
            this.PredAvailableinstalment = predAvailableinstalment;
            this.TotalCommitments = totalCommitments;
            this.EstimatedExpenses = estimatedExpenses;
            this.TotalPredictedExpenses = totalPredictedExpenses;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerID
        /// </summary>
        [DataMember(Name="consumerID", EmitDefaultValue=true)]
        public string ConsumerID { get; set; }

        /// <summary>
        /// Gets or Sets PredictedIncome
        /// </summary>
        [DataMember(Name="predictedIncome", EmitDefaultValue=true)]
        public string PredictedIncome { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionReason
        /// </summary>
        [DataMember(Name="exclusionReason", EmitDefaultValue=true)]
        public string ExclusionReason { get; set; }

        /// <summary>
        /// Gets or Sets PredAvailableinstalment
        /// </summary>
        [DataMember(Name="predAvailableinstalment", EmitDefaultValue=true)]
        public string PredAvailableinstalment { get; set; }

        /// <summary>
        /// Gets or Sets TotalCommitments
        /// </summary>
        [DataMember(Name="totalCommitments", EmitDefaultValue=true)]
        public string TotalCommitments { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedExpenses
        /// </summary>
        [DataMember(Name="estimatedExpenses", EmitDefaultValue=true)]
        public string EstimatedExpenses { get; set; }

        /// <summary>
        /// Gets or Sets TotalPredictedExpenses
        /// </summary>
        [DataMember(Name="totalPredictedExpenses", EmitDefaultValue=true)]
        public string TotalPredictedExpenses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerAffordability {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  ConsumerID: ").Append(ConsumerID).Append("\n");
            sb.Append("  PredictedIncome: ").Append(PredictedIncome).Append("\n");
            sb.Append("  ExclusionReason: ").Append(ExclusionReason).Append("\n");
            sb.Append("  PredAvailableinstalment: ").Append(PredAvailableinstalment).Append("\n");
            sb.Append("  TotalCommitments: ").Append(TotalCommitments).Append("\n");
            sb.Append("  EstimatedExpenses: ").Append(EstimatedExpenses).Append("\n");
            sb.Append("  TotalPredictedExpenses: ").Append(TotalPredictedExpenses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerAffordability);
        }

        /// <summary>
        /// Returns true if XdsConsumerAffordability instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerAffordability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerAffordability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.ConsumerID == input.ConsumerID ||
                    (this.ConsumerID != null &&
                    this.ConsumerID.Equals(input.ConsumerID))
                ) && 
                (
                    this.PredictedIncome == input.PredictedIncome ||
                    (this.PredictedIncome != null &&
                    this.PredictedIncome.Equals(input.PredictedIncome))
                ) && 
                (
                    this.ExclusionReason == input.ExclusionReason ||
                    (this.ExclusionReason != null &&
                    this.ExclusionReason.Equals(input.ExclusionReason))
                ) && 
                (
                    this.PredAvailableinstalment == input.PredAvailableinstalment ||
                    (this.PredAvailableinstalment != null &&
                    this.PredAvailableinstalment.Equals(input.PredAvailableinstalment))
                ) && 
                (
                    this.TotalCommitments == input.TotalCommitments ||
                    (this.TotalCommitments != null &&
                    this.TotalCommitments.Equals(input.TotalCommitments))
                ) && 
                (
                    this.EstimatedExpenses == input.EstimatedExpenses ||
                    (this.EstimatedExpenses != null &&
                    this.EstimatedExpenses.Equals(input.EstimatedExpenses))
                ) && 
                (
                    this.TotalPredictedExpenses == input.TotalPredictedExpenses ||
                    (this.TotalPredictedExpenses != null &&
                    this.TotalPredictedExpenses.Equals(input.TotalPredictedExpenses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.ConsumerID != null)
                    hashCode = hashCode * 59 + this.ConsumerID.GetHashCode();
                if (this.PredictedIncome != null)
                    hashCode = hashCode * 59 + this.PredictedIncome.GetHashCode();
                if (this.ExclusionReason != null)
                    hashCode = hashCode * 59 + this.ExclusionReason.GetHashCode();
                if (this.PredAvailableinstalment != null)
                    hashCode = hashCode * 59 + this.PredAvailableinstalment.GetHashCode();
                if (this.TotalCommitments != null)
                    hashCode = hashCode * 59 + this.TotalCommitments.GetHashCode();
                if (this.EstimatedExpenses != null)
                    hashCode = hashCode * 59 + this.EstimatedExpenses.GetHashCode();
                if (this.TotalPredictedExpenses != null)
                    hashCode = hashCode * 59 + this.TotalPredictedExpenses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
