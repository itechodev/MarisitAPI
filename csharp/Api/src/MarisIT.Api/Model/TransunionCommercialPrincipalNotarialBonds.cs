/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialPrincipalNotarialBonds
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialPrincipalNotarialBonds :  IEquatable<TransunionCommercialPrincipalNotarialBonds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialPrincipalNotarialBonds" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="multipleOwners">multipleOwners.</param>
        /// <param name="bondRegDate">bondRegDate.</param>
        /// <param name="bondNumber">bondNumber.</param>
        /// <param name="bondAmount">bondAmount.</param>
        /// <param name="microfilemRef">microfilemRef.</param>
        /// <param name="bondType">bondType.</param>
        /// <param name="bondOwner">bondOwner.</param>
        /// <param name="ownerID">ownerID.</param>
        /// <param name="ownerType">ownerType.</param>
        /// <param name="bondPercentage">bondPercentage.</param>
        /// <param name="heldOver">heldOver.</param>
        /// <param name="hoAboveThreshold">hoAboveThreshold.</param>
        /// <param name="parentChildInd">parentChildInd.</param>
        /// <param name="message">message.</param>
        public TransunionCommercialPrincipalNotarialBonds(string majorProduct = default(string), string deedsOffice = default(string), string multipleOwners = default(string), string bondRegDate = default(string), string bondNumber = default(string), string bondAmount = default(string), string microfilemRef = default(string), string bondType = default(string), string bondOwner = default(string), string ownerID = default(string), string ownerType = default(string), string bondPercentage = default(string), List<string> heldOver = default(List<string>), string hoAboveThreshold = default(string), string parentChildInd = default(string), string message = default(string))
        {
            this.MajorProduct = majorProduct;
            this.DeedsOffice = deedsOffice;
            this.MultipleOwners = multipleOwners;
            this.BondRegDate = bondRegDate;
            this.BondNumber = bondNumber;
            this.BondAmount = bondAmount;
            this.MicrofilemRef = microfilemRef;
            this.BondType = bondType;
            this.BondOwner = bondOwner;
            this.OwnerID = ownerID;
            this.OwnerType = ownerType;
            this.BondPercentage = bondPercentage;
            this.HeldOver = heldOver;
            this.HoAboveThreshold = hoAboveThreshold;
            this.ParentChildInd = parentChildInd;
            this.Message = message;
            this.MajorProduct = majorProduct;
            this.DeedsOffice = deedsOffice;
            this.MultipleOwners = multipleOwners;
            this.BondRegDate = bondRegDate;
            this.BondNumber = bondNumber;
            this.BondAmount = bondAmount;
            this.MicrofilemRef = microfilemRef;
            this.BondType = bondType;
            this.BondOwner = bondOwner;
            this.OwnerID = ownerID;
            this.OwnerType = ownerType;
            this.BondPercentage = bondPercentage;
            this.HeldOver = heldOver;
            this.HoAboveThreshold = hoAboveThreshold;
            this.ParentChildInd = parentChildInd;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=true)]
        public string DeedsOffice { get; set; }

        /// <summary>
        /// Gets or Sets MultipleOwners
        /// </summary>
        [DataMember(Name="multipleOwners", EmitDefaultValue=true)]
        public string MultipleOwners { get; set; }

        /// <summary>
        /// Gets or Sets BondRegDate
        /// </summary>
        [DataMember(Name="bondRegDate", EmitDefaultValue=true)]
        public string BondRegDate { get; set; }

        /// <summary>
        /// Gets or Sets BondNumber
        /// </summary>
        [DataMember(Name="bondNumber", EmitDefaultValue=true)]
        public string BondNumber { get; set; }

        /// <summary>
        /// Gets or Sets BondAmount
        /// </summary>
        [DataMember(Name="bondAmount", EmitDefaultValue=true)]
        public string BondAmount { get; set; }

        /// <summary>
        /// Gets or Sets MicrofilemRef
        /// </summary>
        [DataMember(Name="microfilemRef", EmitDefaultValue=true)]
        public string MicrofilemRef { get; set; }

        /// <summary>
        /// Gets or Sets BondType
        /// </summary>
        [DataMember(Name="bondType", EmitDefaultValue=true)]
        public string BondType { get; set; }

        /// <summary>
        /// Gets or Sets BondOwner
        /// </summary>
        [DataMember(Name="bondOwner", EmitDefaultValue=true)]
        public string BondOwner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerID
        /// </summary>
        [DataMember(Name="ownerID", EmitDefaultValue=true)]
        public string OwnerID { get; set; }

        /// <summary>
        /// Gets or Sets OwnerType
        /// </summary>
        [DataMember(Name="ownerType", EmitDefaultValue=true)]
        public string OwnerType { get; set; }

        /// <summary>
        /// Gets or Sets BondPercentage
        /// </summary>
        [DataMember(Name="bondPercentage", EmitDefaultValue=true)]
        public string BondPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HeldOver
        /// </summary>
        [DataMember(Name="heldOver", EmitDefaultValue=true)]
        public List<string> HeldOver { get; set; }

        /// <summary>
        /// Gets or Sets HoAboveThreshold
        /// </summary>
        [DataMember(Name="hoAboveThreshold", EmitDefaultValue=true)]
        public string HoAboveThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ParentChildInd
        /// </summary>
        [DataMember(Name="parentChildInd", EmitDefaultValue=true)]
        public string ParentChildInd { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialPrincipalNotarialBonds {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  MultipleOwners: ").Append(MultipleOwners).Append("\n");
            sb.Append("  BondRegDate: ").Append(BondRegDate).Append("\n");
            sb.Append("  BondNumber: ").Append(BondNumber).Append("\n");
            sb.Append("  BondAmount: ").Append(BondAmount).Append("\n");
            sb.Append("  MicrofilemRef: ").Append(MicrofilemRef).Append("\n");
            sb.Append("  BondType: ").Append(BondType).Append("\n");
            sb.Append("  BondOwner: ").Append(BondOwner).Append("\n");
            sb.Append("  OwnerID: ").Append(OwnerID).Append("\n");
            sb.Append("  OwnerType: ").Append(OwnerType).Append("\n");
            sb.Append("  BondPercentage: ").Append(BondPercentage).Append("\n");
            sb.Append("  HeldOver: ").Append(HeldOver).Append("\n");
            sb.Append("  HoAboveThreshold: ").Append(HoAboveThreshold).Append("\n");
            sb.Append("  ParentChildInd: ").Append(ParentChildInd).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialPrincipalNotarialBonds);
        }

        /// <summary>
        /// Returns true if TransunionCommercialPrincipalNotarialBonds instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialPrincipalNotarialBonds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialPrincipalNotarialBonds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.MultipleOwners == input.MultipleOwners ||
                    (this.MultipleOwners != null &&
                    this.MultipleOwners.Equals(input.MultipleOwners))
                ) && 
                (
                    this.BondRegDate == input.BondRegDate ||
                    (this.BondRegDate != null &&
                    this.BondRegDate.Equals(input.BondRegDate))
                ) && 
                (
                    this.BondNumber == input.BondNumber ||
                    (this.BondNumber != null &&
                    this.BondNumber.Equals(input.BondNumber))
                ) && 
                (
                    this.BondAmount == input.BondAmount ||
                    (this.BondAmount != null &&
                    this.BondAmount.Equals(input.BondAmount))
                ) && 
                (
                    this.MicrofilemRef == input.MicrofilemRef ||
                    (this.MicrofilemRef != null &&
                    this.MicrofilemRef.Equals(input.MicrofilemRef))
                ) && 
                (
                    this.BondType == input.BondType ||
                    (this.BondType != null &&
                    this.BondType.Equals(input.BondType))
                ) && 
                (
                    this.BondOwner == input.BondOwner ||
                    (this.BondOwner != null &&
                    this.BondOwner.Equals(input.BondOwner))
                ) && 
                (
                    this.OwnerID == input.OwnerID ||
                    (this.OwnerID != null &&
                    this.OwnerID.Equals(input.OwnerID))
                ) && 
                (
                    this.OwnerType == input.OwnerType ||
                    (this.OwnerType != null &&
                    this.OwnerType.Equals(input.OwnerType))
                ) && 
                (
                    this.BondPercentage == input.BondPercentage ||
                    (this.BondPercentage != null &&
                    this.BondPercentage.Equals(input.BondPercentage))
                ) && 
                (
                    this.HeldOver == input.HeldOver ||
                    this.HeldOver != null &&
                    input.HeldOver != null &&
                    this.HeldOver.SequenceEqual(input.HeldOver)
                ) && 
                (
                    this.HoAboveThreshold == input.HoAboveThreshold ||
                    (this.HoAboveThreshold != null &&
                    this.HoAboveThreshold.Equals(input.HoAboveThreshold))
                ) && 
                (
                    this.ParentChildInd == input.ParentChildInd ||
                    (this.ParentChildInd != null &&
                    this.ParentChildInd.Equals(input.ParentChildInd))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.MultipleOwners != null)
                    hashCode = hashCode * 59 + this.MultipleOwners.GetHashCode();
                if (this.BondRegDate != null)
                    hashCode = hashCode * 59 + this.BondRegDate.GetHashCode();
                if (this.BondNumber != null)
                    hashCode = hashCode * 59 + this.BondNumber.GetHashCode();
                if (this.BondAmount != null)
                    hashCode = hashCode * 59 + this.BondAmount.GetHashCode();
                if (this.MicrofilemRef != null)
                    hashCode = hashCode * 59 + this.MicrofilemRef.GetHashCode();
                if (this.BondType != null)
                    hashCode = hashCode * 59 + this.BondType.GetHashCode();
                if (this.BondOwner != null)
                    hashCode = hashCode * 59 + this.BondOwner.GetHashCode();
                if (this.OwnerID != null)
                    hashCode = hashCode * 59 + this.OwnerID.GetHashCode();
                if (this.OwnerType != null)
                    hashCode = hashCode * 59 + this.OwnerType.GetHashCode();
                if (this.BondPercentage != null)
                    hashCode = hashCode * 59 + this.BondPercentage.GetHashCode();
                if (this.HeldOver != null)
                    hashCode = hashCode * 59 + this.HeldOver.GetHashCode();
                if (this.HoAboveThreshold != null)
                    hashCode = hashCode * 59 + this.HoAboveThreshold.GetHashCode();
                if (this.ParentChildInd != null)
                    hashCode = hashCode * 59 + this.ParentChildInd.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
