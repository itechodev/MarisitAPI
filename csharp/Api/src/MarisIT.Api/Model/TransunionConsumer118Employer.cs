/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118Employer
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118Employer :  IEquatable<TransunionConsumer118Employer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118Employer" /> class.
        /// </summary>
        /// <param name="employerDetailsId">employerDetailsId.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="companyType">companyType.</param>
        /// <param name="companyRegistrationNumber">companyRegistrationNumber.</param>
        /// <param name="vatRegistrationNumber">vatRegistrationNumber.</param>
        public TransunionConsumer118Employer(int employerDetailsId = default(int), string companyName = default(string), string companyType = default(string), string companyRegistrationNumber = default(string), string vatRegistrationNumber = default(string))
        {
            this.CompanyName = companyName;
            this.CompanyType = companyType;
            this.CompanyRegistrationNumber = companyRegistrationNumber;
            this.VatRegistrationNumber = vatRegistrationNumber;
            this.EmployerDetailsId = employerDetailsId;
            this.CompanyName = companyName;
            this.CompanyType = companyType;
            this.CompanyRegistrationNumber = companyRegistrationNumber;
            this.VatRegistrationNumber = vatRegistrationNumber;
        }

        /// <summary>
        /// Gets or Sets EmployerDetailsId
        /// </summary>
        [DataMember(Name="employerDetailsId", EmitDefaultValue=false)]
        public int EmployerDetailsId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="companyName", EmitDefaultValue=true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets CompanyType
        /// </summary>
        [DataMember(Name="companyType", EmitDefaultValue=true)]
        public string CompanyType { get; set; }

        /// <summary>
        /// Gets or Sets CompanyRegistrationNumber
        /// </summary>
        [DataMember(Name="companyRegistrationNumber", EmitDefaultValue=true)]
        public string CompanyRegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets VatRegistrationNumber
        /// </summary>
        [DataMember(Name="vatRegistrationNumber", EmitDefaultValue=true)]
        public string VatRegistrationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118Employer {\n");
            sb.Append("  EmployerDetailsId: ").Append(EmployerDetailsId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CompanyRegistrationNumber: ").Append(CompanyRegistrationNumber).Append("\n");
            sb.Append("  VatRegistrationNumber: ").Append(VatRegistrationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118Employer);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118Employer instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118Employer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118Employer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployerDetailsId == input.EmployerDetailsId ||
                    (this.EmployerDetailsId != null &&
                    this.EmployerDetailsId.Equals(input.EmployerDetailsId))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyType == input.CompanyType ||
                    (this.CompanyType != null &&
                    this.CompanyType.Equals(input.CompanyType))
                ) && 
                (
                    this.CompanyRegistrationNumber == input.CompanyRegistrationNumber ||
                    (this.CompanyRegistrationNumber != null &&
                    this.CompanyRegistrationNumber.Equals(input.CompanyRegistrationNumber))
                ) && 
                (
                    this.VatRegistrationNumber == input.VatRegistrationNumber ||
                    (this.VatRegistrationNumber != null &&
                    this.VatRegistrationNumber.Equals(input.VatRegistrationNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployerDetailsId != null)
                    hashCode = hashCode * 59 + this.EmployerDetailsId.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyType != null)
                    hashCode = hashCode * 59 + this.CompanyType.GetHashCode();
                if (this.CompanyRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.CompanyRegistrationNumber.GetHashCode();
                if (this.VatRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.VatRegistrationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
