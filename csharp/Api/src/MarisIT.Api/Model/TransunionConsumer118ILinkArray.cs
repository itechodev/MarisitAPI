/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ILinkArray
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ILinkArray :  IEquatable<TransunionConsumer118ILinkArray>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ILinkArray" /> class.
        /// </summary>
        /// <param name="iLinkConsumerNumber">iLinkConsumerNumber.</param>
        /// <param name="iLinkSurname">iLinkSurname.</param>
        /// <param name="iLinkForename">iLinkForename.</param>
        /// <param name="iLinkCellCommon">iLinkCellCommon.</param>
        /// <param name="iLinkHomeTelephoneCommon">iLinkHomeTelephoneCommon.</param>
        /// <param name="iLinkWorkTelephoneCommon">iLinkWorkTelephoneCommon.</param>
        /// <param name="iLinkAddressCommon">iLinkAddressCommon.</param>
        public TransunionConsumer118ILinkArray(string iLinkConsumerNumber = default(string), string iLinkSurname = default(string), string iLinkForename = default(string), string iLinkCellCommon = default(string), string iLinkHomeTelephoneCommon = default(string), string iLinkWorkTelephoneCommon = default(string), string iLinkAddressCommon = default(string))
        {
            this.ILinkConsumerNumber = iLinkConsumerNumber;
            this.ILinkSurname = iLinkSurname;
            this.ILinkForename = iLinkForename;
            this.ILinkCellCommon = iLinkCellCommon;
            this.ILinkHomeTelephoneCommon = iLinkHomeTelephoneCommon;
            this.ILinkWorkTelephoneCommon = iLinkWorkTelephoneCommon;
            this.ILinkAddressCommon = iLinkAddressCommon;
            this.ILinkConsumerNumber = iLinkConsumerNumber;
            this.ILinkSurname = iLinkSurname;
            this.ILinkForename = iLinkForename;
            this.ILinkCellCommon = iLinkCellCommon;
            this.ILinkHomeTelephoneCommon = iLinkHomeTelephoneCommon;
            this.ILinkWorkTelephoneCommon = iLinkWorkTelephoneCommon;
            this.ILinkAddressCommon = iLinkAddressCommon;
        }

        /// <summary>
        /// Gets or Sets ILinkConsumerNumber
        /// </summary>
        [DataMember(Name="iLinkConsumerNumber", EmitDefaultValue=true)]
        public string ILinkConsumerNumber { get; set; }

        /// <summary>
        /// Gets or Sets ILinkSurname
        /// </summary>
        [DataMember(Name="iLinkSurname", EmitDefaultValue=true)]
        public string ILinkSurname { get; set; }

        /// <summary>
        /// Gets or Sets ILinkForename
        /// </summary>
        [DataMember(Name="iLinkForename", EmitDefaultValue=true)]
        public string ILinkForename { get; set; }

        /// <summary>
        /// Gets or Sets ILinkCellCommon
        /// </summary>
        [DataMember(Name="iLinkCellCommon", EmitDefaultValue=true)]
        public string ILinkCellCommon { get; set; }

        /// <summary>
        /// Gets or Sets ILinkHomeTelephoneCommon
        /// </summary>
        [DataMember(Name="iLinkHomeTelephoneCommon", EmitDefaultValue=true)]
        public string ILinkHomeTelephoneCommon { get; set; }

        /// <summary>
        /// Gets or Sets ILinkWorkTelephoneCommon
        /// </summary>
        [DataMember(Name="iLinkWorkTelephoneCommon", EmitDefaultValue=true)]
        public string ILinkWorkTelephoneCommon { get; set; }

        /// <summary>
        /// Gets or Sets ILinkAddressCommon
        /// </summary>
        [DataMember(Name="iLinkAddressCommon", EmitDefaultValue=true)]
        public string ILinkAddressCommon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ILinkArray {\n");
            sb.Append("  ILinkConsumerNumber: ").Append(ILinkConsumerNumber).Append("\n");
            sb.Append("  ILinkSurname: ").Append(ILinkSurname).Append("\n");
            sb.Append("  ILinkForename: ").Append(ILinkForename).Append("\n");
            sb.Append("  ILinkCellCommon: ").Append(ILinkCellCommon).Append("\n");
            sb.Append("  ILinkHomeTelephoneCommon: ").Append(ILinkHomeTelephoneCommon).Append("\n");
            sb.Append("  ILinkWorkTelephoneCommon: ").Append(ILinkWorkTelephoneCommon).Append("\n");
            sb.Append("  ILinkAddressCommon: ").Append(ILinkAddressCommon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ILinkArray);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ILinkArray instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ILinkArray to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ILinkArray input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ILinkConsumerNumber == input.ILinkConsumerNumber ||
                    (this.ILinkConsumerNumber != null &&
                    this.ILinkConsumerNumber.Equals(input.ILinkConsumerNumber))
                ) && 
                (
                    this.ILinkSurname == input.ILinkSurname ||
                    (this.ILinkSurname != null &&
                    this.ILinkSurname.Equals(input.ILinkSurname))
                ) && 
                (
                    this.ILinkForename == input.ILinkForename ||
                    (this.ILinkForename != null &&
                    this.ILinkForename.Equals(input.ILinkForename))
                ) && 
                (
                    this.ILinkCellCommon == input.ILinkCellCommon ||
                    (this.ILinkCellCommon != null &&
                    this.ILinkCellCommon.Equals(input.ILinkCellCommon))
                ) && 
                (
                    this.ILinkHomeTelephoneCommon == input.ILinkHomeTelephoneCommon ||
                    (this.ILinkHomeTelephoneCommon != null &&
                    this.ILinkHomeTelephoneCommon.Equals(input.ILinkHomeTelephoneCommon))
                ) && 
                (
                    this.ILinkWorkTelephoneCommon == input.ILinkWorkTelephoneCommon ||
                    (this.ILinkWorkTelephoneCommon != null &&
                    this.ILinkWorkTelephoneCommon.Equals(input.ILinkWorkTelephoneCommon))
                ) && 
                (
                    this.ILinkAddressCommon == input.ILinkAddressCommon ||
                    (this.ILinkAddressCommon != null &&
                    this.ILinkAddressCommon.Equals(input.ILinkAddressCommon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ILinkConsumerNumber != null)
                    hashCode = hashCode * 59 + this.ILinkConsumerNumber.GetHashCode();
                if (this.ILinkSurname != null)
                    hashCode = hashCode * 59 + this.ILinkSurname.GetHashCode();
                if (this.ILinkForename != null)
                    hashCode = hashCode * 59 + this.ILinkForename.GetHashCode();
                if (this.ILinkCellCommon != null)
                    hashCode = hashCode * 59 + this.ILinkCellCommon.GetHashCode();
                if (this.ILinkHomeTelephoneCommon != null)
                    hashCode = hashCode * 59 + this.ILinkHomeTelephoneCommon.GetHashCode();
                if (this.ILinkWorkTelephoneCommon != null)
                    hashCode = hashCode * 59 + this.ILinkWorkTelephoneCommon.GetHashCode();
                if (this.ILinkAddressCommon != null)
                    hashCode = hashCode * 59 + this.ILinkAddressCommon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
