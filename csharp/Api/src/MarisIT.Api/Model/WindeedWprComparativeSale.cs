/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprComparativeSale
    /// </summary>
    [DataContract]
    public partial class WindeedWprComparativeSale :  IEquatable<WindeedWprComparativeSale>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprComparativeSale" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="propertyDescription">propertyDescription.</param>
        /// <param name="address">address.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="size">size.</param>
        /// <param name="sizeInSqm">sizeInSqm.</param>
        /// <param name="distance">distance.</param>
        /// <param name="salesDate">salesDate.</param>
        /// <param name="salesPrice">salesPrice.</param>
        /// <param name="transferDate">transferDate.</param>
        /// <param name="location">location.</param>
        public WindeedWprComparativeSale(string key = default(string), string propertyDescription = default(string), string address = default(string), string suburb = default(string), string size = default(string), int sizeInSqm = default(int), double distance = default(double), DateTime? salesDate = default(DateTime?), double salesPrice = default(double), DateTime? transferDate = default(DateTime?), WindeedWprCoordinate location = default(WindeedWprCoordinate))
        {
            this.Key = key;
            this.PropertyDescription = propertyDescription;
            this.Address = address;
            this.Suburb = suburb;
            this.Size = size;
            this.SalesDate = salesDate;
            this.TransferDate = transferDate;
            this.Key = key;
            this.PropertyDescription = propertyDescription;
            this.Address = address;
            this.Suburb = suburb;
            this.Size = size;
            this.SizeInSqm = sizeInSqm;
            this.Distance = distance;
            this.SalesDate = salesDate;
            this.SalesPrice = salesPrice;
            this.TransferDate = transferDate;
            this.Location = location;
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets PropertyDescription
        /// </summary>
        [DataMember(Name="propertyDescription", EmitDefaultValue=true)]
        public string PropertyDescription { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets SizeInSqm
        /// </summary>
        [DataMember(Name="sizeInSqm", EmitDefaultValue=false)]
        public int SizeInSqm { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double Distance { get; set; }

        /// <summary>
        /// Gets or Sets SalesDate
        /// </summary>
        [DataMember(Name="salesDate", EmitDefaultValue=true)]
        public DateTime? SalesDate { get; set; }

        /// <summary>
        /// Gets or Sets SalesPrice
        /// </summary>
        [DataMember(Name="salesPrice", EmitDefaultValue=false)]
        public double SalesPrice { get; set; }

        /// <summary>
        /// Gets or Sets TransferDate
        /// </summary>
        [DataMember(Name="transferDate", EmitDefaultValue=true)]
        public DateTime? TransferDate { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public WindeedWprCoordinate Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprComparativeSale {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  PropertyDescription: ").Append(PropertyDescription).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizeInSqm: ").Append(SizeInSqm).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  SalesDate: ").Append(SalesDate).Append("\n");
            sb.Append("  SalesPrice: ").Append(SalesPrice).Append("\n");
            sb.Append("  TransferDate: ").Append(TransferDate).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprComparativeSale);
        }

        /// <summary>
        /// Returns true if WindeedWprComparativeSale instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprComparativeSale to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprComparativeSale input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.PropertyDescription == input.PropertyDescription ||
                    (this.PropertyDescription != null &&
                    this.PropertyDescription.Equals(input.PropertyDescription))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.SizeInSqm == input.SizeInSqm ||
                    (this.SizeInSqm != null &&
                    this.SizeInSqm.Equals(input.SizeInSqm))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.SalesDate == input.SalesDate ||
                    (this.SalesDate != null &&
                    this.SalesDate.Equals(input.SalesDate))
                ) && 
                (
                    this.SalesPrice == input.SalesPrice ||
                    (this.SalesPrice != null &&
                    this.SalesPrice.Equals(input.SalesPrice))
                ) && 
                (
                    this.TransferDate == input.TransferDate ||
                    (this.TransferDate != null &&
                    this.TransferDate.Equals(input.TransferDate))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.PropertyDescription != null)
                    hashCode = hashCode * 59 + this.PropertyDescription.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.SizeInSqm != null)
                    hashCode = hashCode * 59 + this.SizeInSqm.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.SalesDate != null)
                    hashCode = hashCode * 59 + this.SalesDate.GetHashCode();
                if (this.SalesPrice != null)
                    hashCode = hashCode * 59 + this.SalesPrice.GetHashCode();
                if (this.TransferDate != null)
                    hashCode = hashCode * 59 + this.TransferDate.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
