/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118EmpiricaEX
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118EmpiricaEX :  IEquatable<TransunionConsumer118EmpiricaEX>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118EmpiricaEX" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="empiricaScore">empiricaScore.</param>
        /// <param name="scoreIndicator">scoreIndicator.</param>
        /// <param name="dateofBirth">dateofBirth.</param>
        /// <param name="exclusionCode">exclusionCode.</param>
        /// <param name="exclusionCodeDescription">exclusionCodeDescription.</param>
        /// <param name="reasonCode1">reasonCode1.</param>
        /// <param name="reasonCodeDescription1">reasonCodeDescription1.</param>
        /// <param name="reasonCode2">reasonCode2.</param>
        /// <param name="reasonCodeDescription2">reasonCodeDescription2.</param>
        /// <param name="reasonCode3">reasonCode3.</param>
        /// <param name="reasonCodeDescription3">reasonCodeDescription3.</param>
        /// <param name="reasonCode4">reasonCode4.</param>
        /// <param name="reasonCodeDescription4">reasonCodeDescription4.</param>
        /// <param name="expansionScore">expansionScore.</param>
        /// <param name="expansionScoreDescription">expansionScoreDescription.</param>
        /// <param name="subscriberNo">subscriberNo.</param>
        /// <param name="empiricaType">empiricaType.</param>
        public TransunionConsumer118EmpiricaEX(string consumerNo = default(string), string empiricaScore = default(string), string scoreIndicator = default(string), string dateofBirth = default(string), string exclusionCode = default(string), string exclusionCodeDescription = default(string), string reasonCode1 = default(string), string reasonCodeDescription1 = default(string), string reasonCode2 = default(string), string reasonCodeDescription2 = default(string), string reasonCode3 = default(string), string reasonCodeDescription3 = default(string), string reasonCode4 = default(string), string reasonCodeDescription4 = default(string), string expansionScore = default(string), string expansionScoreDescription = default(string), string subscriberNo = default(string), string empiricaType = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ScoreIndicator = scoreIndicator;
            this.DateofBirth = dateofBirth;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode1 = reasonCode1;
            this.ReasonCodeDescription1 = reasonCodeDescription1;
            this.ReasonCode2 = reasonCode2;
            this.ReasonCodeDescription2 = reasonCodeDescription2;
            this.ReasonCode3 = reasonCode3;
            this.ReasonCodeDescription3 = reasonCodeDescription3;
            this.ReasonCode4 = reasonCode4;
            this.ReasonCodeDescription4 = reasonCodeDescription4;
            this.ExpansionScore = expansionScore;
            this.ExpansionScoreDescription = expansionScoreDescription;
            this.SubscriberNo = subscriberNo;
            this.EmpiricaType = empiricaType;
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ScoreIndicator = scoreIndicator;
            this.DateofBirth = dateofBirth;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode1 = reasonCode1;
            this.ReasonCodeDescription1 = reasonCodeDescription1;
            this.ReasonCode2 = reasonCode2;
            this.ReasonCodeDescription2 = reasonCodeDescription2;
            this.ReasonCode3 = reasonCode3;
            this.ReasonCodeDescription3 = reasonCodeDescription3;
            this.ReasonCode4 = reasonCode4;
            this.ReasonCodeDescription4 = reasonCodeDescription4;
            this.ExpansionScore = expansionScore;
            this.ExpansionScoreDescription = expansionScoreDescription;
            this.SubscriberNo = subscriberNo;
            this.EmpiricaType = empiricaType;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaScore
        /// </summary>
        [DataMember(Name="empiricaScore", EmitDefaultValue=true)]
        public string EmpiricaScore { get; set; }

        /// <summary>
        /// Gets or Sets ScoreIndicator
        /// </summary>
        [DataMember(Name="scoreIndicator", EmitDefaultValue=true)]
        public string ScoreIndicator { get; set; }

        /// <summary>
        /// Gets or Sets DateofBirth
        /// </summary>
        [DataMember(Name="dateofBirth", EmitDefaultValue=true)]
        public string DateofBirth { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCode
        /// </summary>
        [DataMember(Name="exclusionCode", EmitDefaultValue=true)]
        public string ExclusionCode { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCodeDescription
        /// </summary>
        [DataMember(Name="exclusionCodeDescription", EmitDefaultValue=true)]
        public string ExclusionCodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode1
        /// </summary>
        [DataMember(Name="reasonCode1", EmitDefaultValue=true)]
        public string ReasonCode1 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeDescription1
        /// </summary>
        [DataMember(Name="reasonCodeDescription1", EmitDefaultValue=true)]
        public string ReasonCodeDescription1 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode2
        /// </summary>
        [DataMember(Name="reasonCode2", EmitDefaultValue=true)]
        public string ReasonCode2 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeDescription2
        /// </summary>
        [DataMember(Name="reasonCodeDescription2", EmitDefaultValue=true)]
        public string ReasonCodeDescription2 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode3
        /// </summary>
        [DataMember(Name="reasonCode3", EmitDefaultValue=true)]
        public string ReasonCode3 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeDescription3
        /// </summary>
        [DataMember(Name="reasonCodeDescription3", EmitDefaultValue=true)]
        public string ReasonCodeDescription3 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode4
        /// </summary>
        [DataMember(Name="reasonCode4", EmitDefaultValue=true)]
        public string ReasonCode4 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeDescription4
        /// </summary>
        [DataMember(Name="reasonCodeDescription4", EmitDefaultValue=true)]
        public string ReasonCodeDescription4 { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionScore
        /// </summary>
        [DataMember(Name="expansionScore", EmitDefaultValue=true)]
        public string ExpansionScore { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionScoreDescription
        /// </summary>
        [DataMember(Name="expansionScoreDescription", EmitDefaultValue=true)]
        public string ExpansionScoreDescription { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberNo
        /// </summary>
        [DataMember(Name="subscriberNo", EmitDefaultValue=true)]
        public string SubscriberNo { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaType
        /// </summary>
        [DataMember(Name="empiricaType", EmitDefaultValue=true)]
        public string EmpiricaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118EmpiricaEX {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  EmpiricaScore: ").Append(EmpiricaScore).Append("\n");
            sb.Append("  ScoreIndicator: ").Append(ScoreIndicator).Append("\n");
            sb.Append("  DateofBirth: ").Append(DateofBirth).Append("\n");
            sb.Append("  ExclusionCode: ").Append(ExclusionCode).Append("\n");
            sb.Append("  ExclusionCodeDescription: ").Append(ExclusionCodeDescription).Append("\n");
            sb.Append("  ReasonCode1: ").Append(ReasonCode1).Append("\n");
            sb.Append("  ReasonCodeDescription1: ").Append(ReasonCodeDescription1).Append("\n");
            sb.Append("  ReasonCode2: ").Append(ReasonCode2).Append("\n");
            sb.Append("  ReasonCodeDescription2: ").Append(ReasonCodeDescription2).Append("\n");
            sb.Append("  ReasonCode3: ").Append(ReasonCode3).Append("\n");
            sb.Append("  ReasonCodeDescription3: ").Append(ReasonCodeDescription3).Append("\n");
            sb.Append("  ReasonCode4: ").Append(ReasonCode4).Append("\n");
            sb.Append("  ReasonCodeDescription4: ").Append(ReasonCodeDescription4).Append("\n");
            sb.Append("  ExpansionScore: ").Append(ExpansionScore).Append("\n");
            sb.Append("  ExpansionScoreDescription: ").Append(ExpansionScoreDescription).Append("\n");
            sb.Append("  SubscriberNo: ").Append(SubscriberNo).Append("\n");
            sb.Append("  EmpiricaType: ").Append(EmpiricaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118EmpiricaEX);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118EmpiricaEX instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118EmpiricaEX to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118EmpiricaEX input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.EmpiricaScore == input.EmpiricaScore ||
                    (this.EmpiricaScore != null &&
                    this.EmpiricaScore.Equals(input.EmpiricaScore))
                ) && 
                (
                    this.ScoreIndicator == input.ScoreIndicator ||
                    (this.ScoreIndicator != null &&
                    this.ScoreIndicator.Equals(input.ScoreIndicator))
                ) && 
                (
                    this.DateofBirth == input.DateofBirth ||
                    (this.DateofBirth != null &&
                    this.DateofBirth.Equals(input.DateofBirth))
                ) && 
                (
                    this.ExclusionCode == input.ExclusionCode ||
                    (this.ExclusionCode != null &&
                    this.ExclusionCode.Equals(input.ExclusionCode))
                ) && 
                (
                    this.ExclusionCodeDescription == input.ExclusionCodeDescription ||
                    (this.ExclusionCodeDescription != null &&
                    this.ExclusionCodeDescription.Equals(input.ExclusionCodeDescription))
                ) && 
                (
                    this.ReasonCode1 == input.ReasonCode1 ||
                    (this.ReasonCode1 != null &&
                    this.ReasonCode1.Equals(input.ReasonCode1))
                ) && 
                (
                    this.ReasonCodeDescription1 == input.ReasonCodeDescription1 ||
                    (this.ReasonCodeDescription1 != null &&
                    this.ReasonCodeDescription1.Equals(input.ReasonCodeDescription1))
                ) && 
                (
                    this.ReasonCode2 == input.ReasonCode2 ||
                    (this.ReasonCode2 != null &&
                    this.ReasonCode2.Equals(input.ReasonCode2))
                ) && 
                (
                    this.ReasonCodeDescription2 == input.ReasonCodeDescription2 ||
                    (this.ReasonCodeDescription2 != null &&
                    this.ReasonCodeDescription2.Equals(input.ReasonCodeDescription2))
                ) && 
                (
                    this.ReasonCode3 == input.ReasonCode3 ||
                    (this.ReasonCode3 != null &&
                    this.ReasonCode3.Equals(input.ReasonCode3))
                ) && 
                (
                    this.ReasonCodeDescription3 == input.ReasonCodeDescription3 ||
                    (this.ReasonCodeDescription3 != null &&
                    this.ReasonCodeDescription3.Equals(input.ReasonCodeDescription3))
                ) && 
                (
                    this.ReasonCode4 == input.ReasonCode4 ||
                    (this.ReasonCode4 != null &&
                    this.ReasonCode4.Equals(input.ReasonCode4))
                ) && 
                (
                    this.ReasonCodeDescription4 == input.ReasonCodeDescription4 ||
                    (this.ReasonCodeDescription4 != null &&
                    this.ReasonCodeDescription4.Equals(input.ReasonCodeDescription4))
                ) && 
                (
                    this.ExpansionScore == input.ExpansionScore ||
                    (this.ExpansionScore != null &&
                    this.ExpansionScore.Equals(input.ExpansionScore))
                ) && 
                (
                    this.ExpansionScoreDescription == input.ExpansionScoreDescription ||
                    (this.ExpansionScoreDescription != null &&
                    this.ExpansionScoreDescription.Equals(input.ExpansionScoreDescription))
                ) && 
                (
                    this.SubscriberNo == input.SubscriberNo ||
                    (this.SubscriberNo != null &&
                    this.SubscriberNo.Equals(input.SubscriberNo))
                ) && 
                (
                    this.EmpiricaType == input.EmpiricaType ||
                    (this.EmpiricaType != null &&
                    this.EmpiricaType.Equals(input.EmpiricaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.EmpiricaScore != null)
                    hashCode = hashCode * 59 + this.EmpiricaScore.GetHashCode();
                if (this.ScoreIndicator != null)
                    hashCode = hashCode * 59 + this.ScoreIndicator.GetHashCode();
                if (this.DateofBirth != null)
                    hashCode = hashCode * 59 + this.DateofBirth.GetHashCode();
                if (this.ExclusionCode != null)
                    hashCode = hashCode * 59 + this.ExclusionCode.GetHashCode();
                if (this.ExclusionCodeDescription != null)
                    hashCode = hashCode * 59 + this.ExclusionCodeDescription.GetHashCode();
                if (this.ReasonCode1 != null)
                    hashCode = hashCode * 59 + this.ReasonCode1.GetHashCode();
                if (this.ReasonCodeDescription1 != null)
                    hashCode = hashCode * 59 + this.ReasonCodeDescription1.GetHashCode();
                if (this.ReasonCode2 != null)
                    hashCode = hashCode * 59 + this.ReasonCode2.GetHashCode();
                if (this.ReasonCodeDescription2 != null)
                    hashCode = hashCode * 59 + this.ReasonCodeDescription2.GetHashCode();
                if (this.ReasonCode3 != null)
                    hashCode = hashCode * 59 + this.ReasonCode3.GetHashCode();
                if (this.ReasonCodeDescription3 != null)
                    hashCode = hashCode * 59 + this.ReasonCodeDescription3.GetHashCode();
                if (this.ReasonCode4 != null)
                    hashCode = hashCode * 59 + this.ReasonCode4.GetHashCode();
                if (this.ReasonCodeDescription4 != null)
                    hashCode = hashCode * 59 + this.ReasonCodeDescription4.GetHashCode();
                if (this.ExpansionScore != null)
                    hashCode = hashCode * 59 + this.ExpansionScore.GetHashCode();
                if (this.ExpansionScoreDescription != null)
                    hashCode = hashCode * 59 + this.ExpansionScoreDescription.GetHashCode();
                if (this.SubscriberNo != null)
                    hashCode = hashCode * 59 + this.SubscriberNo.GetHashCode();
                if (this.EmpiricaType != null)
                    hashCode = hashCode * 59 + this.EmpiricaType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
