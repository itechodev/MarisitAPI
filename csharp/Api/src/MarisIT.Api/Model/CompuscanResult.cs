/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanResult
    /// </summary>
    [DataContract]
    public partial class CompuscanResult :  IEquatable<CompuscanResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanResult" /> class.
        /// </summary>
        /// <param name="resultType">resultType.</param>
        /// <param name="score">score.</param>
        /// <param name="reasons">reasons.</param>
        public CompuscanResult(string resultType = default(string), string score = default(string), CompuscanReasons reasons = default(CompuscanReasons))
        {
            this.ResultType = resultType;
            this.Score = score;
            this.ResultType = resultType;
            this.Score = score;
            this.Reasons = reasons;
        }

        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [DataMember(Name="resultType", EmitDefaultValue=true)]
        public string ResultType { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=true)]
        public string Score { get; set; }

        /// <summary>
        /// Gets or Sets Reasons
        /// </summary>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public CompuscanReasons Reasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanResult {\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanResult);
        }

        /// <summary>
        /// Returns true if CompuscanResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Reasons == input.Reasons ||
                    (this.Reasons != null &&
                    this.Reasons.Equals(input.Reasons))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Reasons != null)
                    hashCode = hashCode * 59 + this.Reasons.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
