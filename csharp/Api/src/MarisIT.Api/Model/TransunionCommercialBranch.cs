/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialBranch
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialBranch :  IEquatable<TransunionCommercialBranch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialBranch" /> class.
        /// </summary>
        /// <param name="sgIndex">sgIndex.</param>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="dunsNo">dunsNo.</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        /// <param name="physicalSuburb">physicalSuburb.</param>
        /// <param name="physicalTown">physicalTown.</param>
        /// <param name="physicalCountry">physicalCountry.</param>
        /// <param name="physicalPostCode">physicalPostCode.</param>
        /// <param name="postBox">postBox.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="faxNumber">faxNumber.</param>
        /// <param name="website">website.</param>
        /// <param name="email">email.</param>
        public TransunionCommercialBranch(string sgIndex = default(string), string majorProduct = default(string), string dunsNo = default(string), string physicalAddress = default(string), string physicalSuburb = default(string), string physicalTown = default(string), string physicalCountry = default(string), string physicalPostCode = default(string), string postBox = default(string), string phoneNumber = default(string), string faxNumber = default(string), string website = default(string), string email = default(string))
        {
            this.SgIndex = sgIndex;
            this.MajorProduct = majorProduct;
            this.DunsNo = dunsNo;
            this.PhysicalAddress = physicalAddress;
            this.PhysicalSuburb = physicalSuburb;
            this.PhysicalTown = physicalTown;
            this.PhysicalCountry = physicalCountry;
            this.PhysicalPostCode = physicalPostCode;
            this.PostBox = postBox;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.Website = website;
            this.Email = email;
            this.SgIndex = sgIndex;
            this.MajorProduct = majorProduct;
            this.DunsNo = dunsNo;
            this.PhysicalAddress = physicalAddress;
            this.PhysicalSuburb = physicalSuburb;
            this.PhysicalTown = physicalTown;
            this.PhysicalCountry = physicalCountry;
            this.PhysicalPostCode = physicalPostCode;
            this.PostBox = postBox;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.Website = website;
            this.Email = email;
        }

        /// <summary>
        /// Gets or Sets SgIndex
        /// </summary>
        [DataMember(Name="sgIndex", EmitDefaultValue=true)]
        public string SgIndex { get; set; }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets DunsNo
        /// </summary>
        [DataMember(Name="dunsNo", EmitDefaultValue=true)]
        public string DunsNo { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name="physicalAddress", EmitDefaultValue=true)]
        public string PhysicalAddress { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalSuburb
        /// </summary>
        [DataMember(Name="physicalSuburb", EmitDefaultValue=true)]
        public string PhysicalSuburb { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalTown
        /// </summary>
        [DataMember(Name="physicalTown", EmitDefaultValue=true)]
        public string PhysicalTown { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalCountry
        /// </summary>
        [DataMember(Name="physicalCountry", EmitDefaultValue=true)]
        public string PhysicalCountry { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalPostCode
        /// </summary>
        [DataMember(Name="physicalPostCode", EmitDefaultValue=true)]
        public string PhysicalPostCode { get; set; }

        /// <summary>
        /// Gets or Sets PostBox
        /// </summary>
        [DataMember(Name="postBox", EmitDefaultValue=true)]
        public string PostBox { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name="faxNumber", EmitDefaultValue=true)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialBranch {\n");
            sb.Append("  SgIndex: ").Append(SgIndex).Append("\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  DunsNo: ").Append(DunsNo).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("  PhysicalSuburb: ").Append(PhysicalSuburb).Append("\n");
            sb.Append("  PhysicalTown: ").Append(PhysicalTown).Append("\n");
            sb.Append("  PhysicalCountry: ").Append(PhysicalCountry).Append("\n");
            sb.Append("  PhysicalPostCode: ").Append(PhysicalPostCode).Append("\n");
            sb.Append("  PostBox: ").Append(PostBox).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialBranch);
        }

        /// <summary>
        /// Returns true if TransunionCommercialBranch instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialBranch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialBranch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SgIndex == input.SgIndex ||
                    (this.SgIndex != null &&
                    this.SgIndex.Equals(input.SgIndex))
                ) && 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.DunsNo == input.DunsNo ||
                    (this.DunsNo != null &&
                    this.DunsNo.Equals(input.DunsNo))
                ) && 
                (
                    this.PhysicalAddress == input.PhysicalAddress ||
                    (this.PhysicalAddress != null &&
                    this.PhysicalAddress.Equals(input.PhysicalAddress))
                ) && 
                (
                    this.PhysicalSuburb == input.PhysicalSuburb ||
                    (this.PhysicalSuburb != null &&
                    this.PhysicalSuburb.Equals(input.PhysicalSuburb))
                ) && 
                (
                    this.PhysicalTown == input.PhysicalTown ||
                    (this.PhysicalTown != null &&
                    this.PhysicalTown.Equals(input.PhysicalTown))
                ) && 
                (
                    this.PhysicalCountry == input.PhysicalCountry ||
                    (this.PhysicalCountry != null &&
                    this.PhysicalCountry.Equals(input.PhysicalCountry))
                ) && 
                (
                    this.PhysicalPostCode == input.PhysicalPostCode ||
                    (this.PhysicalPostCode != null &&
                    this.PhysicalPostCode.Equals(input.PhysicalPostCode))
                ) && 
                (
                    this.PostBox == input.PostBox ||
                    (this.PostBox != null &&
                    this.PostBox.Equals(input.PostBox))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SgIndex != null)
                    hashCode = hashCode * 59 + this.SgIndex.GetHashCode();
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.DunsNo != null)
                    hashCode = hashCode * 59 + this.DunsNo.GetHashCode();
                if (this.PhysicalAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalAddress.GetHashCode();
                if (this.PhysicalSuburb != null)
                    hashCode = hashCode * 59 + this.PhysicalSuburb.GetHashCode();
                if (this.PhysicalTown != null)
                    hashCode = hashCode * 59 + this.PhysicalTown.GetHashCode();
                if (this.PhysicalCountry != null)
                    hashCode = hashCode * 59 + this.PhysicalCountry.GetHashCode();
                if (this.PhysicalPostCode != null)
                    hashCode = hashCode * 59 + this.PhysicalPostCode.GetHashCode();
                if (this.PostBox != null)
                    hashCode = hashCode * 59 + this.PostBox.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
