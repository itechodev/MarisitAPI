/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPPROPDETAILS
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPPROPDETAILS :  IEquatable<CompuscanCOMPPROPDETAILS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPPROPDETAILS" /> class.
        /// </summary>
        /// <param name="activeindicator">activeindicator.</param>
        /// <param name="erfno">erfno.</param>
        /// <param name="propertyid">propertyid.</param>
        /// <param name="purchasedate">purchasedate.</param>
        /// <param name="purchprice">purchprice.</param>
        /// <param name="regd">regd.</param>
        /// <param name="registrationdate">registrationdate.</param>
        /// <param name="titledeedno">titledeedno.</param>
        /// <param name="titleshare">titleshare.</param>
        public CompuscanCOMPPROPDETAILS(string activeindicator = default(string), string erfno = default(string), string propertyid = default(string), string purchasedate = default(string), string purchprice = default(string), string regd = default(string), string registrationdate = default(string), string titledeedno = default(string), string titleshare = default(string))
        {
            this.Activeindicator = activeindicator;
            this.Erfno = erfno;
            this.Propertyid = propertyid;
            this.Purchasedate = purchasedate;
            this.Purchprice = purchprice;
            this.Regd = regd;
            this.Registrationdate = registrationdate;
            this.Titledeedno = titledeedno;
            this.Titleshare = titleshare;
            this.Activeindicator = activeindicator;
            this.Erfno = erfno;
            this.Propertyid = propertyid;
            this.Purchasedate = purchasedate;
            this.Purchprice = purchprice;
            this.Regd = regd;
            this.Registrationdate = registrationdate;
            this.Titledeedno = titledeedno;
            this.Titleshare = titleshare;
        }

        /// <summary>
        /// Gets or Sets Activeindicator
        /// </summary>
        [DataMember(Name="activeindicator", EmitDefaultValue=true)]
        public string Activeindicator { get; set; }

        /// <summary>
        /// Gets or Sets Erfno
        /// </summary>
        [DataMember(Name="erfno", EmitDefaultValue=true)]
        public string Erfno { get; set; }

        /// <summary>
        /// Gets or Sets Propertyid
        /// </summary>
        [DataMember(Name="propertyid", EmitDefaultValue=true)]
        public string Propertyid { get; set; }

        /// <summary>
        /// Gets or Sets Purchasedate
        /// </summary>
        [DataMember(Name="purchasedate", EmitDefaultValue=true)]
        public string Purchasedate { get; set; }

        /// <summary>
        /// Gets or Sets Purchprice
        /// </summary>
        [DataMember(Name="purchprice", EmitDefaultValue=true)]
        public string Purchprice { get; set; }

        /// <summary>
        /// Gets or Sets Regd
        /// </summary>
        [DataMember(Name="regd", EmitDefaultValue=true)]
        public string Regd { get; set; }

        /// <summary>
        /// Gets or Sets Registrationdate
        /// </summary>
        [DataMember(Name="registrationdate", EmitDefaultValue=true)]
        public string Registrationdate { get; set; }

        /// <summary>
        /// Gets or Sets Titledeedno
        /// </summary>
        [DataMember(Name="titledeedno", EmitDefaultValue=true)]
        public string Titledeedno { get; set; }

        /// <summary>
        /// Gets or Sets Titleshare
        /// </summary>
        [DataMember(Name="titleshare", EmitDefaultValue=true)]
        public string Titleshare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPPROPDETAILS {\n");
            sb.Append("  Activeindicator: ").Append(Activeindicator).Append("\n");
            sb.Append("  Erfno: ").Append(Erfno).Append("\n");
            sb.Append("  Propertyid: ").Append(Propertyid).Append("\n");
            sb.Append("  Purchasedate: ").Append(Purchasedate).Append("\n");
            sb.Append("  Purchprice: ").Append(Purchprice).Append("\n");
            sb.Append("  Regd: ").Append(Regd).Append("\n");
            sb.Append("  Registrationdate: ").Append(Registrationdate).Append("\n");
            sb.Append("  Titledeedno: ").Append(Titledeedno).Append("\n");
            sb.Append("  Titleshare: ").Append(Titleshare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPPROPDETAILS);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPPROPDETAILS instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPPROPDETAILS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPPROPDETAILS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activeindicator == input.Activeindicator ||
                    (this.Activeindicator != null &&
                    this.Activeindicator.Equals(input.Activeindicator))
                ) && 
                (
                    this.Erfno == input.Erfno ||
                    (this.Erfno != null &&
                    this.Erfno.Equals(input.Erfno))
                ) && 
                (
                    this.Propertyid == input.Propertyid ||
                    (this.Propertyid != null &&
                    this.Propertyid.Equals(input.Propertyid))
                ) && 
                (
                    this.Purchasedate == input.Purchasedate ||
                    (this.Purchasedate != null &&
                    this.Purchasedate.Equals(input.Purchasedate))
                ) && 
                (
                    this.Purchprice == input.Purchprice ||
                    (this.Purchprice != null &&
                    this.Purchprice.Equals(input.Purchprice))
                ) && 
                (
                    this.Regd == input.Regd ||
                    (this.Regd != null &&
                    this.Regd.Equals(input.Regd))
                ) && 
                (
                    this.Registrationdate == input.Registrationdate ||
                    (this.Registrationdate != null &&
                    this.Registrationdate.Equals(input.Registrationdate))
                ) && 
                (
                    this.Titledeedno == input.Titledeedno ||
                    (this.Titledeedno != null &&
                    this.Titledeedno.Equals(input.Titledeedno))
                ) && 
                (
                    this.Titleshare == input.Titleshare ||
                    (this.Titleshare != null &&
                    this.Titleshare.Equals(input.Titleshare))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activeindicator != null)
                    hashCode = hashCode * 59 + this.Activeindicator.GetHashCode();
                if (this.Erfno != null)
                    hashCode = hashCode * 59 + this.Erfno.GetHashCode();
                if (this.Propertyid != null)
                    hashCode = hashCode * 59 + this.Propertyid.GetHashCode();
                if (this.Purchasedate != null)
                    hashCode = hashCode * 59 + this.Purchasedate.GetHashCode();
                if (this.Purchprice != null)
                    hashCode = hashCode * 59 + this.Purchprice.GetHashCode();
                if (this.Regd != null)
                    hashCode = hashCode * 59 + this.Regd.GetHashCode();
                if (this.Registrationdate != null)
                    hashCode = hashCode * 59 + this.Registrationdate.GetHashCode();
                if (this.Titledeedno != null)
                    hashCode = hashCode * 59 + this.Titledeedno.GetHashCode();
                if (this.Titleshare != null)
                    hashCode = hashCode * 59 + this.Titleshare.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
