/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten
    /// </summary>
    [DataContract]
    public partial class WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten :  IEquatable<WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten" /> class.
        /// </summary>
        /// <param name="property">property.</param>
        /// <param name="municipalValuation">municipalValuation.</param>
        /// <param name="lastSale">lastSale.</param>
        /// <param name="propertyValuation">propertyValuation.</param>
        public WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten(WindeedLightstoneProxiesFarmOrFreeholdOrUnit property = default(WindeedLightstoneProxiesFarmOrFreeholdOrUnit), WindeedLightstoneMunicipalValuation municipalValuation = default(WindeedLightstoneMunicipalValuation), WindeedLightstoneLastSale lastSale = default(WindeedLightstoneLastSale), WindeedLightstoneValuation propertyValuation = default(WindeedLightstoneValuation))
        {
            this.Property = property;
            this.MunicipalValuation = municipalValuation;
            this.LastSale = lastSale;
            this.PropertyValuation = propertyValuation;
        }

        /// <summary>
        /// Gets or Sets SearchId
        /// </summary>
        [DataMember(Name="searchId", EmitDefaultValue=false)]
        public int SearchId { get; private set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public WindeedLightstoneProxiesFarmOrFreeholdOrUnit Property { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=true)]
        public List<WindeedLightstoneOwner> Owners { get; private set; }

        /// <summary>
        /// Gets or Sets SuburbSalesAmountGraph
        /// </summary>
        [DataMember(Name="suburbSalesAmountGraph", EmitDefaultValue=true)]
        public byte[] SuburbSalesAmountGraph { get; private set; }

        /// <summary>
        /// Gets or Sets SuburbSalesQuantityGraph
        /// </summary>
        [DataMember(Name="suburbSalesQuantityGraph", EmitDefaultValue=true)]
        public byte[] SuburbSalesQuantityGraph { get; private set; }

        /// <summary>
        /// Gets or Sets Map
        /// </summary>
        [DataMember(Name="map", EmitDefaultValue=true)]
        public byte[] Map { get; private set; }

        /// <summary>
        /// Gets or Sets AerialPhotograph
        /// </summary>
        [DataMember(Name="aerialPhotograph", EmitDefaultValue=true)]
        public byte[] AerialPhotograph { get; private set; }

        /// <summary>
        /// Gets or Sets GoogleMap
        /// </summary>
        [DataMember(Name="googleMap", EmitDefaultValue=true)]
        public byte[] GoogleMap { get; private set; }

        /// <summary>
        /// Gets or Sets ComparativeSales
        /// </summary>
        [DataMember(Name="comparativeSales", EmitDefaultValue=true)]
        public List<WindeedLightstoneProxiesComparativeSaleFarmOrFreeHoldOrUnit> ComparativeSales { get; private set; }

        /// <summary>
        /// Gets or Sets Bonds
        /// </summary>
        [DataMember(Name="bonds", EmitDefaultValue=true)]
        public List<WindeedLightstoneBond> Bonds { get; private set; }

        /// <summary>
        /// Gets or Sets MunicipalValuation
        /// </summary>
        [DataMember(Name="municipalValuation", EmitDefaultValue=false)]
        public WindeedLightstoneMunicipalValuation MunicipalValuation { get; set; }

        /// <summary>
        /// Gets or Sets Amenities
        /// </summary>
        [DataMember(Name="amenities", EmitDefaultValue=true)]
        public List<WindeedLightstoneAmenity> Amenities { get; private set; }

        /// <summary>
        /// Gets or Sets Transfers
        /// </summary>
        [DataMember(Name="transfers", EmitDefaultValue=true)]
        public List<WindeedLightstoneTransfer> Transfers { get; private set; }

        /// <summary>
        /// Gets or Sets LastSale
        /// </summary>
        [DataMember(Name="lastSale", EmitDefaultValue=false)]
        public WindeedLightstoneLastSale LastSale { get; set; }

        /// <summary>
        /// Gets or Sets PropertyValuation
        /// </summary>
        [DataMember(Name="propertyValuation", EmitDefaultValue=false)]
        public WindeedLightstoneValuation PropertyValuation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten {\n");
            sb.Append("  SearchId: ").Append(SearchId).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  SuburbSalesAmountGraph: ").Append(SuburbSalesAmountGraph).Append("\n");
            sb.Append("  SuburbSalesQuantityGraph: ").Append(SuburbSalesQuantityGraph).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  AerialPhotograph: ").Append(AerialPhotograph).Append("\n");
            sb.Append("  GoogleMap: ").Append(GoogleMap).Append("\n");
            sb.Append("  ComparativeSales: ").Append(ComparativeSales).Append("\n");
            sb.Append("  Bonds: ").Append(Bonds).Append("\n");
            sb.Append("  MunicipalValuation: ").Append(MunicipalValuation).Append("\n");
            sb.Append("  Amenities: ").Append(Amenities).Append("\n");
            sb.Append("  Transfers: ").Append(Transfers).Append("\n");
            sb.Append("  LastSale: ").Append(LastSale).Append("\n");
            sb.Append("  PropertyValuation: ").Append(PropertyValuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten);
        }

        /// <summary>
        /// Returns true if WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedLightstoneProxiesLightstoneValuationFullResponseFlatten input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchId == input.SearchId ||
                    (this.SearchId != null &&
                    this.SearchId.Equals(input.SearchId))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.SuburbSalesAmountGraph == input.SuburbSalesAmountGraph ||
                    (this.SuburbSalesAmountGraph != null &&
                    this.SuburbSalesAmountGraph.Equals(input.SuburbSalesAmountGraph))
                ) && 
                (
                    this.SuburbSalesQuantityGraph == input.SuburbSalesQuantityGraph ||
                    (this.SuburbSalesQuantityGraph != null &&
                    this.SuburbSalesQuantityGraph.Equals(input.SuburbSalesQuantityGraph))
                ) && 
                (
                    this.Map == input.Map ||
                    (this.Map != null &&
                    this.Map.Equals(input.Map))
                ) && 
                (
                    this.AerialPhotograph == input.AerialPhotograph ||
                    (this.AerialPhotograph != null &&
                    this.AerialPhotograph.Equals(input.AerialPhotograph))
                ) && 
                (
                    this.GoogleMap == input.GoogleMap ||
                    (this.GoogleMap != null &&
                    this.GoogleMap.Equals(input.GoogleMap))
                ) && 
                (
                    this.ComparativeSales == input.ComparativeSales ||
                    this.ComparativeSales != null &&
                    input.ComparativeSales != null &&
                    this.ComparativeSales.SequenceEqual(input.ComparativeSales)
                ) && 
                (
                    this.Bonds == input.Bonds ||
                    this.Bonds != null &&
                    input.Bonds != null &&
                    this.Bonds.SequenceEqual(input.Bonds)
                ) && 
                (
                    this.MunicipalValuation == input.MunicipalValuation ||
                    (this.MunicipalValuation != null &&
                    this.MunicipalValuation.Equals(input.MunicipalValuation))
                ) && 
                (
                    this.Amenities == input.Amenities ||
                    this.Amenities != null &&
                    input.Amenities != null &&
                    this.Amenities.SequenceEqual(input.Amenities)
                ) && 
                (
                    this.Transfers == input.Transfers ||
                    this.Transfers != null &&
                    input.Transfers != null &&
                    this.Transfers.SequenceEqual(input.Transfers)
                ) && 
                (
                    this.LastSale == input.LastSale ||
                    (this.LastSale != null &&
                    this.LastSale.Equals(input.LastSale))
                ) && 
                (
                    this.PropertyValuation == input.PropertyValuation ||
                    (this.PropertyValuation != null &&
                    this.PropertyValuation.Equals(input.PropertyValuation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchId != null)
                    hashCode = hashCode * 59 + this.SearchId.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                if (this.SuburbSalesAmountGraph != null)
                    hashCode = hashCode * 59 + this.SuburbSalesAmountGraph.GetHashCode();
                if (this.SuburbSalesQuantityGraph != null)
                    hashCode = hashCode * 59 + this.SuburbSalesQuantityGraph.GetHashCode();
                if (this.Map != null)
                    hashCode = hashCode * 59 + this.Map.GetHashCode();
                if (this.AerialPhotograph != null)
                    hashCode = hashCode * 59 + this.AerialPhotograph.GetHashCode();
                if (this.GoogleMap != null)
                    hashCode = hashCode * 59 + this.GoogleMap.GetHashCode();
                if (this.ComparativeSales != null)
                    hashCode = hashCode * 59 + this.ComparativeSales.GetHashCode();
                if (this.Bonds != null)
                    hashCode = hashCode * 59 + this.Bonds.GetHashCode();
                if (this.MunicipalValuation != null)
                    hashCode = hashCode * 59 + this.MunicipalValuation.GetHashCode();
                if (this.Amenities != null)
                    hashCode = hashCode * 59 + this.Amenities.GetHashCode();
                if (this.Transfers != null)
                    hashCode = hashCode * 59 + this.Transfers.GetHashCode();
                if (this.LastSale != null)
                    hashCode = hashCode * 59 + this.LastSale.GetHashCode();
                if (this.PropertyValuation != null)
                    hashCode = hashCode * 59 + this.PropertyValuation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
