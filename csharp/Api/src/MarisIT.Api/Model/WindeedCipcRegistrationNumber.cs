/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcRegistrationNumber
    /// </summary>
    [DataContract]
    public partial class WindeedCipcRegistrationNumber :  IEquatable<WindeedCipcRegistrationNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcRegistrationNumber" /> class.
        /// </summary>
        /// <param name="prefix">prefix.</param>
        /// <param name="uniqueRegNumber">uniqueRegNumber.</param>
        /// <param name="fullRegNumber">fullRegNumber.</param>
        /// <param name="regNumber">regNumber.</param>
        public WindeedCipcRegistrationNumber(string prefix = default(string), string uniqueRegNumber = default(string), string fullRegNumber = default(string), string regNumber = default(string))
        {
            this.Prefix = prefix;
            this.UniqueRegNumber = uniqueRegNumber;
            this.FullRegNumber = fullRegNumber;
            this.RegNumber = regNumber;
            this.Prefix = prefix;
            this.UniqueRegNumber = uniqueRegNumber;
            this.FullRegNumber = fullRegNumber;
            this.RegNumber = regNumber;
        }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=true)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets UniqueRegNumber
        /// </summary>
        [DataMember(Name="uniqueRegNumber", EmitDefaultValue=true)]
        public string UniqueRegNumber { get; set; }

        /// <summary>
        /// Gets or Sets FullRegNumber
        /// </summary>
        [DataMember(Name="fullRegNumber", EmitDefaultValue=true)]
        public string FullRegNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegNumber
        /// </summary>
        [DataMember(Name="regNumber", EmitDefaultValue=true)]
        public string RegNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcRegistrationNumber {\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  UniqueRegNumber: ").Append(UniqueRegNumber).Append("\n");
            sb.Append("  FullRegNumber: ").Append(FullRegNumber).Append("\n");
            sb.Append("  RegNumber: ").Append(RegNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcRegistrationNumber);
        }

        /// <summary>
        /// Returns true if WindeedCipcRegistrationNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcRegistrationNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcRegistrationNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.UniqueRegNumber == input.UniqueRegNumber ||
                    (this.UniqueRegNumber != null &&
                    this.UniqueRegNumber.Equals(input.UniqueRegNumber))
                ) && 
                (
                    this.FullRegNumber == input.FullRegNumber ||
                    (this.FullRegNumber != null &&
                    this.FullRegNumber.Equals(input.FullRegNumber))
                ) && 
                (
                    this.RegNumber == input.RegNumber ||
                    (this.RegNumber != null &&
                    this.RegNumber.Equals(input.RegNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.UniqueRegNumber != null)
                    hashCode = hashCode * 59 + this.UniqueRegNumber.GetHashCode();
                if (this.FullRegNumber != null)
                    hashCode = hashCode * 59 + this.FullRegNumber.GetHashCode();
                if (this.RegNumber != null)
                    hashCode = hashCode * 59 + this.RegNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
