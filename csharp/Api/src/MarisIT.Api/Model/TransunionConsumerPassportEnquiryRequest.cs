/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumerPassportEnquiryRequest
    /// </summary>
    [DataContract]
    public partial class TransunionConsumerPassportEnquiryRequest :  IEquatable<TransunionConsumerPassportEnquiryRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name="purpose", EmitDefaultValue=true)]
        public WebDatabaseTablesTUPurposes Purpose { get; set; }
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=true)]
        public Gender Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumerPassportEnquiryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransunionConsumerPassportEnquiryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumerPassportEnquiryRequest" /> class.
        /// </summary>
        /// <param name="purpose">purpose (required).</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="surname">surname (required).</param>
        /// <param name="passport">passport (required).</param>
        /// <param name="reference">reference.</param>
        /// <param name="concent">concent (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        /// <param name="gender">gender (required).</param>
        public TransunionConsumerPassportEnquiryRequest(WebDatabaseTablesTUPurposes purpose = default(WebDatabaseTablesTUPurposes), string firstName = default(string), string surname = default(string), string passport = default(string), string reference = default(string), bool concent = default(bool), DateTime dateOfBirth = default(DateTime), Gender gender = default(Gender))
        {
            // to ensure "purpose" is required (not null)
            if (purpose == null)
            {
                throw new InvalidDataException("purpose is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.Purpose = purpose;
            }

            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }

            // to ensure "surname" is required (not null)
            if (surname == null)
            {
                throw new InvalidDataException("surname is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.Surname = surname;
            }

            // to ensure "passport" is required (not null)
            if (passport == null)
            {
                throw new InvalidDataException("passport is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.Passport = passport;
            }

            this.Reference = reference;
            // to ensure "concent" is required (not null)
            if (concent == null)
            {
                throw new InvalidDataException("concent is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.Concent = concent;
            }

            // to ensure "dateOfBirth" is required (not null)
            if (dateOfBirth == null)
            {
                throw new InvalidDataException("dateOfBirth is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.DateOfBirth = dateOfBirth;
            }

            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new InvalidDataException("gender is a required property for TransunionConsumerPassportEnquiryRequest and cannot be null");
            }
            else
            {
                this.Gender = gender;
            }

            this.Reference = reference;
        }


        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Passport
        /// </summary>
        [DataMember(Name="passport", EmitDefaultValue=true)]
        public string Passport { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Concent
        /// </summary>
        [DataMember(Name="concent", EmitDefaultValue=true)]
        public bool Concent { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public DateTime DateOfBirth { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumerPassportEnquiryRequest {\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Passport: ").Append(Passport).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Concent: ").Append(Concent).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumerPassportEnquiryRequest);
        }

        /// <summary>
        /// Returns true if TransunionConsumerPassportEnquiryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumerPassportEnquiryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumerPassportEnquiryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Passport == input.Passport ||
                    (this.Passport != null &&
                    this.Passport.Equals(input.Passport))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Concent == input.Concent ||
                    (this.Concent != null &&
                    this.Concent.Equals(input.Concent))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Passport != null)
                    hashCode = hashCode * 59 + this.Passport.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Concent != null)
                    hashCode = hashCode * 59 + this.Concent.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
