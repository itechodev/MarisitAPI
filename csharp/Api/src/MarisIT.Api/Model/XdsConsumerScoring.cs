/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerScoring
    /// </summary>
    [DataContract]
    public partial class XdsConsumerScoring :  IEquatable<XdsConsumerScoring>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerScoring" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="exceptionCode">exceptionCode.</param>
        /// <param name="finalScore">finalScore.</param>
        /// <param name="modelID">modelID.</param>
        /// <param name="reasonCode1">reasonCode1.</param>
        /// <param name="reasonCode2">reasonCode2.</param>
        /// <param name="reasonCode3">reasonCode3.</param>
        /// <param name="riskCategory">riskCategory.</param>
        /// <param name="scoreDate">scoreDate.</param>
        /// <param name="subscriberID">subscriberID.</param>
        /// <param name="uniqueIdentifier">uniqueIdentifier.</param>
        /// <param name="classification">classification.</param>
        public XdsConsumerScoring(string description = default(string), string displayText = default(string), string exceptionCode = default(string), string finalScore = default(string), string modelID = default(string), string reasonCode1 = default(string), string reasonCode2 = default(string), string reasonCode3 = default(string), string riskCategory = default(string), string scoreDate = default(string), string subscriberID = default(string), string uniqueIdentifier = default(string), string classification = default(string))
        {
            this.Description = description;
            this.DisplayText = displayText;
            this.ExceptionCode = exceptionCode;
            this.FinalScore = finalScore;
            this.ModelID = modelID;
            this.ReasonCode1 = reasonCode1;
            this.ReasonCode2 = reasonCode2;
            this.ReasonCode3 = reasonCode3;
            this.RiskCategory = riskCategory;
            this.ScoreDate = scoreDate;
            this.SubscriberID = subscriberID;
            this.UniqueIdentifier = uniqueIdentifier;
            this.Classification = classification;
            this.Description = description;
            this.DisplayText = displayText;
            this.ExceptionCode = exceptionCode;
            this.FinalScore = finalScore;
            this.ModelID = modelID;
            this.ReasonCode1 = reasonCode1;
            this.ReasonCode2 = reasonCode2;
            this.ReasonCode3 = reasonCode3;
            this.RiskCategory = riskCategory;
            this.ScoreDate = scoreDate;
            this.SubscriberID = subscriberID;
            this.UniqueIdentifier = uniqueIdentifier;
            this.Classification = classification;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets ExceptionCode
        /// </summary>
        [DataMember(Name="exceptionCode", EmitDefaultValue=true)]
        public string ExceptionCode { get; set; }

        /// <summary>
        /// Gets or Sets FinalScore
        /// </summary>
        [DataMember(Name="finalScore", EmitDefaultValue=true)]
        public string FinalScore { get; set; }

        /// <summary>
        /// Gets or Sets ModelID
        /// </summary>
        [DataMember(Name="modelID", EmitDefaultValue=true)]
        public string ModelID { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode1
        /// </summary>
        [DataMember(Name="reasonCode1", EmitDefaultValue=true)]
        public string ReasonCode1 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode2
        /// </summary>
        [DataMember(Name="reasonCode2", EmitDefaultValue=true)]
        public string ReasonCode2 { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode3
        /// </summary>
        [DataMember(Name="reasonCode3", EmitDefaultValue=true)]
        public string ReasonCode3 { get; set; }

        /// <summary>
        /// Gets or Sets RiskCategory
        /// </summary>
        [DataMember(Name="riskCategory", EmitDefaultValue=true)]
        public string RiskCategory { get; set; }

        /// <summary>
        /// Gets or Sets ScoreDate
        /// </summary>
        [DataMember(Name="scoreDate", EmitDefaultValue=true)]
        public string ScoreDate { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberID
        /// </summary>
        [DataMember(Name="subscriberID", EmitDefaultValue=true)]
        public string SubscriberID { get; set; }

        /// <summary>
        /// Gets or Sets UniqueIdentifier
        /// </summary>
        [DataMember(Name="uniqueIdentifier", EmitDefaultValue=true)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [DataMember(Name="classification", EmitDefaultValue=true)]
        public string Classification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerScoring {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  ExceptionCode: ").Append(ExceptionCode).Append("\n");
            sb.Append("  FinalScore: ").Append(FinalScore).Append("\n");
            sb.Append("  ModelID: ").Append(ModelID).Append("\n");
            sb.Append("  ReasonCode1: ").Append(ReasonCode1).Append("\n");
            sb.Append("  ReasonCode2: ").Append(ReasonCode2).Append("\n");
            sb.Append("  ReasonCode3: ").Append(ReasonCode3).Append("\n");
            sb.Append("  RiskCategory: ").Append(RiskCategory).Append("\n");
            sb.Append("  ScoreDate: ").Append(ScoreDate).Append("\n");
            sb.Append("  SubscriberID: ").Append(SubscriberID).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerScoring);
        }

        /// <summary>
        /// Returns true if XdsConsumerScoring instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerScoring to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerScoring input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.ExceptionCode == input.ExceptionCode ||
                    (this.ExceptionCode != null &&
                    this.ExceptionCode.Equals(input.ExceptionCode))
                ) && 
                (
                    this.FinalScore == input.FinalScore ||
                    (this.FinalScore != null &&
                    this.FinalScore.Equals(input.FinalScore))
                ) && 
                (
                    this.ModelID == input.ModelID ||
                    (this.ModelID != null &&
                    this.ModelID.Equals(input.ModelID))
                ) && 
                (
                    this.ReasonCode1 == input.ReasonCode1 ||
                    (this.ReasonCode1 != null &&
                    this.ReasonCode1.Equals(input.ReasonCode1))
                ) && 
                (
                    this.ReasonCode2 == input.ReasonCode2 ||
                    (this.ReasonCode2 != null &&
                    this.ReasonCode2.Equals(input.ReasonCode2))
                ) && 
                (
                    this.ReasonCode3 == input.ReasonCode3 ||
                    (this.ReasonCode3 != null &&
                    this.ReasonCode3.Equals(input.ReasonCode3))
                ) && 
                (
                    this.RiskCategory == input.RiskCategory ||
                    (this.RiskCategory != null &&
                    this.RiskCategory.Equals(input.RiskCategory))
                ) && 
                (
                    this.ScoreDate == input.ScoreDate ||
                    (this.ScoreDate != null &&
                    this.ScoreDate.Equals(input.ScoreDate))
                ) && 
                (
                    this.SubscriberID == input.SubscriberID ||
                    (this.SubscriberID != null &&
                    this.SubscriberID.Equals(input.SubscriberID))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.ExceptionCode != null)
                    hashCode = hashCode * 59 + this.ExceptionCode.GetHashCode();
                if (this.FinalScore != null)
                    hashCode = hashCode * 59 + this.FinalScore.GetHashCode();
                if (this.ModelID != null)
                    hashCode = hashCode * 59 + this.ModelID.GetHashCode();
                if (this.ReasonCode1 != null)
                    hashCode = hashCode * 59 + this.ReasonCode1.GetHashCode();
                if (this.ReasonCode2 != null)
                    hashCode = hashCode * 59 + this.ReasonCode2.GetHashCode();
                if (this.ReasonCode3 != null)
                    hashCode = hashCode * 59 + this.ReasonCode3.GetHashCode();
                if (this.RiskCategory != null)
                    hashCode = hashCode * 59 + this.RiskCategory.GetHashCode();
                if (this.ScoreDate != null)
                    hashCode = hashCode * 59 + this.ScoreDate.GetHashCode();
                if (this.SubscriberID != null)
                    hashCode = hashCode * 59 + this.SubscriberID.GetHashCode();
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
