/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPBANKERS
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPBANKERS :  IEquatable<CompuscanCOMPBANKERS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPBANKERS" /> class.
        /// </summary>
        /// <param name="accountname">accountname.</param>
        /// <param name="accountno">accountno.</param>
        /// <param name="accounttype">accounttype.</param>
        /// <param name="amountrequested">amountrequested.</param>
        /// <param name="bank">bank.</param>
        /// <param name="bankerscomment">bankerscomment.</param>
        /// <param name="bankcode">bankcode.</param>
        /// <param name="bankcodedesc">bankcodedesc.</param>
        /// <param name="branchcode">branchcode.</param>
        /// <param name="branchname">branchname.</param>
        /// <param name="comments">comments.</param>
        /// <param name="createdby">createdby.</param>
        /// <param name="createddttm">createddttm.</param>
        /// <param name="dateaccopened">dateaccopened.</param>
        /// <param name="datelastdefault">datelastdefault.</param>
        /// <param name="defaultsrecorded">defaultsrecorded.</param>
        /// <param name="modifiedby">modifiedby.</param>
        /// <param name="modifieddttm">modifieddttm.</param>
        /// <param name="termsrequested">termsrequested.</param>
        public CompuscanCOMPBANKERS(string accountname = default(string), string accountno = default(string), string accounttype = default(string), string amountrequested = default(string), string bank = default(string), string bankerscomment = default(string), string bankcode = default(string), string bankcodedesc = default(string), string branchcode = default(string), string branchname = default(string), string comments = default(string), string createdby = default(string), string createddttm = default(string), string dateaccopened = default(string), string datelastdefault = default(string), string defaultsrecorded = default(string), string modifiedby = default(string), string modifieddttm = default(string), string termsrequested = default(string))
        {
            this.Accountname = accountname;
            this.Accountno = accountno;
            this.Accounttype = accounttype;
            this.Amountrequested = amountrequested;
            this.Bank = bank;
            this.Bankerscomment = bankerscomment;
            this.Bankcode = bankcode;
            this.Bankcodedesc = bankcodedesc;
            this.Branchcode = branchcode;
            this.Branchname = branchname;
            this.Comments = comments;
            this.Createdby = createdby;
            this.Createddttm = createddttm;
            this.Dateaccopened = dateaccopened;
            this.Datelastdefault = datelastdefault;
            this.Defaultsrecorded = defaultsrecorded;
            this.Modifiedby = modifiedby;
            this.Modifieddttm = modifieddttm;
            this.Termsrequested = termsrequested;
            this.Accountname = accountname;
            this.Accountno = accountno;
            this.Accounttype = accounttype;
            this.Amountrequested = amountrequested;
            this.Bank = bank;
            this.Bankerscomment = bankerscomment;
            this.Bankcode = bankcode;
            this.Bankcodedesc = bankcodedesc;
            this.Branchcode = branchcode;
            this.Branchname = branchname;
            this.Comments = comments;
            this.Createdby = createdby;
            this.Createddttm = createddttm;
            this.Dateaccopened = dateaccopened;
            this.Datelastdefault = datelastdefault;
            this.Defaultsrecorded = defaultsrecorded;
            this.Modifiedby = modifiedby;
            this.Modifieddttm = modifieddttm;
            this.Termsrequested = termsrequested;
        }

        /// <summary>
        /// Gets or Sets Accountname
        /// </summary>
        [DataMember(Name="accountname", EmitDefaultValue=true)]
        public string Accountname { get; set; }

        /// <summary>
        /// Gets or Sets Accountno
        /// </summary>
        [DataMember(Name="accountno", EmitDefaultValue=true)]
        public string Accountno { get; set; }

        /// <summary>
        /// Gets or Sets Accounttype
        /// </summary>
        [DataMember(Name="accounttype", EmitDefaultValue=true)]
        public string Accounttype { get; set; }

        /// <summary>
        /// Gets or Sets Amountrequested
        /// </summary>
        [DataMember(Name="amountrequested", EmitDefaultValue=true)]
        public string Amountrequested { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=true)]
        public string Bank { get; set; }

        /// <summary>
        /// Gets or Sets Bankerscomment
        /// </summary>
        [DataMember(Name="bankerscomment", EmitDefaultValue=true)]
        public string Bankerscomment { get; set; }

        /// <summary>
        /// Gets or Sets Bankcode
        /// </summary>
        [DataMember(Name="bankcode", EmitDefaultValue=true)]
        public string Bankcode { get; set; }

        /// <summary>
        /// Gets or Sets Bankcodedesc
        /// </summary>
        [DataMember(Name="bankcodedesc", EmitDefaultValue=true)]
        public string Bankcodedesc { get; set; }

        /// <summary>
        /// Gets or Sets Branchcode
        /// </summary>
        [DataMember(Name="branchcode", EmitDefaultValue=true)]
        public string Branchcode { get; set; }

        /// <summary>
        /// Gets or Sets Branchname
        /// </summary>
        [DataMember(Name="branchname", EmitDefaultValue=true)]
        public string Branchname { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Createdby
        /// </summary>
        [DataMember(Name="createdby", EmitDefaultValue=true)]
        public string Createdby { get; set; }

        /// <summary>
        /// Gets or Sets Createddttm
        /// </summary>
        [DataMember(Name="createddttm", EmitDefaultValue=true)]
        public string Createddttm { get; set; }

        /// <summary>
        /// Gets or Sets Dateaccopened
        /// </summary>
        [DataMember(Name="dateaccopened", EmitDefaultValue=true)]
        public string Dateaccopened { get; set; }

        /// <summary>
        /// Gets or Sets Datelastdefault
        /// </summary>
        [DataMember(Name="datelastdefault", EmitDefaultValue=true)]
        public string Datelastdefault { get; set; }

        /// <summary>
        /// Gets or Sets Defaultsrecorded
        /// </summary>
        [DataMember(Name="defaultsrecorded", EmitDefaultValue=true)]
        public string Defaultsrecorded { get; set; }

        /// <summary>
        /// Gets or Sets Modifiedby
        /// </summary>
        [DataMember(Name="modifiedby", EmitDefaultValue=true)]
        public string Modifiedby { get; set; }

        /// <summary>
        /// Gets or Sets Modifieddttm
        /// </summary>
        [DataMember(Name="modifieddttm", EmitDefaultValue=true)]
        public string Modifieddttm { get; set; }

        /// <summary>
        /// Gets or Sets Termsrequested
        /// </summary>
        [DataMember(Name="termsrequested", EmitDefaultValue=true)]
        public string Termsrequested { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPBANKERS {\n");
            sb.Append("  Accountname: ").Append(Accountname).Append("\n");
            sb.Append("  Accountno: ").Append(Accountno).Append("\n");
            sb.Append("  Accounttype: ").Append(Accounttype).Append("\n");
            sb.Append("  Amountrequested: ").Append(Amountrequested).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Bankerscomment: ").Append(Bankerscomment).Append("\n");
            sb.Append("  Bankcode: ").Append(Bankcode).Append("\n");
            sb.Append("  Bankcodedesc: ").Append(Bankcodedesc).Append("\n");
            sb.Append("  Branchcode: ").Append(Branchcode).Append("\n");
            sb.Append("  Branchname: ").Append(Branchname).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Createdby: ").Append(Createdby).Append("\n");
            sb.Append("  Createddttm: ").Append(Createddttm).Append("\n");
            sb.Append("  Dateaccopened: ").Append(Dateaccopened).Append("\n");
            sb.Append("  Datelastdefault: ").Append(Datelastdefault).Append("\n");
            sb.Append("  Defaultsrecorded: ").Append(Defaultsrecorded).Append("\n");
            sb.Append("  Modifiedby: ").Append(Modifiedby).Append("\n");
            sb.Append("  Modifieddttm: ").Append(Modifieddttm).Append("\n");
            sb.Append("  Termsrequested: ").Append(Termsrequested).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPBANKERS);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPBANKERS instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPBANKERS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPBANKERS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accountname == input.Accountname ||
                    (this.Accountname != null &&
                    this.Accountname.Equals(input.Accountname))
                ) && 
                (
                    this.Accountno == input.Accountno ||
                    (this.Accountno != null &&
                    this.Accountno.Equals(input.Accountno))
                ) && 
                (
                    this.Accounttype == input.Accounttype ||
                    (this.Accounttype != null &&
                    this.Accounttype.Equals(input.Accounttype))
                ) && 
                (
                    this.Amountrequested == input.Amountrequested ||
                    (this.Amountrequested != null &&
                    this.Amountrequested.Equals(input.Amountrequested))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Bankerscomment == input.Bankerscomment ||
                    (this.Bankerscomment != null &&
                    this.Bankerscomment.Equals(input.Bankerscomment))
                ) && 
                (
                    this.Bankcode == input.Bankcode ||
                    (this.Bankcode != null &&
                    this.Bankcode.Equals(input.Bankcode))
                ) && 
                (
                    this.Bankcodedesc == input.Bankcodedesc ||
                    (this.Bankcodedesc != null &&
                    this.Bankcodedesc.Equals(input.Bankcodedesc))
                ) && 
                (
                    this.Branchcode == input.Branchcode ||
                    (this.Branchcode != null &&
                    this.Branchcode.Equals(input.Branchcode))
                ) && 
                (
                    this.Branchname == input.Branchname ||
                    (this.Branchname != null &&
                    this.Branchname.Equals(input.Branchname))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Createdby == input.Createdby ||
                    (this.Createdby != null &&
                    this.Createdby.Equals(input.Createdby))
                ) && 
                (
                    this.Createddttm == input.Createddttm ||
                    (this.Createddttm != null &&
                    this.Createddttm.Equals(input.Createddttm))
                ) && 
                (
                    this.Dateaccopened == input.Dateaccopened ||
                    (this.Dateaccopened != null &&
                    this.Dateaccopened.Equals(input.Dateaccopened))
                ) && 
                (
                    this.Datelastdefault == input.Datelastdefault ||
                    (this.Datelastdefault != null &&
                    this.Datelastdefault.Equals(input.Datelastdefault))
                ) && 
                (
                    this.Defaultsrecorded == input.Defaultsrecorded ||
                    (this.Defaultsrecorded != null &&
                    this.Defaultsrecorded.Equals(input.Defaultsrecorded))
                ) && 
                (
                    this.Modifiedby == input.Modifiedby ||
                    (this.Modifiedby != null &&
                    this.Modifiedby.Equals(input.Modifiedby))
                ) && 
                (
                    this.Modifieddttm == input.Modifieddttm ||
                    (this.Modifieddttm != null &&
                    this.Modifieddttm.Equals(input.Modifieddttm))
                ) && 
                (
                    this.Termsrequested == input.Termsrequested ||
                    (this.Termsrequested != null &&
                    this.Termsrequested.Equals(input.Termsrequested))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accountname != null)
                    hashCode = hashCode * 59 + this.Accountname.GetHashCode();
                if (this.Accountno != null)
                    hashCode = hashCode * 59 + this.Accountno.GetHashCode();
                if (this.Accounttype != null)
                    hashCode = hashCode * 59 + this.Accounttype.GetHashCode();
                if (this.Amountrequested != null)
                    hashCode = hashCode * 59 + this.Amountrequested.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.Bankerscomment != null)
                    hashCode = hashCode * 59 + this.Bankerscomment.GetHashCode();
                if (this.Bankcode != null)
                    hashCode = hashCode * 59 + this.Bankcode.GetHashCode();
                if (this.Bankcodedesc != null)
                    hashCode = hashCode * 59 + this.Bankcodedesc.GetHashCode();
                if (this.Branchcode != null)
                    hashCode = hashCode * 59 + this.Branchcode.GetHashCode();
                if (this.Branchname != null)
                    hashCode = hashCode * 59 + this.Branchname.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Createdby != null)
                    hashCode = hashCode * 59 + this.Createdby.GetHashCode();
                if (this.Createddttm != null)
                    hashCode = hashCode * 59 + this.Createddttm.GetHashCode();
                if (this.Dateaccopened != null)
                    hashCode = hashCode * 59 + this.Dateaccopened.GetHashCode();
                if (this.Datelastdefault != null)
                    hashCode = hashCode * 59 + this.Datelastdefault.GetHashCode();
                if (this.Defaultsrecorded != null)
                    hashCode = hashCode * 59 + this.Defaultsrecorded.GetHashCode();
                if (this.Modifiedby != null)
                    hashCode = hashCode * 59 + this.Modifiedby.GetHashCode();
                if (this.Modifieddttm != null)
                    hashCode = hashCode * 59 + this.Modifieddttm.GetHashCode();
                if (this.Termsrequested != null)
                    hashCode = hashCode * 59 + this.Termsrequested.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
