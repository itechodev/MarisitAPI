/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118DriversLicenceUY01
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118DriversLicenceUY01 :  IEquatable<TransunionConsumer118DriversLicenceUY01>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118DriversLicenceUY01" /> class.
        /// </summary>
        /// <param name="driverLicenceNumber">driverLicenceNumber.</param>
        /// <param name="idDocumentTypeCode">idDocumentTypeCode.</param>
        /// <param name="idDocumentTypeDescription">idDocumentTypeDescription.</param>
        /// <param name="idDocumentNumber">idDocumentNumber.</param>
        /// <param name="surname">surname.</param>
        /// <param name="driverRestrictions">driverRestrictions.</param>
        /// <param name="licenceDetails">licenceDetails.</param>
        /// <param name="message">message.</param>
        public TransunionConsumer118DriversLicenceUY01(string driverLicenceNumber = default(string), string idDocumentTypeCode = default(string), string idDocumentTypeDescription = default(string), string idDocumentNumber = default(string), string surname = default(string), List<TransunionConsumer118DriverRestriction> driverRestrictions = default(List<TransunionConsumer118DriverRestriction>), List<TransunionConsumer118LicenceDetail> licenceDetails = default(List<TransunionConsumer118LicenceDetail>), string message = default(string))
        {
            this.DriverLicenceNumber = driverLicenceNumber;
            this.IdDocumentTypeCode = idDocumentTypeCode;
            this.IdDocumentTypeDescription = idDocumentTypeDescription;
            this.IdDocumentNumber = idDocumentNumber;
            this.Surname = surname;
            this.DriverRestrictions = driverRestrictions;
            this.LicenceDetails = licenceDetails;
            this.Message = message;
            this.DriverLicenceNumber = driverLicenceNumber;
            this.IdDocumentTypeCode = idDocumentTypeCode;
            this.IdDocumentTypeDescription = idDocumentTypeDescription;
            this.IdDocumentNumber = idDocumentNumber;
            this.Surname = surname;
            this.DriverRestrictions = driverRestrictions;
            this.LicenceDetails = licenceDetails;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets DriverLicenceNumber
        /// </summary>
        [DataMember(Name="driverLicenceNumber", EmitDefaultValue=true)]
        public string DriverLicenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets IdDocumentTypeCode
        /// </summary>
        [DataMember(Name="idDocumentTypeCode", EmitDefaultValue=true)]
        public string IdDocumentTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets IdDocumentTypeDescription
        /// </summary>
        [DataMember(Name="idDocumentTypeDescription", EmitDefaultValue=true)]
        public string IdDocumentTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets IdDocumentNumber
        /// </summary>
        [DataMember(Name="idDocumentNumber", EmitDefaultValue=true)]
        public string IdDocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets DriverRestrictions
        /// </summary>
        [DataMember(Name="driverRestrictions", EmitDefaultValue=true)]
        public List<TransunionConsumer118DriverRestriction> DriverRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets LicenceDetails
        /// </summary>
        [DataMember(Name="licenceDetails", EmitDefaultValue=true)]
        public List<TransunionConsumer118LicenceDetail> LicenceDetails { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118DriversLicenceUY01 {\n");
            sb.Append("  DriverLicenceNumber: ").Append(DriverLicenceNumber).Append("\n");
            sb.Append("  IdDocumentTypeCode: ").Append(IdDocumentTypeCode).Append("\n");
            sb.Append("  IdDocumentTypeDescription: ").Append(IdDocumentTypeDescription).Append("\n");
            sb.Append("  IdDocumentNumber: ").Append(IdDocumentNumber).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  DriverRestrictions: ").Append(DriverRestrictions).Append("\n");
            sb.Append("  LicenceDetails: ").Append(LicenceDetails).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118DriversLicenceUY01);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118DriversLicenceUY01 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118DriversLicenceUY01 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118DriversLicenceUY01 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DriverLicenceNumber == input.DriverLicenceNumber ||
                    (this.DriverLicenceNumber != null &&
                    this.DriverLicenceNumber.Equals(input.DriverLicenceNumber))
                ) && 
                (
                    this.IdDocumentTypeCode == input.IdDocumentTypeCode ||
                    (this.IdDocumentTypeCode != null &&
                    this.IdDocumentTypeCode.Equals(input.IdDocumentTypeCode))
                ) && 
                (
                    this.IdDocumentTypeDescription == input.IdDocumentTypeDescription ||
                    (this.IdDocumentTypeDescription != null &&
                    this.IdDocumentTypeDescription.Equals(input.IdDocumentTypeDescription))
                ) && 
                (
                    this.IdDocumentNumber == input.IdDocumentNumber ||
                    (this.IdDocumentNumber != null &&
                    this.IdDocumentNumber.Equals(input.IdDocumentNumber))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.DriverRestrictions == input.DriverRestrictions ||
                    this.DriverRestrictions != null &&
                    input.DriverRestrictions != null &&
                    this.DriverRestrictions.SequenceEqual(input.DriverRestrictions)
                ) && 
                (
                    this.LicenceDetails == input.LicenceDetails ||
                    this.LicenceDetails != null &&
                    input.LicenceDetails != null &&
                    this.LicenceDetails.SequenceEqual(input.LicenceDetails)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DriverLicenceNumber != null)
                    hashCode = hashCode * 59 + this.DriverLicenceNumber.GetHashCode();
                if (this.IdDocumentTypeCode != null)
                    hashCode = hashCode * 59 + this.IdDocumentTypeCode.GetHashCode();
                if (this.IdDocumentTypeDescription != null)
                    hashCode = hashCode * 59 + this.IdDocumentTypeDescription.GetHashCode();
                if (this.IdDocumentNumber != null)
                    hashCode = hashCode * 59 + this.IdDocumentNumber.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.DriverRestrictions != null)
                    hashCode = hashCode * 59 + this.DriverRestrictions.GetHashCode();
                if (this.LicenceDetails != null)
                    hashCode = hashCode * 59 + this.LicenceDetails.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
