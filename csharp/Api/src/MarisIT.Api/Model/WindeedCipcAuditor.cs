/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcAuditor
    /// </summary>
    [DataContract]
    public partial class WindeedCipcAuditor :  IEquatable<WindeedCipcAuditor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcAuditor" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="profession">profession.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="registrationEntryDate">registrationEntryDate.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="fineLetter">fineLetter.</param>
        /// <param name="dateOnForm">dateOnForm.</param>
        /// <param name="formDateRecieved">formDateRecieved.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        /// <param name="postalAddress">postalAddress.</param>
        /// <param name="residentialAddress">residentialAddress.</param>
        public WindeedCipcAuditor(string name = default(string), WindeedCipcAuditorProfession1 profession = default(WindeedCipcAuditorProfession1), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), DateTime? expiryDate = default(DateTime?), DateTime? registrationEntryDate = default(DateTime?), string referenceNumber = default(string), string fineLetter = default(string), DateTime? dateOnForm = default(DateTime?), DateTime? formDateRecieved = default(DateTime?), WindeedCipcCipcLookup status = default(WindeedCipcCipcLookup), WindeedCipcCipcLookup type = default(WindeedCipcCipcLookup), WindeedCipcBasicAddress postalAddress = default(WindeedCipcBasicAddress), WindeedCipcBasicAddress residentialAddress = default(WindeedCipcBasicAddress))
        {
            this.Name = name;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ExpiryDate = expiryDate;
            this.RegistrationEntryDate = registrationEntryDate;
            this.ReferenceNumber = referenceNumber;
            this.FineLetter = fineLetter;
            this.DateOnForm = dateOnForm;
            this.FormDateRecieved = formDateRecieved;
            this.Name = name;
            this.Profession = profession;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.ExpiryDate = expiryDate;
            this.RegistrationEntryDate = registrationEntryDate;
            this.ReferenceNumber = referenceNumber;
            this.FineLetter = fineLetter;
            this.DateOnForm = dateOnForm;
            this.FormDateRecieved = formDateRecieved;
            this.Status = status;
            this.Type = type;
            this.PostalAddress = postalAddress;
            this.ResidentialAddress = residentialAddress;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Profession
        /// </summary>
        [DataMember(Name="profession", EmitDefaultValue=false)]
        public WindeedCipcAuditorProfession1 Profession { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name="expiryDate", EmitDefaultValue=true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationEntryDate
        /// </summary>
        [DataMember(Name="registrationEntryDate", EmitDefaultValue=true)]
        public DateTime? RegistrationEntryDate { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber", EmitDefaultValue=true)]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets FineLetter
        /// </summary>
        [DataMember(Name="fineLetter", EmitDefaultValue=true)]
        public string FineLetter { get; set; }

        /// <summary>
        /// Gets or Sets DateOnForm
        /// </summary>
        [DataMember(Name="dateOnForm", EmitDefaultValue=true)]
        public DateTime? DateOnForm { get; set; }

        /// <summary>
        /// Gets or Sets FormDateRecieved
        /// </summary>
        [DataMember(Name="formDateRecieved", EmitDefaultValue=true)]
        public DateTime? FormDateRecieved { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Type { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="postalAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress PostalAddress { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name="residentialAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress ResidentialAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcAuditor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Profession: ").Append(Profession).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  RegistrationEntryDate: ").Append(RegistrationEntryDate).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  FineLetter: ").Append(FineLetter).Append("\n");
            sb.Append("  DateOnForm: ").Append(DateOnForm).Append("\n");
            sb.Append("  FormDateRecieved: ").Append(FormDateRecieved).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcAuditor);
        }

        /// <summary>
        /// Returns true if WindeedCipcAuditor instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcAuditor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcAuditor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Profession == input.Profession ||
                    (this.Profession != null &&
                    this.Profession.Equals(input.Profession))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.RegistrationEntryDate == input.RegistrationEntryDate ||
                    (this.RegistrationEntryDate != null &&
                    this.RegistrationEntryDate.Equals(input.RegistrationEntryDate))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.FineLetter == input.FineLetter ||
                    (this.FineLetter != null &&
                    this.FineLetter.Equals(input.FineLetter))
                ) && 
                (
                    this.DateOnForm == input.DateOnForm ||
                    (this.DateOnForm != null &&
                    this.DateOnForm.Equals(input.DateOnForm))
                ) && 
                (
                    this.FormDateRecieved == input.FormDateRecieved ||
                    (this.FormDateRecieved != null &&
                    this.FormDateRecieved.Equals(input.FormDateRecieved))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    (this.ResidentialAddress != null &&
                    this.ResidentialAddress.Equals(input.ResidentialAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Profession != null)
                    hashCode = hashCode * 59 + this.Profession.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.RegistrationEntryDate != null)
                    hashCode = hashCode * 59 + this.RegistrationEntryDate.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.FineLetter != null)
                    hashCode = hashCode * 59 + this.FineLetter.GetHashCode();
                if (this.DateOnForm != null)
                    hashCode = hashCode * 59 + this.DateOnForm.GetHashCode();
                if (this.FormDateRecieved != null)
                    hashCode = hashCode * 59 + this.FormDateRecieved.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                if (this.ResidentialAddress != null)
                    hashCode = hashCode * 59 + this.ResidentialAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
