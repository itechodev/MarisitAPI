/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPJUDGE
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPJUDGE :  IEquatable<CompuscanCOMPJUDGE>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPJUDGE" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="attorneyname">attorneyname.</param>
        /// <param name="casefilingdate">casefilingdate.</param>
        /// <param name="casenumber">casenumber.</param>
        /// <param name="casereason">casereason.</param>
        /// <param name="casetype">casetype.</param>
        /// <param name="courtname">courtname.</param>
        /// <param name="courttype">courttype.</param>
        /// <param name="match">match.</param>
        /// <param name="nonsaid">nonsaid.</param>
        /// <param name="plaintifF1NAMEANDSURNAME">plaintifF1NAMEANDSURNAME.</param>
        public CompuscanCOMPJUDGE(string amount = default(string), string attorneyname = default(string), string casefilingdate = default(string), string casenumber = default(string), string casereason = default(string), string casetype = default(string), string courtname = default(string), string courttype = default(string), string match = default(string), string nonsaid = default(string), string plaintifF1NAMEANDSURNAME = default(string))
        {
            this.Amount = amount;
            this.Attorneyname = attorneyname;
            this.Casefilingdate = casefilingdate;
            this.Casenumber = casenumber;
            this.Casereason = casereason;
            this.Casetype = casetype;
            this.Courtname = courtname;
            this.Courttype = courttype;
            this.Match = match;
            this.Nonsaid = nonsaid;
            this.PlaintifF1NAMEANDSURNAME = plaintifF1NAMEANDSURNAME;
            this.Amount = amount;
            this.Attorneyname = attorneyname;
            this.Casefilingdate = casefilingdate;
            this.Casenumber = casenumber;
            this.Casereason = casereason;
            this.Casetype = casetype;
            this.Courtname = courtname;
            this.Courttype = courttype;
            this.Match = match;
            this.Nonsaid = nonsaid;
            this.PlaintifF1NAMEANDSURNAME = plaintifF1NAMEANDSURNAME;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Attorneyname
        /// </summary>
        [DataMember(Name="attorneyname", EmitDefaultValue=true)]
        public string Attorneyname { get; set; }

        /// <summary>
        /// Gets or Sets Casefilingdate
        /// </summary>
        [DataMember(Name="casefilingdate", EmitDefaultValue=true)]
        public string Casefilingdate { get; set; }

        /// <summary>
        /// Gets or Sets Casenumber
        /// </summary>
        [DataMember(Name="casenumber", EmitDefaultValue=true)]
        public string Casenumber { get; set; }

        /// <summary>
        /// Gets or Sets Casereason
        /// </summary>
        [DataMember(Name="casereason", EmitDefaultValue=true)]
        public string Casereason { get; set; }

        /// <summary>
        /// Gets or Sets Casetype
        /// </summary>
        [DataMember(Name="casetype", EmitDefaultValue=true)]
        public string Casetype { get; set; }

        /// <summary>
        /// Gets or Sets Courtname
        /// </summary>
        [DataMember(Name="courtname", EmitDefaultValue=true)]
        public string Courtname { get; set; }

        /// <summary>
        /// Gets or Sets Courttype
        /// </summary>
        [DataMember(Name="courttype", EmitDefaultValue=true)]
        public string Courttype { get; set; }

        /// <summary>
        /// Gets or Sets Match
        /// </summary>
        [DataMember(Name="match", EmitDefaultValue=true)]
        public string Match { get; set; }

        /// <summary>
        /// Gets or Sets Nonsaid
        /// </summary>
        [DataMember(Name="nonsaid", EmitDefaultValue=true)]
        public string Nonsaid { get; set; }

        /// <summary>
        /// Gets or Sets PlaintifF1NAMEANDSURNAME
        /// </summary>
        [DataMember(Name="plaintifF1NAMEANDSURNAME", EmitDefaultValue=true)]
        public string PlaintifF1NAMEANDSURNAME { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPJUDGE {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Attorneyname: ").Append(Attorneyname).Append("\n");
            sb.Append("  Casefilingdate: ").Append(Casefilingdate).Append("\n");
            sb.Append("  Casenumber: ").Append(Casenumber).Append("\n");
            sb.Append("  Casereason: ").Append(Casereason).Append("\n");
            sb.Append("  Casetype: ").Append(Casetype).Append("\n");
            sb.Append("  Courtname: ").Append(Courtname).Append("\n");
            sb.Append("  Courttype: ").Append(Courttype).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Nonsaid: ").Append(Nonsaid).Append("\n");
            sb.Append("  PlaintifF1NAMEANDSURNAME: ").Append(PlaintifF1NAMEANDSURNAME).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPJUDGE);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPJUDGE instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPJUDGE to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPJUDGE input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Attorneyname == input.Attorneyname ||
                    (this.Attorneyname != null &&
                    this.Attorneyname.Equals(input.Attorneyname))
                ) && 
                (
                    this.Casefilingdate == input.Casefilingdate ||
                    (this.Casefilingdate != null &&
                    this.Casefilingdate.Equals(input.Casefilingdate))
                ) && 
                (
                    this.Casenumber == input.Casenumber ||
                    (this.Casenumber != null &&
                    this.Casenumber.Equals(input.Casenumber))
                ) && 
                (
                    this.Casereason == input.Casereason ||
                    (this.Casereason != null &&
                    this.Casereason.Equals(input.Casereason))
                ) && 
                (
                    this.Casetype == input.Casetype ||
                    (this.Casetype != null &&
                    this.Casetype.Equals(input.Casetype))
                ) && 
                (
                    this.Courtname == input.Courtname ||
                    (this.Courtname != null &&
                    this.Courtname.Equals(input.Courtname))
                ) && 
                (
                    this.Courttype == input.Courttype ||
                    (this.Courttype != null &&
                    this.Courttype.Equals(input.Courttype))
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Nonsaid == input.Nonsaid ||
                    (this.Nonsaid != null &&
                    this.Nonsaid.Equals(input.Nonsaid))
                ) && 
                (
                    this.PlaintifF1NAMEANDSURNAME == input.PlaintifF1NAMEANDSURNAME ||
                    (this.PlaintifF1NAMEANDSURNAME != null &&
                    this.PlaintifF1NAMEANDSURNAME.Equals(input.PlaintifF1NAMEANDSURNAME))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Attorneyname != null)
                    hashCode = hashCode * 59 + this.Attorneyname.GetHashCode();
                if (this.Casefilingdate != null)
                    hashCode = hashCode * 59 + this.Casefilingdate.GetHashCode();
                if (this.Casenumber != null)
                    hashCode = hashCode * 59 + this.Casenumber.GetHashCode();
                if (this.Casereason != null)
                    hashCode = hashCode * 59 + this.Casereason.GetHashCode();
                if (this.Casetype != null)
                    hashCode = hashCode * 59 + this.Casetype.GetHashCode();
                if (this.Courtname != null)
                    hashCode = hashCode * 59 + this.Courtname.GetHashCode();
                if (this.Courttype != null)
                    hashCode = hashCode * 59 + this.Courttype.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.Nonsaid != null)
                    hashCode = hashCode * 59 + this.Nonsaid.GetHashCode();
                if (this.PlaintifF1NAMEANDSURNAME != null)
                    hashCode = hashCode * 59 + this.PlaintifF1NAMEANDSURNAME.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
