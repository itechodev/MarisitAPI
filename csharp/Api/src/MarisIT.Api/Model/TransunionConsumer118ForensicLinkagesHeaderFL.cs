/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ForensicLinkagesHeaderFL
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ForensicLinkagesHeaderFL :  IEquatable<TransunionConsumer118ForensicLinkagesHeaderFL>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ForensicLinkagesHeaderFL" /> class.
        /// </summary>
        /// <param name="iLinkSurnameO">iLinkSurnameO.</param>
        /// <param name="iLinkForenameO">iLinkForenameO.</param>
        /// <param name="iLinkCell">iLinkCell.</param>
        /// <param name="iLinkHomeTelephoneCode">iLinkHomeTelephoneCode.</param>
        /// <param name="iLinkHomeTelephoneNumber">iLinkHomeTelephoneNumber.</param>
        /// <param name="iLinkWorkTelephoneCode">iLinkWorkTelephoneCode.</param>
        /// <param name="iLinkWorkTelephoneNumber">iLinkWorkTelephoneNumber.</param>
        /// <param name="iAddressLine1">iAddressLine1.</param>
        /// <param name="iAddressLine2">iAddressLine2.</param>
        /// <param name="iAddressSuburb">iAddressSuburb.</param>
        /// <param name="iAddressTown">iAddressTown.</param>
        /// <param name="iAddressCode">iAddressCode.</param>
        public TransunionConsumer118ForensicLinkagesHeaderFL(string iLinkSurnameO = default(string), string iLinkForenameO = default(string), string iLinkCell = default(string), string iLinkHomeTelephoneCode = default(string), string iLinkHomeTelephoneNumber = default(string), string iLinkWorkTelephoneCode = default(string), string iLinkWorkTelephoneNumber = default(string), string iAddressLine1 = default(string), string iAddressLine2 = default(string), string iAddressSuburb = default(string), string iAddressTown = default(string), string iAddressCode = default(string))
        {
            this.ILinkSurnameO = iLinkSurnameO;
            this.ILinkForenameO = iLinkForenameO;
            this.ILinkCell = iLinkCell;
            this.ILinkHomeTelephoneCode = iLinkHomeTelephoneCode;
            this.ILinkHomeTelephoneNumber = iLinkHomeTelephoneNumber;
            this.ILinkWorkTelephoneCode = iLinkWorkTelephoneCode;
            this.ILinkWorkTelephoneNumber = iLinkWorkTelephoneNumber;
            this.IAddressLine1 = iAddressLine1;
            this.IAddressLine2 = iAddressLine2;
            this.IAddressSuburb = iAddressSuburb;
            this.IAddressTown = iAddressTown;
            this.IAddressCode = iAddressCode;
            this.ILinkSurnameO = iLinkSurnameO;
            this.ILinkForenameO = iLinkForenameO;
            this.ILinkCell = iLinkCell;
            this.ILinkHomeTelephoneCode = iLinkHomeTelephoneCode;
            this.ILinkHomeTelephoneNumber = iLinkHomeTelephoneNumber;
            this.ILinkWorkTelephoneCode = iLinkWorkTelephoneCode;
            this.ILinkWorkTelephoneNumber = iLinkWorkTelephoneNumber;
            this.IAddressLine1 = iAddressLine1;
            this.IAddressLine2 = iAddressLine2;
            this.IAddressSuburb = iAddressSuburb;
            this.IAddressTown = iAddressTown;
            this.IAddressCode = iAddressCode;
        }

        /// <summary>
        /// Gets or Sets ILinkSurnameO
        /// </summary>
        [DataMember(Name="iLinkSurnameO", EmitDefaultValue=true)]
        public string ILinkSurnameO { get; set; }

        /// <summary>
        /// Gets or Sets ILinkForenameO
        /// </summary>
        [DataMember(Name="iLinkForenameO", EmitDefaultValue=true)]
        public string ILinkForenameO { get; set; }

        /// <summary>
        /// Gets or Sets ILinkCell
        /// </summary>
        [DataMember(Name="iLinkCell", EmitDefaultValue=true)]
        public string ILinkCell { get; set; }

        /// <summary>
        /// Gets or Sets ILinkHomeTelephoneCode
        /// </summary>
        [DataMember(Name="iLinkHomeTelephoneCode", EmitDefaultValue=true)]
        public string ILinkHomeTelephoneCode { get; set; }

        /// <summary>
        /// Gets or Sets ILinkHomeTelephoneNumber
        /// </summary>
        [DataMember(Name="iLinkHomeTelephoneNumber", EmitDefaultValue=true)]
        public string ILinkHomeTelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ILinkWorkTelephoneCode
        /// </summary>
        [DataMember(Name="iLinkWorkTelephoneCode", EmitDefaultValue=true)]
        public string ILinkWorkTelephoneCode { get; set; }

        /// <summary>
        /// Gets or Sets ILinkWorkTelephoneNumber
        /// </summary>
        [DataMember(Name="iLinkWorkTelephoneNumber", EmitDefaultValue=true)]
        public string ILinkWorkTelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets IAddressLine1
        /// </summary>
        [DataMember(Name="iAddressLine1", EmitDefaultValue=true)]
        public string IAddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets IAddressLine2
        /// </summary>
        [DataMember(Name="iAddressLine2", EmitDefaultValue=true)]
        public string IAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets IAddressSuburb
        /// </summary>
        [DataMember(Name="iAddressSuburb", EmitDefaultValue=true)]
        public string IAddressSuburb { get; set; }

        /// <summary>
        /// Gets or Sets IAddressTown
        /// </summary>
        [DataMember(Name="iAddressTown", EmitDefaultValue=true)]
        public string IAddressTown { get; set; }

        /// <summary>
        /// Gets or Sets IAddressCode
        /// </summary>
        [DataMember(Name="iAddressCode", EmitDefaultValue=true)]
        public string IAddressCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ForensicLinkagesHeaderFL {\n");
            sb.Append("  ILinkSurnameO: ").Append(ILinkSurnameO).Append("\n");
            sb.Append("  ILinkForenameO: ").Append(ILinkForenameO).Append("\n");
            sb.Append("  ILinkCell: ").Append(ILinkCell).Append("\n");
            sb.Append("  ILinkHomeTelephoneCode: ").Append(ILinkHomeTelephoneCode).Append("\n");
            sb.Append("  ILinkHomeTelephoneNumber: ").Append(ILinkHomeTelephoneNumber).Append("\n");
            sb.Append("  ILinkWorkTelephoneCode: ").Append(ILinkWorkTelephoneCode).Append("\n");
            sb.Append("  ILinkWorkTelephoneNumber: ").Append(ILinkWorkTelephoneNumber).Append("\n");
            sb.Append("  IAddressLine1: ").Append(IAddressLine1).Append("\n");
            sb.Append("  IAddressLine2: ").Append(IAddressLine2).Append("\n");
            sb.Append("  IAddressSuburb: ").Append(IAddressSuburb).Append("\n");
            sb.Append("  IAddressTown: ").Append(IAddressTown).Append("\n");
            sb.Append("  IAddressCode: ").Append(IAddressCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ForensicLinkagesHeaderFL);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ForensicLinkagesHeaderFL instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ForensicLinkagesHeaderFL to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ForensicLinkagesHeaderFL input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ILinkSurnameO == input.ILinkSurnameO ||
                    (this.ILinkSurnameO != null &&
                    this.ILinkSurnameO.Equals(input.ILinkSurnameO))
                ) && 
                (
                    this.ILinkForenameO == input.ILinkForenameO ||
                    (this.ILinkForenameO != null &&
                    this.ILinkForenameO.Equals(input.ILinkForenameO))
                ) && 
                (
                    this.ILinkCell == input.ILinkCell ||
                    (this.ILinkCell != null &&
                    this.ILinkCell.Equals(input.ILinkCell))
                ) && 
                (
                    this.ILinkHomeTelephoneCode == input.ILinkHomeTelephoneCode ||
                    (this.ILinkHomeTelephoneCode != null &&
                    this.ILinkHomeTelephoneCode.Equals(input.ILinkHomeTelephoneCode))
                ) && 
                (
                    this.ILinkHomeTelephoneNumber == input.ILinkHomeTelephoneNumber ||
                    (this.ILinkHomeTelephoneNumber != null &&
                    this.ILinkHomeTelephoneNumber.Equals(input.ILinkHomeTelephoneNumber))
                ) && 
                (
                    this.ILinkWorkTelephoneCode == input.ILinkWorkTelephoneCode ||
                    (this.ILinkWorkTelephoneCode != null &&
                    this.ILinkWorkTelephoneCode.Equals(input.ILinkWorkTelephoneCode))
                ) && 
                (
                    this.ILinkWorkTelephoneNumber == input.ILinkWorkTelephoneNumber ||
                    (this.ILinkWorkTelephoneNumber != null &&
                    this.ILinkWorkTelephoneNumber.Equals(input.ILinkWorkTelephoneNumber))
                ) && 
                (
                    this.IAddressLine1 == input.IAddressLine1 ||
                    (this.IAddressLine1 != null &&
                    this.IAddressLine1.Equals(input.IAddressLine1))
                ) && 
                (
                    this.IAddressLine2 == input.IAddressLine2 ||
                    (this.IAddressLine2 != null &&
                    this.IAddressLine2.Equals(input.IAddressLine2))
                ) && 
                (
                    this.IAddressSuburb == input.IAddressSuburb ||
                    (this.IAddressSuburb != null &&
                    this.IAddressSuburb.Equals(input.IAddressSuburb))
                ) && 
                (
                    this.IAddressTown == input.IAddressTown ||
                    (this.IAddressTown != null &&
                    this.IAddressTown.Equals(input.IAddressTown))
                ) && 
                (
                    this.IAddressCode == input.IAddressCode ||
                    (this.IAddressCode != null &&
                    this.IAddressCode.Equals(input.IAddressCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ILinkSurnameO != null)
                    hashCode = hashCode * 59 + this.ILinkSurnameO.GetHashCode();
                if (this.ILinkForenameO != null)
                    hashCode = hashCode * 59 + this.ILinkForenameO.GetHashCode();
                if (this.ILinkCell != null)
                    hashCode = hashCode * 59 + this.ILinkCell.GetHashCode();
                if (this.ILinkHomeTelephoneCode != null)
                    hashCode = hashCode * 59 + this.ILinkHomeTelephoneCode.GetHashCode();
                if (this.ILinkHomeTelephoneNumber != null)
                    hashCode = hashCode * 59 + this.ILinkHomeTelephoneNumber.GetHashCode();
                if (this.ILinkWorkTelephoneCode != null)
                    hashCode = hashCode * 59 + this.ILinkWorkTelephoneCode.GetHashCode();
                if (this.ILinkWorkTelephoneNumber != null)
                    hashCode = hashCode * 59 + this.ILinkWorkTelephoneNumber.GetHashCode();
                if (this.IAddressLine1 != null)
                    hashCode = hashCode * 59 + this.IAddressLine1.GetHashCode();
                if (this.IAddressLine2 != null)
                    hashCode = hashCode * 59 + this.IAddressLine2.GetHashCode();
                if (this.IAddressSuburb != null)
                    hashCode = hashCode * 59 + this.IAddressSuburb.GetHashCode();
                if (this.IAddressTown != null)
                    hashCode = hashCode * 59 + this.IAddressTown.GetHashCode();
                if (this.IAddressCode != null)
                    hashCode = hashCode * 59 + this.IAddressCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
