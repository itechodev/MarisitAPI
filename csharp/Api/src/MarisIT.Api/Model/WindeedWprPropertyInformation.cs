/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprPropertyInformation
    /// </summary>
    [DataContract]
    public partial class WindeedWprPropertyInformation :  IEquatable<WindeedWprPropertyInformation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PropertyFlags
        /// </summary>
        [DataMember(Name="propertyFlags", EmitDefaultValue=false)]
        public WindeedWprPropertyTypeFlags? PropertyFlags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprPropertyInformation" /> class.
        /// </summary>
        /// <param name="municipality">municipality.</param>
        /// <param name="size">size.</param>
        /// <param name="province">province.</param>
        /// <param name="remainingExtent">remainingExtent.</param>
        /// <param name="diagramDeedNumber">diagramDeedNumber.</param>
        /// <param name="registrationDivision">registrationDivision.</param>
        /// <param name="lpiCode">lpiCode.</param>
        /// <param name="streetAddress">streetAddress.</param>
        /// <param name="municipalValuation">municipalValuation.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longtitude">longtitude.</param>
        /// <param name="sateliteImage">sateliteImage.</param>
        /// <param name="cadasterImage">cadasterImage.</param>
        /// <param name="propertyId">propertyId.</param>
        /// <param name="property24Ref">property24Ref.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="propertyFlags">propertyFlags.</param>
        /// <param name="situatedAt">situatedAt.</param>
        public WindeedWprPropertyInformation(string municipality = default(string), string size = default(string), string province = default(string), bool remainingExtent = default(bool), string diagramDeedNumber = default(string), string registrationDivision = default(string), string lpiCode = default(string), WindeedWprUpdatableStreetInformation streetAddress = default(WindeedWprUpdatableStreetInformation), WindeedWprMunicipalValuation municipalValuation = default(WindeedWprMunicipalValuation), double? latitude = default(double?), double? longtitude = default(double?), byte[] sateliteImage = default(byte[]), byte[] cadasterImage = default(byte[]), int? propertyId = default(int?), string property24Ref = default(string), string deedsOffice = default(string), WindeedWprPropertyTypeFlags? propertyFlags = default(WindeedWprPropertyTypeFlags?), string situatedAt = default(string))
        {
            this.Municipality = municipality;
            this.Size = size;
            this.Province = province;
            this.DiagramDeedNumber = diagramDeedNumber;
            this.RegistrationDivision = registrationDivision;
            this.LpiCode = lpiCode;
            this.Latitude = latitude;
            this.Longtitude = longtitude;
            this.SateliteImage = sateliteImage;
            this.CadasterImage = cadasterImage;
            this.PropertyId = propertyId;
            this.Property24Ref = property24Ref;
            this.DeedsOffice = deedsOffice;
            this.SituatedAt = situatedAt;
            this.Municipality = municipality;
            this.Size = size;
            this.Province = province;
            this.RemainingExtent = remainingExtent;
            this.DiagramDeedNumber = diagramDeedNumber;
            this.RegistrationDivision = registrationDivision;
            this.LpiCode = lpiCode;
            this.StreetAddress = streetAddress;
            this.MunicipalValuation = municipalValuation;
            this.Latitude = latitude;
            this.Longtitude = longtitude;
            this.SateliteImage = sateliteImage;
            this.CadasterImage = cadasterImage;
            this.PropertyId = propertyId;
            this.Property24Ref = property24Ref;
            this.DeedsOffice = deedsOffice;
            this.PropertyFlags = propertyFlags;
            this.SituatedAt = situatedAt;
        }

        /// <summary>
        /// Gets or Sets Municipality
        /// </summary>
        [DataMember(Name="municipality", EmitDefaultValue=true)]
        public string Municipality { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name="province", EmitDefaultValue=true)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets RemainingExtent
        /// </summary>
        [DataMember(Name="remainingExtent", EmitDefaultValue=false)]
        public bool RemainingExtent { get; set; }

        /// <summary>
        /// Gets or Sets DiagramDeedNumber
        /// </summary>
        [DataMember(Name="diagramDeedNumber", EmitDefaultValue=true)]
        public string DiagramDeedNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDivision
        /// </summary>
        [DataMember(Name="registrationDivision", EmitDefaultValue=true)]
        public string RegistrationDivision { get; set; }

        /// <summary>
        /// Gets or Sets LpiCode
        /// </summary>
        [DataMember(Name="lpiCode", EmitDefaultValue=true)]
        public string LpiCode { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public WindeedWprUpdatableStreetInformation StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets MunicipalValuation
        /// </summary>
        [DataMember(Name="municipalValuation", EmitDefaultValue=false)]
        public WindeedWprMunicipalValuation MunicipalValuation { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longtitude
        /// </summary>
        [DataMember(Name="longtitude", EmitDefaultValue=true)]
        public double? Longtitude { get; set; }

        /// <summary>
        /// Gets or Sets SateliteImage
        /// </summary>
        [DataMember(Name="sateliteImage", EmitDefaultValue=true)]
        public byte[] SateliteImage { get; set; }

        /// <summary>
        /// Gets or Sets CadasterImage
        /// </summary>
        [DataMember(Name="cadasterImage", EmitDefaultValue=true)]
        public byte[] CadasterImage { get; set; }

        /// <summary>
        /// Gets or Sets PropertyId
        /// </summary>
        [DataMember(Name="propertyId", EmitDefaultValue=true)]
        public int? PropertyId { get; set; }

        /// <summary>
        /// Gets or Sets Property24Ref
        /// </summary>
        [DataMember(Name="property24Ref", EmitDefaultValue=true)]
        public string Property24Ref { get; set; }

        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=true)]
        public string DeedsOffice { get; set; }


        /// <summary>
        /// Gets or Sets SituatedAt
        /// </summary>
        [DataMember(Name="situatedAt", EmitDefaultValue=true)]
        public string SituatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprPropertyInformation {\n");
            sb.Append("  Municipality: ").Append(Municipality).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  RemainingExtent: ").Append(RemainingExtent).Append("\n");
            sb.Append("  DiagramDeedNumber: ").Append(DiagramDeedNumber).Append("\n");
            sb.Append("  RegistrationDivision: ").Append(RegistrationDivision).Append("\n");
            sb.Append("  LpiCode: ").Append(LpiCode).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  MunicipalValuation: ").Append(MunicipalValuation).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longtitude: ").Append(Longtitude).Append("\n");
            sb.Append("  SateliteImage: ").Append(SateliteImage).Append("\n");
            sb.Append("  CadasterImage: ").Append(CadasterImage).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  Property24Ref: ").Append(Property24Ref).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  PropertyFlags: ").Append(PropertyFlags).Append("\n");
            sb.Append("  SituatedAt: ").Append(SituatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprPropertyInformation);
        }

        /// <summary>
        /// Returns true if WindeedWprPropertyInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprPropertyInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprPropertyInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Municipality == input.Municipality ||
                    (this.Municipality != null &&
                    this.Municipality.Equals(input.Municipality))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.RemainingExtent == input.RemainingExtent ||
                    (this.RemainingExtent != null &&
                    this.RemainingExtent.Equals(input.RemainingExtent))
                ) && 
                (
                    this.DiagramDeedNumber == input.DiagramDeedNumber ||
                    (this.DiagramDeedNumber != null &&
                    this.DiagramDeedNumber.Equals(input.DiagramDeedNumber))
                ) && 
                (
                    this.RegistrationDivision == input.RegistrationDivision ||
                    (this.RegistrationDivision != null &&
                    this.RegistrationDivision.Equals(input.RegistrationDivision))
                ) && 
                (
                    this.LpiCode == input.LpiCode ||
                    (this.LpiCode != null &&
                    this.LpiCode.Equals(input.LpiCode))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.MunicipalValuation == input.MunicipalValuation ||
                    (this.MunicipalValuation != null &&
                    this.MunicipalValuation.Equals(input.MunicipalValuation))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longtitude == input.Longtitude ||
                    (this.Longtitude != null &&
                    this.Longtitude.Equals(input.Longtitude))
                ) && 
                (
                    this.SateliteImage == input.SateliteImage ||
                    (this.SateliteImage != null &&
                    this.SateliteImage.Equals(input.SateliteImage))
                ) && 
                (
                    this.CadasterImage == input.CadasterImage ||
                    (this.CadasterImage != null &&
                    this.CadasterImage.Equals(input.CadasterImage))
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    (this.PropertyId != null &&
                    this.PropertyId.Equals(input.PropertyId))
                ) && 
                (
                    this.Property24Ref == input.Property24Ref ||
                    (this.Property24Ref != null &&
                    this.Property24Ref.Equals(input.Property24Ref))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.PropertyFlags == input.PropertyFlags ||
                    (this.PropertyFlags != null &&
                    this.PropertyFlags.Equals(input.PropertyFlags))
                ) && 
                (
                    this.SituatedAt == input.SituatedAt ||
                    (this.SituatedAt != null &&
                    this.SituatedAt.Equals(input.SituatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Municipality != null)
                    hashCode = hashCode * 59 + this.Municipality.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.RemainingExtent != null)
                    hashCode = hashCode * 59 + this.RemainingExtent.GetHashCode();
                if (this.DiagramDeedNumber != null)
                    hashCode = hashCode * 59 + this.DiagramDeedNumber.GetHashCode();
                if (this.RegistrationDivision != null)
                    hashCode = hashCode * 59 + this.RegistrationDivision.GetHashCode();
                if (this.LpiCode != null)
                    hashCode = hashCode * 59 + this.LpiCode.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.MunicipalValuation != null)
                    hashCode = hashCode * 59 + this.MunicipalValuation.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longtitude != null)
                    hashCode = hashCode * 59 + this.Longtitude.GetHashCode();
                if (this.SateliteImage != null)
                    hashCode = hashCode * 59 + this.SateliteImage.GetHashCode();
                if (this.CadasterImage != null)
                    hashCode = hashCode * 59 + this.CadasterImage.GetHashCode();
                if (this.PropertyId != null)
                    hashCode = hashCode * 59 + this.PropertyId.GetHashCode();
                if (this.Property24Ref != null)
                    hashCode = hashCode * 59 + this.Property24Ref.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.PropertyFlags != null)
                    hashCode = hashCode * 59 + this.PropertyFlags.GetHashCode();
                if (this.SituatedAt != null)
                    hashCode = hashCode * 59 + this.SituatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
