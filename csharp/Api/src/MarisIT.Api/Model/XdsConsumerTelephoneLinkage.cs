/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerTelephoneLinkage
    /// </summary>
    [DataContract]
    public partial class XdsConsumerTelephoneLinkage :  IEquatable<XdsConsumerTelephoneLinkage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerTelephoneLinkage" /> class.
        /// </summary>
        /// <param name="cellularNo">cellularNo.</param>
        /// <param name="consumerID">consumerID.</param>
        /// <param name="consumerName">consumerName.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="homeTelephone">homeTelephone.</param>
        /// <param name="idNo">idNo.</param>
        /// <param name="passportNo">passportNo.</param>
        /// <param name="surname">surname.</param>
        /// <param name="workTelephone">workTelephone.</param>
        public XdsConsumerTelephoneLinkage(string cellularNo = default(string), string consumerID = default(string), string consumerName = default(string), string displayText = default(string), string homeTelephone = default(string), string idNo = default(string), string passportNo = default(string), string surname = default(string), string workTelephone = default(string))
        {
            this.CellularNo = cellularNo;
            this.ConsumerID = consumerID;
            this.ConsumerName = consumerName;
            this.DisplayText = displayText;
            this.HomeTelephone = homeTelephone;
            this.IdNo = idNo;
            this.PassportNo = passportNo;
            this.Surname = surname;
            this.WorkTelephone = workTelephone;
            this.CellularNo = cellularNo;
            this.ConsumerID = consumerID;
            this.ConsumerName = consumerName;
            this.DisplayText = displayText;
            this.HomeTelephone = homeTelephone;
            this.IdNo = idNo;
            this.PassportNo = passportNo;
            this.Surname = surname;
            this.WorkTelephone = workTelephone;
        }

        /// <summary>
        /// Gets or Sets CellularNo
        /// </summary>
        [DataMember(Name="cellularNo", EmitDefaultValue=true)]
        public string CellularNo { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerID
        /// </summary>
        [DataMember(Name="consumerID", EmitDefaultValue=true)]
        public string ConsumerID { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerName
        /// </summary>
        [DataMember(Name="consumerName", EmitDefaultValue=true)]
        public string ConsumerName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets HomeTelephone
        /// </summary>
        [DataMember(Name="homeTelephone", EmitDefaultValue=true)]
        public string HomeTelephone { get; set; }

        /// <summary>
        /// Gets or Sets IdNo
        /// </summary>
        [DataMember(Name="idNo", EmitDefaultValue=true)]
        public string IdNo { get; set; }

        /// <summary>
        /// Gets or Sets PassportNo
        /// </summary>
        [DataMember(Name="passportNo", EmitDefaultValue=true)]
        public string PassportNo { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets WorkTelephone
        /// </summary>
        [DataMember(Name="workTelephone", EmitDefaultValue=true)]
        public string WorkTelephone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerTelephoneLinkage {\n");
            sb.Append("  CellularNo: ").Append(CellularNo).Append("\n");
            sb.Append("  ConsumerID: ").Append(ConsumerID).Append("\n");
            sb.Append("  ConsumerName: ").Append(ConsumerName).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  HomeTelephone: ").Append(HomeTelephone).Append("\n");
            sb.Append("  IdNo: ").Append(IdNo).Append("\n");
            sb.Append("  PassportNo: ").Append(PassportNo).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  WorkTelephone: ").Append(WorkTelephone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerTelephoneLinkage);
        }

        /// <summary>
        /// Returns true if XdsConsumerTelephoneLinkage instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerTelephoneLinkage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerTelephoneLinkage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CellularNo == input.CellularNo ||
                    (this.CellularNo != null &&
                    this.CellularNo.Equals(input.CellularNo))
                ) && 
                (
                    this.ConsumerID == input.ConsumerID ||
                    (this.ConsumerID != null &&
                    this.ConsumerID.Equals(input.ConsumerID))
                ) && 
                (
                    this.ConsumerName == input.ConsumerName ||
                    (this.ConsumerName != null &&
                    this.ConsumerName.Equals(input.ConsumerName))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.HomeTelephone == input.HomeTelephone ||
                    (this.HomeTelephone != null &&
                    this.HomeTelephone.Equals(input.HomeTelephone))
                ) && 
                (
                    this.IdNo == input.IdNo ||
                    (this.IdNo != null &&
                    this.IdNo.Equals(input.IdNo))
                ) && 
                (
                    this.PassportNo == input.PassportNo ||
                    (this.PassportNo != null &&
                    this.PassportNo.Equals(input.PassportNo))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.WorkTelephone == input.WorkTelephone ||
                    (this.WorkTelephone != null &&
                    this.WorkTelephone.Equals(input.WorkTelephone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CellularNo != null)
                    hashCode = hashCode * 59 + this.CellularNo.GetHashCode();
                if (this.ConsumerID != null)
                    hashCode = hashCode * 59 + this.ConsumerID.GetHashCode();
                if (this.ConsumerName != null)
                    hashCode = hashCode * 59 + this.ConsumerName.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.HomeTelephone != null)
                    hashCode = hashCode * 59 + this.HomeTelephone.GetHashCode();
                if (this.IdNo != null)
                    hashCode = hashCode * 59 + this.IdNo.GetHashCode();
                if (this.PassportNo != null)
                    hashCode = hashCode * 59 + this.PassportNo.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.WorkTelephone != null)
                    hashCode = hashCode * 59 + this.WorkTelephone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
