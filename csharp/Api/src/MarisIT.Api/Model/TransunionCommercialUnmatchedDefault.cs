/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialUnmatchedDefault
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialUnmatchedDefault :  IEquatable<TransunionCommercialUnmatchedDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialUnmatchedDefault" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="numberFound">numberFound.</param>
        /// <param name="defaultDate">defaultDate.</param>
        /// <param name="defaultName">defaultName.</param>
        /// <param name="defaultTradeStyle">defaultTradeStyle.</param>
        /// <param name="defaultAddress">defaultAddress.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="comment">comment.</param>
        /// <param name="subscriberName">subscriberName.</param>
        /// <param name="supplierName">supplierName.</param>
        /// <param name="message">message.</param>
        /// <param name="serialNo">serialNo.</param>
        /// <param name="onBehalfOf">onBehalfOf.</param>
        /// <param name="status">status.</param>
        public TransunionCommercialUnmatchedDefault(string majorProduct = default(string), string numberFound = default(string), string defaultDate = default(string), string defaultName = default(string), string defaultTradeStyle = default(string), string defaultAddress = default(string), string suburb = default(string), string city = default(string), string country = default(string), string postCode = default(string), string amount = default(string), string comment = default(string), string subscriberName = default(string), string supplierName = default(string), string message = default(string), string serialNo = default(string), string onBehalfOf = default(string), string status = default(string))
        {
            this.MajorProduct = majorProduct;
            this.NumberFound = numberFound;
            this.DefaultDate = defaultDate;
            this.DefaultName = defaultName;
            this.DefaultTradeStyle = defaultTradeStyle;
            this.DefaultAddress = defaultAddress;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.Amount = amount;
            this.Comment = comment;
            this.SubscriberName = subscriberName;
            this.SupplierName = supplierName;
            this.Message = message;
            this.SerialNo = serialNo;
            this.OnBehalfOf = onBehalfOf;
            this.Status = status;
            this.MajorProduct = majorProduct;
            this.NumberFound = numberFound;
            this.DefaultDate = defaultDate;
            this.DefaultName = defaultName;
            this.DefaultTradeStyle = defaultTradeStyle;
            this.DefaultAddress = defaultAddress;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.Amount = amount;
            this.Comment = comment;
            this.SubscriberName = subscriberName;
            this.SupplierName = supplierName;
            this.Message = message;
            this.SerialNo = serialNo;
            this.OnBehalfOf = onBehalfOf;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets NumberFound
        /// </summary>
        [DataMember(Name="numberFound", EmitDefaultValue=true)]
        public string NumberFound { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDate
        /// </summary>
        [DataMember(Name="defaultDate", EmitDefaultValue=true)]
        public string DefaultDate { get; set; }

        /// <summary>
        /// Gets or Sets DefaultName
        /// </summary>
        [DataMember(Name="defaultName", EmitDefaultValue=true)]
        public string DefaultName { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTradeStyle
        /// </summary>
        [DataMember(Name="defaultTradeStyle", EmitDefaultValue=true)]
        public string DefaultTradeStyle { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAddress
        /// </summary>
        [DataMember(Name="defaultAddress", EmitDefaultValue=true)]
        public string DefaultAddress { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="subscriberName", EmitDefaultValue=true)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Gets or Sets SupplierName
        /// </summary>
        [DataMember(Name="supplierName", EmitDefaultValue=true)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets SerialNo
        /// </summary>
        [DataMember(Name="serialNo", EmitDefaultValue=true)]
        public string SerialNo { get; set; }

        /// <summary>
        /// Gets or Sets OnBehalfOf
        /// </summary>
        [DataMember(Name="onBehalfOf", EmitDefaultValue=true)]
        public string OnBehalfOf { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialUnmatchedDefault {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  NumberFound: ").Append(NumberFound).Append("\n");
            sb.Append("  DefaultDate: ").Append(DefaultDate).Append("\n");
            sb.Append("  DefaultName: ").Append(DefaultName).Append("\n");
            sb.Append("  DefaultTradeStyle: ").Append(DefaultTradeStyle).Append("\n");
            sb.Append("  DefaultAddress: ").Append(DefaultAddress).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SerialNo: ").Append(SerialNo).Append("\n");
            sb.Append("  OnBehalfOf: ").Append(OnBehalfOf).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialUnmatchedDefault);
        }

        /// <summary>
        /// Returns true if TransunionCommercialUnmatchedDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialUnmatchedDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialUnmatchedDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.NumberFound == input.NumberFound ||
                    (this.NumberFound != null &&
                    this.NumberFound.Equals(input.NumberFound))
                ) && 
                (
                    this.DefaultDate == input.DefaultDate ||
                    (this.DefaultDate != null &&
                    this.DefaultDate.Equals(input.DefaultDate))
                ) && 
                (
                    this.DefaultName == input.DefaultName ||
                    (this.DefaultName != null &&
                    this.DefaultName.Equals(input.DefaultName))
                ) && 
                (
                    this.DefaultTradeStyle == input.DefaultTradeStyle ||
                    (this.DefaultTradeStyle != null &&
                    this.DefaultTradeStyle.Equals(input.DefaultTradeStyle))
                ) && 
                (
                    this.DefaultAddress == input.DefaultAddress ||
                    (this.DefaultAddress != null &&
                    this.DefaultAddress.Equals(input.DefaultAddress))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                ) && 
                (
                    this.SupplierName == input.SupplierName ||
                    (this.SupplierName != null &&
                    this.SupplierName.Equals(input.SupplierName))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.SerialNo == input.SerialNo ||
                    (this.SerialNo != null &&
                    this.SerialNo.Equals(input.SerialNo))
                ) && 
                (
                    this.OnBehalfOf == input.OnBehalfOf ||
                    (this.OnBehalfOf != null &&
                    this.OnBehalfOf.Equals(input.OnBehalfOf))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.NumberFound != null)
                    hashCode = hashCode * 59 + this.NumberFound.GetHashCode();
                if (this.DefaultDate != null)
                    hashCode = hashCode * 59 + this.DefaultDate.GetHashCode();
                if (this.DefaultName != null)
                    hashCode = hashCode * 59 + this.DefaultName.GetHashCode();
                if (this.DefaultTradeStyle != null)
                    hashCode = hashCode * 59 + this.DefaultTradeStyle.GetHashCode();
                if (this.DefaultAddress != null)
                    hashCode = hashCode * 59 + this.DefaultAddress.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.SubscriberName != null)
                    hashCode = hashCode * 59 + this.SubscriberName.GetHashCode();
                if (this.SupplierName != null)
                    hashCode = hashCode * 59 + this.SupplierName.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.SerialNo != null)
                    hashCode = hashCode * 59 + this.SerialNo.GetHashCode();
                if (this.OnBehalfOf != null)
                    hashCode = hashCode * 59 + this.OnBehalfOf.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
