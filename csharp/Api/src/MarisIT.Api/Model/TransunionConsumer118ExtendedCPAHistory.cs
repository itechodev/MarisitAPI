/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ExtendedCPAHistory
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ExtendedCPAHistory :  IEquatable<TransunionConsumer118ExtendedCPAHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ExtendedCPAHistory" /> class.
        /// </summary>
        /// <param name="openingBalance">openingBalance.</param>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="overDueAmount">overDueAmount.</param>
        /// <param name="installmentAmount">installmentAmount.</param>
        /// <param name="transactionDate">transactionDate.</param>
        public TransunionConsumer118ExtendedCPAHistory(string openingBalance = default(string), string currentBalance = default(string), string overDueAmount = default(string), string installmentAmount = default(string), string transactionDate = default(string))
        {
            this.OpeningBalance = openingBalance;
            this.CurrentBalance = currentBalance;
            this.OverDueAmount = overDueAmount;
            this.InstallmentAmount = installmentAmount;
            this.TransactionDate = transactionDate;
            this.OpeningBalance = openingBalance;
            this.CurrentBalance = currentBalance;
            this.OverDueAmount = overDueAmount;
            this.InstallmentAmount = installmentAmount;
            this.TransactionDate = transactionDate;
        }

        /// <summary>
        /// Gets or Sets OpeningBalance
        /// </summary>
        [DataMember(Name="openingBalance", EmitDefaultValue=true)]
        public string OpeningBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name="currentBalance", EmitDefaultValue=true)]
        public string CurrentBalance { get; set; }

        /// <summary>
        /// Gets or Sets OverDueAmount
        /// </summary>
        [DataMember(Name="overDueAmount", EmitDefaultValue=true)]
        public string OverDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentAmount
        /// </summary>
        [DataMember(Name="installmentAmount", EmitDefaultValue=true)]
        public string InstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name="transactionDate", EmitDefaultValue=true)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ExtendedCPAHistory {\n");
            sb.Append("  OpeningBalance: ").Append(OpeningBalance).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  OverDueAmount: ").Append(OverDueAmount).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ExtendedCPAHistory);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ExtendedCPAHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ExtendedCPAHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ExtendedCPAHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpeningBalance == input.OpeningBalance ||
                    (this.OpeningBalance != null &&
                    this.OpeningBalance.Equals(input.OpeningBalance))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.OverDueAmount == input.OverDueAmount ||
                    (this.OverDueAmount != null &&
                    this.OverDueAmount.Equals(input.OverDueAmount))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpeningBalance != null)
                    hashCode = hashCode * 59 + this.OpeningBalance.GetHashCode();
                if (this.CurrentBalance != null)
                    hashCode = hashCode * 59 + this.CurrentBalance.GetHashCode();
                if (this.OverDueAmount != null)
                    hashCode = hashCode * 59 + this.OverDueAmount.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
