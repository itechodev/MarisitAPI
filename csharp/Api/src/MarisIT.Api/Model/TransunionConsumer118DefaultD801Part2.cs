/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118DefaultD801Part2
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118DefaultD801Part2 :  IEquatable<TransunionConsumer118DefaultD801Part2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118DefaultD801Part2" /> class.
        /// </summary>
        /// <param name="recordSequence">recordSequence.</param>
        /// <param name="part">part.</param>
        /// <param name="partSequence">partSequence.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="defaultComment1">defaultComment1.</param>
        /// <param name="defaultComment2">defaultComment2.</param>
        /// <param name="defaultComment3">defaultComment3.</param>
        /// <param name="defaultComment4">defaultComment4.</param>
        /// <param name="defaultComment5">defaultComment5.</param>
        /// <param name="defaultComment6">defaultComment6.</param>
        /// <param name="defaultComment7">defaultComment7.</param>
        /// <param name="defaultComment8">defaultComment8.</param>
        /// <param name="defaultComment9">defaultComment9.</param>
        /// <param name="defaultComment10">defaultComment10.</param>
        public TransunionConsumer118DefaultD801Part2(string recordSequence = default(string), string part = default(string), string partSequence = default(string), string consumerNo = default(string), string defaultComment1 = default(string), string defaultComment2 = default(string), string defaultComment3 = default(string), string defaultComment4 = default(string), string defaultComment5 = default(string), string defaultComment6 = default(string), string defaultComment7 = default(string), string defaultComment8 = default(string), string defaultComment9 = default(string), string defaultComment10 = default(string))
        {
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.DefaultComment1 = defaultComment1;
            this.DefaultComment2 = defaultComment2;
            this.DefaultComment3 = defaultComment3;
            this.DefaultComment4 = defaultComment4;
            this.DefaultComment5 = defaultComment5;
            this.DefaultComment6 = defaultComment6;
            this.DefaultComment7 = defaultComment7;
            this.DefaultComment8 = defaultComment8;
            this.DefaultComment9 = defaultComment9;
            this.DefaultComment10 = defaultComment10;
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.DefaultComment1 = defaultComment1;
            this.DefaultComment2 = defaultComment2;
            this.DefaultComment3 = defaultComment3;
            this.DefaultComment4 = defaultComment4;
            this.DefaultComment5 = defaultComment5;
            this.DefaultComment6 = defaultComment6;
            this.DefaultComment7 = defaultComment7;
            this.DefaultComment8 = defaultComment8;
            this.DefaultComment9 = defaultComment9;
            this.DefaultComment10 = defaultComment10;
        }

        /// <summary>
        /// Gets or Sets RecordSequence
        /// </summary>
        [DataMember(Name="recordSequence", EmitDefaultValue=true)]
        public string RecordSequence { get; set; }

        /// <summary>
        /// Gets or Sets Part
        /// </summary>
        [DataMember(Name="part", EmitDefaultValue=true)]
        public string Part { get; set; }

        /// <summary>
        /// Gets or Sets PartSequence
        /// </summary>
        [DataMember(Name="partSequence", EmitDefaultValue=true)]
        public string PartSequence { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment1
        /// </summary>
        [DataMember(Name="defaultComment1", EmitDefaultValue=true)]
        public string DefaultComment1 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment2
        /// </summary>
        [DataMember(Name="defaultComment2", EmitDefaultValue=true)]
        public string DefaultComment2 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment3
        /// </summary>
        [DataMember(Name="defaultComment3", EmitDefaultValue=true)]
        public string DefaultComment3 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment4
        /// </summary>
        [DataMember(Name="defaultComment4", EmitDefaultValue=true)]
        public string DefaultComment4 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment5
        /// </summary>
        [DataMember(Name="defaultComment5", EmitDefaultValue=true)]
        public string DefaultComment5 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment6
        /// </summary>
        [DataMember(Name="defaultComment6", EmitDefaultValue=true)]
        public string DefaultComment6 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment7
        /// </summary>
        [DataMember(Name="defaultComment7", EmitDefaultValue=true)]
        public string DefaultComment7 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment8
        /// </summary>
        [DataMember(Name="defaultComment8", EmitDefaultValue=true)]
        public string DefaultComment8 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment9
        /// </summary>
        [DataMember(Name="defaultComment9", EmitDefaultValue=true)]
        public string DefaultComment9 { get; set; }

        /// <summary>
        /// Gets or Sets DefaultComment10
        /// </summary>
        [DataMember(Name="defaultComment10", EmitDefaultValue=true)]
        public string DefaultComment10 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118DefaultD801Part2 {\n");
            sb.Append("  RecordSequence: ").Append(RecordSequence).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("  PartSequence: ").Append(PartSequence).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  DefaultComment1: ").Append(DefaultComment1).Append("\n");
            sb.Append("  DefaultComment2: ").Append(DefaultComment2).Append("\n");
            sb.Append("  DefaultComment3: ").Append(DefaultComment3).Append("\n");
            sb.Append("  DefaultComment4: ").Append(DefaultComment4).Append("\n");
            sb.Append("  DefaultComment5: ").Append(DefaultComment5).Append("\n");
            sb.Append("  DefaultComment6: ").Append(DefaultComment6).Append("\n");
            sb.Append("  DefaultComment7: ").Append(DefaultComment7).Append("\n");
            sb.Append("  DefaultComment8: ").Append(DefaultComment8).Append("\n");
            sb.Append("  DefaultComment9: ").Append(DefaultComment9).Append("\n");
            sb.Append("  DefaultComment10: ").Append(DefaultComment10).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118DefaultD801Part2);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118DefaultD801Part2 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118DefaultD801Part2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118DefaultD801Part2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordSequence == input.RecordSequence ||
                    (this.RecordSequence != null &&
                    this.RecordSequence.Equals(input.RecordSequence))
                ) && 
                (
                    this.Part == input.Part ||
                    (this.Part != null &&
                    this.Part.Equals(input.Part))
                ) && 
                (
                    this.PartSequence == input.PartSequence ||
                    (this.PartSequence != null &&
                    this.PartSequence.Equals(input.PartSequence))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.DefaultComment1 == input.DefaultComment1 ||
                    (this.DefaultComment1 != null &&
                    this.DefaultComment1.Equals(input.DefaultComment1))
                ) && 
                (
                    this.DefaultComment2 == input.DefaultComment2 ||
                    (this.DefaultComment2 != null &&
                    this.DefaultComment2.Equals(input.DefaultComment2))
                ) && 
                (
                    this.DefaultComment3 == input.DefaultComment3 ||
                    (this.DefaultComment3 != null &&
                    this.DefaultComment3.Equals(input.DefaultComment3))
                ) && 
                (
                    this.DefaultComment4 == input.DefaultComment4 ||
                    (this.DefaultComment4 != null &&
                    this.DefaultComment4.Equals(input.DefaultComment4))
                ) && 
                (
                    this.DefaultComment5 == input.DefaultComment5 ||
                    (this.DefaultComment5 != null &&
                    this.DefaultComment5.Equals(input.DefaultComment5))
                ) && 
                (
                    this.DefaultComment6 == input.DefaultComment6 ||
                    (this.DefaultComment6 != null &&
                    this.DefaultComment6.Equals(input.DefaultComment6))
                ) && 
                (
                    this.DefaultComment7 == input.DefaultComment7 ||
                    (this.DefaultComment7 != null &&
                    this.DefaultComment7.Equals(input.DefaultComment7))
                ) && 
                (
                    this.DefaultComment8 == input.DefaultComment8 ||
                    (this.DefaultComment8 != null &&
                    this.DefaultComment8.Equals(input.DefaultComment8))
                ) && 
                (
                    this.DefaultComment9 == input.DefaultComment9 ||
                    (this.DefaultComment9 != null &&
                    this.DefaultComment9.Equals(input.DefaultComment9))
                ) && 
                (
                    this.DefaultComment10 == input.DefaultComment10 ||
                    (this.DefaultComment10 != null &&
                    this.DefaultComment10.Equals(input.DefaultComment10))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordSequence != null)
                    hashCode = hashCode * 59 + this.RecordSequence.GetHashCode();
                if (this.Part != null)
                    hashCode = hashCode * 59 + this.Part.GetHashCode();
                if (this.PartSequence != null)
                    hashCode = hashCode * 59 + this.PartSequence.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.DefaultComment1 != null)
                    hashCode = hashCode * 59 + this.DefaultComment1.GetHashCode();
                if (this.DefaultComment2 != null)
                    hashCode = hashCode * 59 + this.DefaultComment2.GetHashCode();
                if (this.DefaultComment3 != null)
                    hashCode = hashCode * 59 + this.DefaultComment3.GetHashCode();
                if (this.DefaultComment4 != null)
                    hashCode = hashCode * 59 + this.DefaultComment4.GetHashCode();
                if (this.DefaultComment5 != null)
                    hashCode = hashCode * 59 + this.DefaultComment5.GetHashCode();
                if (this.DefaultComment6 != null)
                    hashCode = hashCode * 59 + this.DefaultComment6.GetHashCode();
                if (this.DefaultComment7 != null)
                    hashCode = hashCode * 59 + this.DefaultComment7.GetHashCode();
                if (this.DefaultComment8 != null)
                    hashCode = hashCode * 59 + this.DefaultComment8.GetHashCode();
                if (this.DefaultComment9 != null)
                    hashCode = hashCode * 59 + this.DefaultComment9.GetHashCode();
                if (this.DefaultComment10 != null)
                    hashCode = hashCode * 59 + this.DefaultComment10.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
