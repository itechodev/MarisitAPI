/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ActiveVehicles
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ActiveVehicles :  IEquatable<TransunionConsumer118ActiveVehicles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ActiveVehicles" /> class.
        /// </summary>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="vehicleCancellationDate">vehicleCancellationDate.</param>
        /// <param name="vehicleRiskType">vehicleRiskType.</param>
        /// <param name="coverType">coverType.</param>
        /// <param name="viNChassisNumber">viNChassisNumber.</param>
        /// <param name="engineNumber">engineNumber.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        /// <param name="yearofRegistration">yearofRegistration.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="colour">colour.</param>
        /// <param name="driverSameAsPolicyholder">driverSameAsPolicyholder.</param>
        public TransunionConsumer118ActiveVehicles(string effectiveDate = default(string), string vehicleCancellationDate = default(string), string vehicleRiskType = default(string), string coverType = default(string), string viNChassisNumber = default(string), string engineNumber = default(string), string registrationNumber = default(string), string yearofRegistration = default(string), string make = default(string), string model = default(string), string colour = default(string), string driverSameAsPolicyholder = default(string))
        {
            this.EffectiveDate = effectiveDate;
            this.VehicleCancellationDate = vehicleCancellationDate;
            this.VehicleRiskType = vehicleRiskType;
            this.CoverType = coverType;
            this.ViNChassisNumber = viNChassisNumber;
            this.EngineNumber = engineNumber;
            this.RegistrationNumber = registrationNumber;
            this.YearofRegistration = yearofRegistration;
            this.Make = make;
            this.Model = model;
            this.Colour = colour;
            this.DriverSameAsPolicyholder = driverSameAsPolicyholder;
            this.EffectiveDate = effectiveDate;
            this.VehicleCancellationDate = vehicleCancellationDate;
            this.VehicleRiskType = vehicleRiskType;
            this.CoverType = coverType;
            this.ViNChassisNumber = viNChassisNumber;
            this.EngineNumber = engineNumber;
            this.RegistrationNumber = registrationNumber;
            this.YearofRegistration = yearofRegistration;
            this.Make = make;
            this.Model = model;
            this.Colour = colour;
            this.DriverSameAsPolicyholder = driverSameAsPolicyholder;
        }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=true)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets VehicleCancellationDate
        /// </summary>
        [DataMember(Name="vehicleCancellationDate", EmitDefaultValue=true)]
        public string VehicleCancellationDate { get; set; }

        /// <summary>
        /// Gets or Sets VehicleRiskType
        /// </summary>
        [DataMember(Name="vehicleRiskType", EmitDefaultValue=true)]
        public string VehicleRiskType { get; set; }

        /// <summary>
        /// Gets or Sets CoverType
        /// </summary>
        [DataMember(Name="coverType", EmitDefaultValue=true)]
        public string CoverType { get; set; }

        /// <summary>
        /// Gets or Sets ViNChassisNumber
        /// </summary>
        [DataMember(Name="viN_ChassisNumber", EmitDefaultValue=true)]
        public string ViNChassisNumber { get; set; }

        /// <summary>
        /// Gets or Sets EngineNumber
        /// </summary>
        [DataMember(Name="engineNumber", EmitDefaultValue=true)]
        public string EngineNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=true)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets YearofRegistration
        /// </summary>
        [DataMember(Name="yearofRegistration", EmitDefaultValue=true)]
        public string YearofRegistration { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=true)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Colour
        /// </summary>
        [DataMember(Name="colour", EmitDefaultValue=true)]
        public string Colour { get; set; }

        /// <summary>
        /// Gets or Sets DriverSameAsPolicyholder
        /// </summary>
        [DataMember(Name="driverSameAsPolicyholder", EmitDefaultValue=true)]
        public string DriverSameAsPolicyholder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ActiveVehicles {\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  VehicleCancellationDate: ").Append(VehicleCancellationDate).Append("\n");
            sb.Append("  VehicleRiskType: ").Append(VehicleRiskType).Append("\n");
            sb.Append("  CoverType: ").Append(CoverType).Append("\n");
            sb.Append("  ViNChassisNumber: ").Append(ViNChassisNumber).Append("\n");
            sb.Append("  EngineNumber: ").Append(EngineNumber).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  YearofRegistration: ").Append(YearofRegistration).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("  DriverSameAsPolicyholder: ").Append(DriverSameAsPolicyholder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ActiveVehicles);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ActiveVehicles instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ActiveVehicles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ActiveVehicles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.VehicleCancellationDate == input.VehicleCancellationDate ||
                    (this.VehicleCancellationDate != null &&
                    this.VehicleCancellationDate.Equals(input.VehicleCancellationDate))
                ) && 
                (
                    this.VehicleRiskType == input.VehicleRiskType ||
                    (this.VehicleRiskType != null &&
                    this.VehicleRiskType.Equals(input.VehicleRiskType))
                ) && 
                (
                    this.CoverType == input.CoverType ||
                    (this.CoverType != null &&
                    this.CoverType.Equals(input.CoverType))
                ) && 
                (
                    this.ViNChassisNumber == input.ViNChassisNumber ||
                    (this.ViNChassisNumber != null &&
                    this.ViNChassisNumber.Equals(input.ViNChassisNumber))
                ) && 
                (
                    this.EngineNumber == input.EngineNumber ||
                    (this.EngineNumber != null &&
                    this.EngineNumber.Equals(input.EngineNumber))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.YearofRegistration == input.YearofRegistration ||
                    (this.YearofRegistration != null &&
                    this.YearofRegistration.Equals(input.YearofRegistration))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Colour == input.Colour ||
                    (this.Colour != null &&
                    this.Colour.Equals(input.Colour))
                ) && 
                (
                    this.DriverSameAsPolicyholder == input.DriverSameAsPolicyholder ||
                    (this.DriverSameAsPolicyholder != null &&
                    this.DriverSameAsPolicyholder.Equals(input.DriverSameAsPolicyholder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.VehicleCancellationDate != null)
                    hashCode = hashCode * 59 + this.VehicleCancellationDate.GetHashCode();
                if (this.VehicleRiskType != null)
                    hashCode = hashCode * 59 + this.VehicleRiskType.GetHashCode();
                if (this.CoverType != null)
                    hashCode = hashCode * 59 + this.CoverType.GetHashCode();
                if (this.ViNChassisNumber != null)
                    hashCode = hashCode * 59 + this.ViNChassisNumber.GetHashCode();
                if (this.EngineNumber != null)
                    hashCode = hashCode * 59 + this.EngineNumber.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.YearofRegistration != null)
                    hashCode = hashCode * 59 + this.YearofRegistration.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Colour != null)
                    hashCode = hashCode * 59 + this.Colour.GetHashCode();
                if (this.DriverSameAsPolicyholder != null)
                    hashCode = hashCode * 59 + this.DriverSameAsPolicyholder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
