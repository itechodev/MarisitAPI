/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCommercialContactHistory
    /// </summary>
    [DataContract]
    public partial class XdsCommercialContactHistory :  IEquatable<XdsCommercialContactHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialContactHistory" /> class.
        /// </summary>
        /// <param name="commercialName">commercialName.</param>
        /// <param name="contactNumberType">contactNumberType.</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="createdOnDate">createdOnDate.</param>
        /// <param name="detail">detail.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="occupiedDate">occupiedDate.</param>
        /// <param name="registrationNo">registrationNo.</param>
        /// <param name="source">source.</param>
        /// <param name="commercialID">commercialID.</param>
        public XdsCommercialContactHistory(string commercialName = default(string), string contactNumberType = default(string), string contactPerson = default(string), string createdOnDate = default(string), string detail = default(string), string displayText = default(string), string occupiedDate = default(string), string registrationNo = default(string), string source = default(string), string commercialID = default(string))
        {
            this.CommercialName = commercialName;
            this.ContactNumberType = contactNumberType;
            this.ContactPerson = contactPerson;
            this.CreatedOnDate = createdOnDate;
            this.Detail = detail;
            this.DisplayText = displayText;
            this.OccupiedDate = occupiedDate;
            this.RegistrationNo = registrationNo;
            this.Source = source;
            this.CommercialID = commercialID;
            this.CommercialName = commercialName;
            this.ContactNumberType = contactNumberType;
            this.ContactPerson = contactPerson;
            this.CreatedOnDate = createdOnDate;
            this.Detail = detail;
            this.DisplayText = displayText;
            this.OccupiedDate = occupiedDate;
            this.RegistrationNo = registrationNo;
            this.Source = source;
            this.CommercialID = commercialID;
        }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="commercialName", EmitDefaultValue=true)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets ContactNumberType
        /// </summary>
        [DataMember(Name="contactNumberType", EmitDefaultValue=true)]
        public string ContactNumberType { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOnDate
        /// </summary>
        [DataMember(Name="createdOnDate", EmitDefaultValue=true)]
        public string CreatedOnDate { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name="detail", EmitDefaultValue=true)]
        public string Detail { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets OccupiedDate
        /// </summary>
        [DataMember(Name="occupiedDate", EmitDefaultValue=true)]
        public string OccupiedDate { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNo
        /// </summary>
        [DataMember(Name="registrationNo", EmitDefaultValue=true)]
        public string RegistrationNo { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets CommercialID
        /// </summary>
        [DataMember(Name="commercialID", EmitDefaultValue=true)]
        public string CommercialID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCommercialContactHistory {\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  ContactNumberType: ").Append(ContactNumberType).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  CreatedOnDate: ").Append(CreatedOnDate).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  OccupiedDate: ").Append(OccupiedDate).Append("\n");
            sb.Append("  RegistrationNo: ").Append(RegistrationNo).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  CommercialID: ").Append(CommercialID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCommercialContactHistory);
        }

        /// <summary>
        /// Returns true if XdsCommercialContactHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCommercialContactHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCommercialContactHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.ContactNumberType == input.ContactNumberType ||
                    (this.ContactNumberType != null &&
                    this.ContactNumberType.Equals(input.ContactNumberType))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.CreatedOnDate == input.CreatedOnDate ||
                    (this.CreatedOnDate != null &&
                    this.CreatedOnDate.Equals(input.CreatedOnDate))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.OccupiedDate == input.OccupiedDate ||
                    (this.OccupiedDate != null &&
                    this.OccupiedDate.Equals(input.OccupiedDate))
                ) && 
                (
                    this.RegistrationNo == input.RegistrationNo ||
                    (this.RegistrationNo != null &&
                    this.RegistrationNo.Equals(input.RegistrationNo))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.CommercialID == input.CommercialID ||
                    (this.CommercialID != null &&
                    this.CommercialID.Equals(input.CommercialID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.ContactNumberType != null)
                    hashCode = hashCode * 59 + this.ContactNumberType.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.CreatedOnDate != null)
                    hashCode = hashCode * 59 + this.CreatedOnDate.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.OccupiedDate != null)
                    hashCode = hashCode * 59 + this.OccupiedDate.GetHashCode();
                if (this.RegistrationNo != null)
                    hashCode = hashCode * 59 + this.RegistrationNo.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.CommercialID != null)
                    hashCode = hashCode * 59 + this.CommercialID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
