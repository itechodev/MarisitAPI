/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118PaySlipDetailsResponse
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118PaySlipDetailsResponse :  IEquatable<TransunionConsumer118PaySlipDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118PaySlipDetailsResponse" /> class.
        /// </summary>
        /// <param name="resultIndicator">resultIndicator.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="errorMessage">errorMessage.</param>
        /// <param name="errorComment">errorComment.</param>
        /// <param name="employed">employed.</param>
        /// <param name="terminated">terminated.</param>
        public TransunionConsumer118PaySlipDetailsResponse(int resultIndicator = default(int), string errorCode = default(string), string errorMessage = default(string), string errorComment = default(string), TransunionConsumer118EmployedDTO employed = default(TransunionConsumer118EmployedDTO), TransunionConsumer118TerminationDTO terminated = default(TransunionConsumer118TerminationDTO))
        {
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.ErrorComment = errorComment;
            this.ResultIndicator = resultIndicator;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.ErrorComment = errorComment;
            this.Employed = employed;
            this.Terminated = terminated;
        }

        /// <summary>
        /// Gets or Sets ResultIndicator
        /// </summary>
        [DataMember(Name="resultIndicator", EmitDefaultValue=false)]
        public int ResultIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets ErrorComment
        /// </summary>
        [DataMember(Name="errorComment", EmitDefaultValue=true)]
        public string ErrorComment { get; set; }

        /// <summary>
        /// Gets or Sets Employed
        /// </summary>
        [DataMember(Name="employed", EmitDefaultValue=false)]
        public TransunionConsumer118EmployedDTO Employed { get; set; }

        /// <summary>
        /// Gets or Sets Terminated
        /// </summary>
        [DataMember(Name="terminated", EmitDefaultValue=false)]
        public TransunionConsumer118TerminationDTO Terminated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118PaySlipDetailsResponse {\n");
            sb.Append("  ResultIndicator: ").Append(ResultIndicator).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorComment: ").Append(ErrorComment).Append("\n");
            sb.Append("  Employed: ").Append(Employed).Append("\n");
            sb.Append("  Terminated: ").Append(Terminated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118PaySlipDetailsResponse);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118PaySlipDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118PaySlipDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118PaySlipDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultIndicator == input.ResultIndicator ||
                    (this.ResultIndicator != null &&
                    this.ResultIndicator.Equals(input.ResultIndicator))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.ErrorComment == input.ErrorComment ||
                    (this.ErrorComment != null &&
                    this.ErrorComment.Equals(input.ErrorComment))
                ) && 
                (
                    this.Employed == input.Employed ||
                    (this.Employed != null &&
                    this.Employed.Equals(input.Employed))
                ) && 
                (
                    this.Terminated == input.Terminated ||
                    (this.Terminated != null &&
                    this.Terminated.Equals(input.Terminated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultIndicator != null)
                    hashCode = hashCode * 59 + this.ResultIndicator.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.ErrorComment != null)
                    hashCode = hashCode * 59 + this.ErrorComment.GetHashCode();
                if (this.Employed != null)
                    hashCode = hashCode * 59 + this.Employed.GetHashCode();
                if (this.Terminated != null)
                    hashCode = hashCode * 59 + this.Terminated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
