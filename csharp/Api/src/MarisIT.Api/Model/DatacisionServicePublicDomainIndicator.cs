/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// DatacisionServicePublicDomainIndicator
    /// </summary>
    [DataContract]
    public partial class DatacisionServicePublicDomainIndicator :  IEquatable<DatacisionServicePublicDomainIndicator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatacisionServicePublicDomainIndicator" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="hasAdminOrder">hasAdminOrder.</param>
        /// <param name="hasCipro">hasCipro.</param>
        /// <param name="hasDebtReview">hasDebtReview.</param>
        /// <param name="hasDeed">hasDeed.</param>
        /// <param name="hasDefault">hasDefault.</param>
        /// <param name="hasJudgement">hasJudgement.</param>
        /// <param name="hasSequestration">hasSequestration.</param>
        public DatacisionServicePublicDomainIndicator(DateTime? date = default(DateTime?), bool hasAdminOrder = default(bool), bool hasCipro = default(bool), bool hasDebtReview = default(bool), bool hasDeed = default(bool), bool hasDefault = default(bool), bool hasJudgement = default(bool), bool hasSequestration = default(bool))
        {
            this.Date = date;
            this.Date = date;
            this.HasAdminOrder = hasAdminOrder;
            this.HasCipro = hasCipro;
            this.HasDebtReview = hasDebtReview;
            this.HasDeed = hasDeed;
            this.HasDefault = hasDefault;
            this.HasJudgement = hasJudgement;
            this.HasSequestration = hasSequestration;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets HasAdminOrder
        /// </summary>
        [DataMember(Name="hasAdminOrder", EmitDefaultValue=false)]
        public bool HasAdminOrder { get; set; }

        /// <summary>
        /// Gets or Sets HasCipro
        /// </summary>
        [DataMember(Name="hasCipro", EmitDefaultValue=false)]
        public bool HasCipro { get; set; }

        /// <summary>
        /// Gets or Sets HasDebtReview
        /// </summary>
        [DataMember(Name="hasDebtReview", EmitDefaultValue=false)]
        public bool HasDebtReview { get; set; }

        /// <summary>
        /// Gets or Sets HasDeed
        /// </summary>
        [DataMember(Name="hasDeed", EmitDefaultValue=false)]
        public bool HasDeed { get; set; }

        /// <summary>
        /// Gets or Sets HasDefault
        /// </summary>
        [DataMember(Name="hasDefault", EmitDefaultValue=false)]
        public bool HasDefault { get; set; }

        /// <summary>
        /// Gets or Sets HasJudgement
        /// </summary>
        [DataMember(Name="hasJudgement", EmitDefaultValue=false)]
        public bool HasJudgement { get; set; }

        /// <summary>
        /// Gets or Sets HasSequestration
        /// </summary>
        [DataMember(Name="hasSequestration", EmitDefaultValue=false)]
        public bool HasSequestration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatacisionServicePublicDomainIndicator {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  HasAdminOrder: ").Append(HasAdminOrder).Append("\n");
            sb.Append("  HasCipro: ").Append(HasCipro).Append("\n");
            sb.Append("  HasDebtReview: ").Append(HasDebtReview).Append("\n");
            sb.Append("  HasDeed: ").Append(HasDeed).Append("\n");
            sb.Append("  HasDefault: ").Append(HasDefault).Append("\n");
            sb.Append("  HasJudgement: ").Append(HasJudgement).Append("\n");
            sb.Append("  HasSequestration: ").Append(HasSequestration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatacisionServicePublicDomainIndicator);
        }

        /// <summary>
        /// Returns true if DatacisionServicePublicDomainIndicator instances are equal
        /// </summary>
        /// <param name="input">Instance of DatacisionServicePublicDomainIndicator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatacisionServicePublicDomainIndicator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.HasAdminOrder == input.HasAdminOrder ||
                    (this.HasAdminOrder != null &&
                    this.HasAdminOrder.Equals(input.HasAdminOrder))
                ) && 
                (
                    this.HasCipro == input.HasCipro ||
                    (this.HasCipro != null &&
                    this.HasCipro.Equals(input.HasCipro))
                ) && 
                (
                    this.HasDebtReview == input.HasDebtReview ||
                    (this.HasDebtReview != null &&
                    this.HasDebtReview.Equals(input.HasDebtReview))
                ) && 
                (
                    this.HasDeed == input.HasDeed ||
                    (this.HasDeed != null &&
                    this.HasDeed.Equals(input.HasDeed))
                ) && 
                (
                    this.HasDefault == input.HasDefault ||
                    (this.HasDefault != null &&
                    this.HasDefault.Equals(input.HasDefault))
                ) && 
                (
                    this.HasJudgement == input.HasJudgement ||
                    (this.HasJudgement != null &&
                    this.HasJudgement.Equals(input.HasJudgement))
                ) && 
                (
                    this.HasSequestration == input.HasSequestration ||
                    (this.HasSequestration != null &&
                    this.HasSequestration.Equals(input.HasSequestration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.HasAdminOrder != null)
                    hashCode = hashCode * 59 + this.HasAdminOrder.GetHashCode();
                if (this.HasCipro != null)
                    hashCode = hashCode * 59 + this.HasCipro.GetHashCode();
                if (this.HasDebtReview != null)
                    hashCode = hashCode * 59 + this.HasDebtReview.GetHashCode();
                if (this.HasDeed != null)
                    hashCode = hashCode * 59 + this.HasDeed.GetHashCode();
                if (this.HasDefault != null)
                    hashCode = hashCode * 59 + this.HasDefault.GetHashCode();
                if (this.HasJudgement != null)
                    hashCode = hashCode * 59 + this.HasJudgement.GetHashCode();
                if (this.HasSequestration != null)
                    hashCode = hashCode * 59 + this.HasSequestration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
