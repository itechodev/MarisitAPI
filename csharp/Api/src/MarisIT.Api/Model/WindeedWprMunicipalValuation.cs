/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprMunicipalValuation
    /// </summary>
    [DataContract]
    public partial class WindeedWprMunicipalValuation :  IEquatable<WindeedWprMunicipalValuation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprMunicipalValuation" /> class.
        /// </summary>
        /// <param name="valuation">valuation.</param>
        /// <param name="year">year.</param>
        /// <param name="zoning">zoning.</param>
        public WindeedWprMunicipalValuation(double? valuation = default(double?), int? year = default(int?), string zoning = default(string))
        {
            this.Valuation = valuation;
            this.Year = year;
            this.Zoning = zoning;
            this.Valuation = valuation;
            this.Year = year;
            this.Zoning = zoning;
        }

        /// <summary>
        /// Gets or Sets Valuation
        /// </summary>
        [DataMember(Name="valuation", EmitDefaultValue=true)]
        public double? Valuation { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=true)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets Zoning
        /// </summary>
        [DataMember(Name="zoning", EmitDefaultValue=true)]
        public string Zoning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprMunicipalValuation {\n");
            sb.Append("  Valuation: ").Append(Valuation).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Zoning: ").Append(Zoning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprMunicipalValuation);
        }

        /// <summary>
        /// Returns true if WindeedWprMunicipalValuation instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprMunicipalValuation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprMunicipalValuation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valuation == input.Valuation ||
                    (this.Valuation != null &&
                    this.Valuation.Equals(input.Valuation))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Zoning == input.Zoning ||
                    (this.Zoning != null &&
                    this.Zoning.Equals(input.Zoning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valuation != null)
                    hashCode = hashCode * 59 + this.Valuation.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Zoning != null)
                    hashCode = hashCode * 59 + this.Zoning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
