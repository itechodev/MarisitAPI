/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialBankingDetailSummary
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialBankingDetailSummary :  IEquatable<TransunionCommercialBankingDetailSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialBankingDetailSummary" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="bankName">bankName.</param>
        /// <param name="bankBranch">bankBranch.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="bankCodeDescription">bankCodeDescription.</param>
        /// <param name="amount">amount.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="terms">terms.</param>
        /// <param name="date">date.</param>
        public TransunionCommercialBankingDetailSummary(string majorProduct = default(string), string accountNumber = default(string), string bankName = default(string), string bankBranch = default(string), string bankCode = default(string), string bankCodeDescription = default(string), string amount = default(string), string startDate = default(string), string terms = default(string), string date = default(string))
        {
            this.MajorProduct = majorProduct;
            this.AccountNumber = accountNumber;
            this.BankName = bankName;
            this.BankBranch = bankBranch;
            this.BankCode = bankCode;
            this.BankCodeDescription = bankCodeDescription;
            this.Amount = amount;
            this.StartDate = startDate;
            this.Terms = terms;
            this.Date = date;
            this.MajorProduct = majorProduct;
            this.AccountNumber = accountNumber;
            this.BankName = bankName;
            this.BankBranch = bankBranch;
            this.BankCode = bankCode;
            this.BankCodeDescription = bankCodeDescription;
            this.Amount = amount;
            this.StartDate = startDate;
            this.Terms = terms;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=true)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BankBranch
        /// </summary>
        [DataMember(Name="bankBranch", EmitDefaultValue=true)]
        public string BankBranch { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name="bankCode", EmitDefaultValue=true)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets BankCodeDescription
        /// </summary>
        [DataMember(Name="bankCodeDescription", EmitDefaultValue=true)]
        public string BankCodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=true)]
        public string Terms { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialBankingDetailSummary {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankBranch: ").Append(BankBranch).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankCodeDescription: ").Append(BankCodeDescription).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialBankingDetailSummary);
        }

        /// <summary>
        /// Returns true if TransunionCommercialBankingDetailSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialBankingDetailSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialBankingDetailSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankBranch == input.BankBranch ||
                    (this.BankBranch != null &&
                    this.BankBranch.Equals(input.BankBranch))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BankCodeDescription == input.BankCodeDescription ||
                    (this.BankCodeDescription != null &&
                    this.BankCodeDescription.Equals(input.BankCodeDescription))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankBranch != null)
                    hashCode = hashCode * 59 + this.BankBranch.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BankCodeDescription != null)
                    hashCode = hashCode * 59 + this.BankCodeDescription.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
