/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprTrendDataForPropertyTypes
    /// </summary>
    [DataContract]
    public partial class WindeedWprTrendDataForPropertyTypes :  IEquatable<WindeedWprTrendDataForPropertyTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprTrendDataForPropertyTypes" /> class.
        /// </summary>
        /// <param name="propertyTypes">propertyTypes.</param>
        /// <param name="propertyTypesDisplayName">propertyTypesDisplayName.</param>
        /// <param name="salesCount">salesCount.</param>
        /// <param name="averagePrice">averagePrice.</param>
        /// <param name="propertyTypeColourHex">propertyTypeColourHex.</param>
        public WindeedWprTrendDataForPropertyTypes(List<WindeedWprPropertyType> propertyTypes = default(List<WindeedWprPropertyType>), string propertyTypesDisplayName = default(string), int? salesCount = default(int?), double? averagePrice = default(double?), string propertyTypeColourHex = default(string))
        {
            this.PropertyTypes = propertyTypes;
            this.PropertyTypesDisplayName = propertyTypesDisplayName;
            this.SalesCount = salesCount;
            this.AveragePrice = averagePrice;
            this.PropertyTypeColourHex = propertyTypeColourHex;
            this.PropertyTypes = propertyTypes;
            this.PropertyTypesDisplayName = propertyTypesDisplayName;
            this.SalesCount = salesCount;
            this.AveragePrice = averagePrice;
            this.PropertyTypeColourHex = propertyTypeColourHex;
        }

        /// <summary>
        /// Gets or Sets PropertyTypes
        /// </summary>
        [DataMember(Name="propertyTypes", EmitDefaultValue=true)]
        public List<WindeedWprPropertyType> PropertyTypes { get; set; }

        /// <summary>
        /// Gets or Sets PropertyTypesDisplayName
        /// </summary>
        [DataMember(Name="propertyTypesDisplayName", EmitDefaultValue=true)]
        public string PropertyTypesDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SalesCount
        /// </summary>
        [DataMember(Name="salesCount", EmitDefaultValue=true)]
        public int? SalesCount { get; set; }

        /// <summary>
        /// Gets or Sets AveragePrice
        /// </summary>
        [DataMember(Name="averagePrice", EmitDefaultValue=true)]
        public double? AveragePrice { get; set; }

        /// <summary>
        /// Gets or Sets PropertyTypeColourHex
        /// </summary>
        [DataMember(Name="propertyTypeColourHex", EmitDefaultValue=true)]
        public string PropertyTypeColourHex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprTrendDataForPropertyTypes {\n");
            sb.Append("  PropertyTypes: ").Append(PropertyTypes).Append("\n");
            sb.Append("  PropertyTypesDisplayName: ").Append(PropertyTypesDisplayName).Append("\n");
            sb.Append("  SalesCount: ").Append(SalesCount).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  PropertyTypeColourHex: ").Append(PropertyTypeColourHex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprTrendDataForPropertyTypes);
        }

        /// <summary>
        /// Returns true if WindeedWprTrendDataForPropertyTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprTrendDataForPropertyTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprTrendDataForPropertyTypes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PropertyTypes == input.PropertyTypes ||
                    this.PropertyTypes != null &&
                    input.PropertyTypes != null &&
                    this.PropertyTypes.SequenceEqual(input.PropertyTypes)
                ) && 
                (
                    this.PropertyTypesDisplayName == input.PropertyTypesDisplayName ||
                    (this.PropertyTypesDisplayName != null &&
                    this.PropertyTypesDisplayName.Equals(input.PropertyTypesDisplayName))
                ) && 
                (
                    this.SalesCount == input.SalesCount ||
                    (this.SalesCount != null &&
                    this.SalesCount.Equals(input.SalesCount))
                ) && 
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) && 
                (
                    this.PropertyTypeColourHex == input.PropertyTypeColourHex ||
                    (this.PropertyTypeColourHex != null &&
                    this.PropertyTypeColourHex.Equals(input.PropertyTypeColourHex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyTypes != null)
                    hashCode = hashCode * 59 + this.PropertyTypes.GetHashCode();
                if (this.PropertyTypesDisplayName != null)
                    hashCode = hashCode * 59 + this.PropertyTypesDisplayName.GetHashCode();
                if (this.SalesCount != null)
                    hashCode = hashCode * 59 + this.SalesCount.GetHashCode();
                if (this.AveragePrice != null)
                    hashCode = hashCode * 59 + this.AveragePrice.GetHashCode();
                if (this.PropertyTypeColourHex != null)
                    hashCode = hashCode * 59 + this.PropertyTypeColourHex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
