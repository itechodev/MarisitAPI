/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialComplianceIndicatorLI
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialComplianceIndicatorLI :  IEquatable<TransunionCommercialComplianceIndicatorLI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialComplianceIndicatorLI" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="itNumber">itNumber.</param>
        /// <param name="segmentType">segmentType.</param>
        /// <param name="ncaComplianceInd">ncaComplianceInd.</param>
        /// <param name="cpaComplianceInd">cpaComplianceInd.</param>
        /// <param name="date">date.</param>
        public TransunionCommercialComplianceIndicatorLI(string majorProduct = default(string), string itNumber = default(string), string segmentType = default(string), string ncaComplianceInd = default(string), string cpaComplianceInd = default(string), string date = default(string))
        {
            this.MajorProduct = majorProduct;
            this.ItNumber = itNumber;
            this.SegmentType = segmentType;
            this.NcaComplianceInd = ncaComplianceInd;
            this.CpaComplianceInd = cpaComplianceInd;
            this.Date = date;
            this.MajorProduct = majorProduct;
            this.ItNumber = itNumber;
            this.SegmentType = segmentType;
            this.NcaComplianceInd = ncaComplianceInd;
            this.CpaComplianceInd = cpaComplianceInd;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets ItNumber
        /// </summary>
        [DataMember(Name="itNumber", EmitDefaultValue=true)]
        public string ItNumber { get; set; }

        /// <summary>
        /// Gets or Sets SegmentType
        /// </summary>
        [DataMember(Name="segmentType", EmitDefaultValue=true)]
        public string SegmentType { get; set; }

        /// <summary>
        /// Gets or Sets NcaComplianceInd
        /// </summary>
        [DataMember(Name="ncaComplianceInd", EmitDefaultValue=true)]
        public string NcaComplianceInd { get; set; }

        /// <summary>
        /// Gets or Sets CpaComplianceInd
        /// </summary>
        [DataMember(Name="cpaComplianceInd", EmitDefaultValue=true)]
        public string CpaComplianceInd { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialComplianceIndicatorLI {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  ItNumber: ").Append(ItNumber).Append("\n");
            sb.Append("  SegmentType: ").Append(SegmentType).Append("\n");
            sb.Append("  NcaComplianceInd: ").Append(NcaComplianceInd).Append("\n");
            sb.Append("  CpaComplianceInd: ").Append(CpaComplianceInd).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialComplianceIndicatorLI);
        }

        /// <summary>
        /// Returns true if TransunionCommercialComplianceIndicatorLI instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialComplianceIndicatorLI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialComplianceIndicatorLI input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.ItNumber == input.ItNumber ||
                    (this.ItNumber != null &&
                    this.ItNumber.Equals(input.ItNumber))
                ) && 
                (
                    this.SegmentType == input.SegmentType ||
                    (this.SegmentType != null &&
                    this.SegmentType.Equals(input.SegmentType))
                ) && 
                (
                    this.NcaComplianceInd == input.NcaComplianceInd ||
                    (this.NcaComplianceInd != null &&
                    this.NcaComplianceInd.Equals(input.NcaComplianceInd))
                ) && 
                (
                    this.CpaComplianceInd == input.CpaComplianceInd ||
                    (this.CpaComplianceInd != null &&
                    this.CpaComplianceInd.Equals(input.CpaComplianceInd))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.ItNumber != null)
                    hashCode = hashCode * 59 + this.ItNumber.GetHashCode();
                if (this.SegmentType != null)
                    hashCode = hashCode * 59 + this.SegmentType.GetHashCode();
                if (this.NcaComplianceInd != null)
                    hashCode = hashCode * 59 + this.NcaComplianceInd.GetHashCode();
                if (this.CpaComplianceInd != null)
                    hashCode = hashCode * 59 + this.CpaComplianceInd.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
