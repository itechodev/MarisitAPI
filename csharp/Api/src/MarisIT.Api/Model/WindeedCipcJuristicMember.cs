/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcJuristicMember
    /// </summary>
    [DataContract]
    public partial class WindeedCipcJuristicMember :  IEquatable<WindeedCipcJuristicMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcJuristicMember" /> class.
        /// </summary>
        /// <param name="uniqueDirectorId">uniqueDirectorId.</param>
        /// <param name="countryOfOrigin">countryOfOrigin.</param>
        /// <param name="appointmentDate">appointmentDate.</param>
        /// <param name="resignationDate">resignationDate.</param>
        /// <param name="memberSizePercentage">memberSizePercentage.</param>
        /// <param name="memberContribution">memberContribution.</param>
        /// <param name="status">status.</param>
        /// <param name="postalAddress">postalAddress.</param>
        /// <param name="residentialAddress">residentialAddress.</param>
        /// <param name="directorType">directorType.</param>
        /// <param name="countryOfResidence">countryOfResidence.</param>
        /// <param name="name">name.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        public WindeedCipcJuristicMember(int uniqueDirectorId = default(int), WindeedCipcCipcLookup countryOfOrigin = default(WindeedCipcCipcLookup), DateTime? appointmentDate = default(DateTime?), DateTime? resignationDate = default(DateTime?), double? memberSizePercentage = default(double?), double? memberContribution = default(double?), WindeedCipcCipcLookup status = default(WindeedCipcCipcLookup), WindeedCipcBasicAddress postalAddress = default(WindeedCipcBasicAddress), WindeedCipcBasicAddress residentialAddress = default(WindeedCipcBasicAddress), WindeedCipcCipcLookup directorType = default(WindeedCipcCipcLookup), WindeedCipcCipcLookup countryOfResidence = default(WindeedCipcCipcLookup), string name = default(string), WindeedCipcRegistrationNumber registrationNumber = default(WindeedCipcRegistrationNumber))
        {
            this.AppointmentDate = appointmentDate;
            this.ResignationDate = resignationDate;
            this.MemberSizePercentage = memberSizePercentage;
            this.MemberContribution = memberContribution;
            this.Name = name;
            this.UniqueDirectorId = uniqueDirectorId;
            this.CountryOfOrigin = countryOfOrigin;
            this.AppointmentDate = appointmentDate;
            this.ResignationDate = resignationDate;
            this.MemberSizePercentage = memberSizePercentage;
            this.MemberContribution = memberContribution;
            this.Status = status;
            this.PostalAddress = postalAddress;
            this.ResidentialAddress = residentialAddress;
            this.DirectorType = directorType;
            this.CountryOfResidence = countryOfResidence;
            this.Name = name;
            this.RegistrationNumber = registrationNumber;
        }

        /// <summary>
        /// Gets or Sets UniqueDirectorId
        /// </summary>
        [DataMember(Name="uniqueDirectorId", EmitDefaultValue=false)]
        public int UniqueDirectorId { get; set; }

        /// <summary>
        /// Gets or Sets CountryOfOrigin
        /// </summary>
        [DataMember(Name="countryOfOrigin", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup CountryOfOrigin { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentDate
        /// </summary>
        [DataMember(Name="appointmentDate", EmitDefaultValue=true)]
        public DateTime? AppointmentDate { get; set; }

        /// <summary>
        /// Gets or Sets ResignationDate
        /// </summary>
        [DataMember(Name="resignationDate", EmitDefaultValue=true)]
        public DateTime? ResignationDate { get; set; }

        /// <summary>
        /// Gets or Sets MemberSizePercentage
        /// </summary>
        [DataMember(Name="memberSizePercentage", EmitDefaultValue=true)]
        public double? MemberSizePercentage { get; set; }

        /// <summary>
        /// Gets or Sets MemberContribution
        /// </summary>
        [DataMember(Name="memberContribution", EmitDefaultValue=true)]
        public double? MemberContribution { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Status { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="postalAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress PostalAddress { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name="residentialAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress ResidentialAddress { get; set; }

        /// <summary>
        /// Gets or Sets DirectorType
        /// </summary>
        [DataMember(Name="directorType", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup DirectorType { get; set; }

        /// <summary>
        /// Gets or Sets CountryOfResidence
        /// </summary>
        [DataMember(Name="countryOfResidence", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup CountryOfResidence { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=false)]
        public WindeedCipcRegistrationNumber RegistrationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcJuristicMember {\n");
            sb.Append("  UniqueDirectorId: ").Append(UniqueDirectorId).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  AppointmentDate: ").Append(AppointmentDate).Append("\n");
            sb.Append("  ResignationDate: ").Append(ResignationDate).Append("\n");
            sb.Append("  MemberSizePercentage: ").Append(MemberSizePercentage).Append("\n");
            sb.Append("  MemberContribution: ").Append(MemberContribution).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("  DirectorType: ").Append(DirectorType).Append("\n");
            sb.Append("  CountryOfResidence: ").Append(CountryOfResidence).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcJuristicMember);
        }

        /// <summary>
        /// Returns true if WindeedCipcJuristicMember instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcJuristicMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcJuristicMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UniqueDirectorId == input.UniqueDirectorId ||
                    (this.UniqueDirectorId != null &&
                    this.UniqueDirectorId.Equals(input.UniqueDirectorId))
                ) && 
                (
                    this.CountryOfOrigin == input.CountryOfOrigin ||
                    (this.CountryOfOrigin != null &&
                    this.CountryOfOrigin.Equals(input.CountryOfOrigin))
                ) && 
                (
                    this.AppointmentDate == input.AppointmentDate ||
                    (this.AppointmentDate != null &&
                    this.AppointmentDate.Equals(input.AppointmentDate))
                ) && 
                (
                    this.ResignationDate == input.ResignationDate ||
                    (this.ResignationDate != null &&
                    this.ResignationDate.Equals(input.ResignationDate))
                ) && 
                (
                    this.MemberSizePercentage == input.MemberSizePercentage ||
                    (this.MemberSizePercentage != null &&
                    this.MemberSizePercentage.Equals(input.MemberSizePercentage))
                ) && 
                (
                    this.MemberContribution == input.MemberContribution ||
                    (this.MemberContribution != null &&
                    this.MemberContribution.Equals(input.MemberContribution))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    (this.ResidentialAddress != null &&
                    this.ResidentialAddress.Equals(input.ResidentialAddress))
                ) && 
                (
                    this.DirectorType == input.DirectorType ||
                    (this.DirectorType != null &&
                    this.DirectorType.Equals(input.DirectorType))
                ) && 
                (
                    this.CountryOfResidence == input.CountryOfResidence ||
                    (this.CountryOfResidence != null &&
                    this.CountryOfResidence.Equals(input.CountryOfResidence))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UniqueDirectorId != null)
                    hashCode = hashCode * 59 + this.UniqueDirectorId.GetHashCode();
                if (this.CountryOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryOfOrigin.GetHashCode();
                if (this.AppointmentDate != null)
                    hashCode = hashCode * 59 + this.AppointmentDate.GetHashCode();
                if (this.ResignationDate != null)
                    hashCode = hashCode * 59 + this.ResignationDate.GetHashCode();
                if (this.MemberSizePercentage != null)
                    hashCode = hashCode * 59 + this.MemberSizePercentage.GetHashCode();
                if (this.MemberContribution != null)
                    hashCode = hashCode * 59 + this.MemberContribution.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                if (this.ResidentialAddress != null)
                    hashCode = hashCode * 59 + this.ResidentialAddress.GetHashCode();
                if (this.DirectorType != null)
                    hashCode = hashCode * 59 + this.DirectorType.GetHashCode();
                if (this.CountryOfResidence != null)
                    hashCode = hashCode * 59 + this.CountryOfResidence.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
