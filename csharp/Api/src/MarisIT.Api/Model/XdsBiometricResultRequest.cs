/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsBiometricResultRequest
    /// </summary>
    [DataContract]
    public partial class XdsBiometricResultRequest :  IEquatable<XdsBiometricResultRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Finger1Index
        /// </summary>
        [DataMember(Name="finger1Index", EmitDefaultValue=false)]
        public XdsFingerIndex? Finger1Index { get; set; }
        /// <summary>
        /// Gets or Sets Finger2Index
        /// </summary>
        [DataMember(Name="finger2Index", EmitDefaultValue=false)]
        public XdsFingerIndex? Finger2Index { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsBiometricResultRequest" /> class.
        /// </summary>
        /// <param name="reference">reference.</param>
        /// <param name="finger1WSQ">finger1WSQ.</param>
        /// <param name="finger2WSQ">finger2WSQ.</param>
        /// <param name="finger1Index">finger1Index.</param>
        /// <param name="finger2Index">finger2Index.</param>
        public XdsBiometricResultRequest(string reference = default(string), string finger1WSQ = default(string), string finger2WSQ = default(string), XdsFingerIndex? finger1Index = default(XdsFingerIndex?), XdsFingerIndex? finger2Index = default(XdsFingerIndex?))
        {
            this.Reference = reference;
            this.Finger1WSQ = finger1WSQ;
            this.Finger2WSQ = finger2WSQ;
            this.Reference = reference;
            this.Finger1WSQ = finger1WSQ;
            this.Finger2WSQ = finger2WSQ;
            this.Finger1Index = finger1Index;
            this.Finger2Index = finger2Index;
        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets Finger1WSQ
        /// </summary>
        [DataMember(Name="finger1WSQ", EmitDefaultValue=true)]
        public string Finger1WSQ { get; set; }

        /// <summary>
        /// Gets or Sets Finger2WSQ
        /// </summary>
        [DataMember(Name="finger2WSQ", EmitDefaultValue=true)]
        public string Finger2WSQ { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsBiometricResultRequest {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Finger1WSQ: ").Append(Finger1WSQ).Append("\n");
            sb.Append("  Finger2WSQ: ").Append(Finger2WSQ).Append("\n");
            sb.Append("  Finger1Index: ").Append(Finger1Index).Append("\n");
            sb.Append("  Finger2Index: ").Append(Finger2Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsBiometricResultRequest);
        }

        /// <summary>
        /// Returns true if XdsBiometricResultRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsBiometricResultRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsBiometricResultRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Finger1WSQ == input.Finger1WSQ ||
                    (this.Finger1WSQ != null &&
                    this.Finger1WSQ.Equals(input.Finger1WSQ))
                ) && 
                (
                    this.Finger2WSQ == input.Finger2WSQ ||
                    (this.Finger2WSQ != null &&
                    this.Finger2WSQ.Equals(input.Finger2WSQ))
                ) && 
                (
                    this.Finger1Index == input.Finger1Index ||
                    (this.Finger1Index != null &&
                    this.Finger1Index.Equals(input.Finger1Index))
                ) && 
                (
                    this.Finger2Index == input.Finger2Index ||
                    (this.Finger2Index != null &&
                    this.Finger2Index.Equals(input.Finger2Index))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Finger1WSQ != null)
                    hashCode = hashCode * 59 + this.Finger1WSQ.GetHashCode();
                if (this.Finger2WSQ != null)
                    hashCode = hashCode * 59 + this.Finger2WSQ.GetHashCode();
                if (this.Finger1Index != null)
                    hashCode = hashCode * 59 + this.Finger1Index.GetHashCode();
                if (this.Finger2Index != null)
                    hashCode = hashCode * 59 + this.Finger2Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
