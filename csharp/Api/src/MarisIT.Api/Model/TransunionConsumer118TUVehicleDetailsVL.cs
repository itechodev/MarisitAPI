/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118TUVehicleDetailsVL
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118TUVehicleDetailsVL :  IEquatable<TransunionConsumer118TUVehicleDetailsVL>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118TUVehicleDetailsVL" /> class.
        /// </summary>
        /// <param name="transUnionNumber">transUnionNumber.</param>
        /// <param name="hpInumber">hpInumber.</param>
        /// <param name="manufacturerMatch">manufacturerMatch.</param>
        /// <param name="modelMatch">modelMatch.</param>
        /// <param name="vinChassisMatch">vinChassisMatch.</param>
        /// <param name="engineNumberMatch">engineNumberMatch.</param>
        /// <param name="vehicleLicenseNumberMatch">vehicleLicenseNumberMatch.</param>
        /// <param name="colourMatch">colourMatch.</param>
        /// <param name="yearOfManufactureMatch">yearOfManufactureMatch.</param>
        /// <param name="matchResultMessage">matchResultMessage.</param>
        public TransunionConsumer118TUVehicleDetailsVL(string transUnionNumber = default(string), string hpInumber = default(string), string manufacturerMatch = default(string), string modelMatch = default(string), string vinChassisMatch = default(string), string engineNumberMatch = default(string), string vehicleLicenseNumberMatch = default(string), string colourMatch = default(string), string yearOfManufactureMatch = default(string), string matchResultMessage = default(string))
        {
            this.TransUnionNumber = transUnionNumber;
            this.HpInumber = hpInumber;
            this.ManufacturerMatch = manufacturerMatch;
            this.ModelMatch = modelMatch;
            this.VinChassisMatch = vinChassisMatch;
            this.EngineNumberMatch = engineNumberMatch;
            this.VehicleLicenseNumberMatch = vehicleLicenseNumberMatch;
            this.ColourMatch = colourMatch;
            this.YearOfManufactureMatch = yearOfManufactureMatch;
            this.MatchResultMessage = matchResultMessage;
            this.TransUnionNumber = transUnionNumber;
            this.HpInumber = hpInumber;
            this.ManufacturerMatch = manufacturerMatch;
            this.ModelMatch = modelMatch;
            this.VinChassisMatch = vinChassisMatch;
            this.EngineNumberMatch = engineNumberMatch;
            this.VehicleLicenseNumberMatch = vehicleLicenseNumberMatch;
            this.ColourMatch = colourMatch;
            this.YearOfManufactureMatch = yearOfManufactureMatch;
            this.MatchResultMessage = matchResultMessage;
        }

        /// <summary>
        /// Gets or Sets TransUnionNumber
        /// </summary>
        [DataMember(Name="transUnionNumber", EmitDefaultValue=true)]
        public string TransUnionNumber { get; set; }

        /// <summary>
        /// Gets or Sets HpInumber
        /// </summary>
        [DataMember(Name="hpInumber", EmitDefaultValue=true)]
        public string HpInumber { get; set; }

        /// <summary>
        /// Gets or Sets ManufacturerMatch
        /// </summary>
        [DataMember(Name="manufacturerMatch", EmitDefaultValue=true)]
        public string ManufacturerMatch { get; set; }

        /// <summary>
        /// Gets or Sets ModelMatch
        /// </summary>
        [DataMember(Name="modelMatch", EmitDefaultValue=true)]
        public string ModelMatch { get; set; }

        /// <summary>
        /// Gets or Sets VinChassisMatch
        /// </summary>
        [DataMember(Name="vinChassisMatch", EmitDefaultValue=true)]
        public string VinChassisMatch { get; set; }

        /// <summary>
        /// Gets or Sets EngineNumberMatch
        /// </summary>
        [DataMember(Name="engineNumberMatch", EmitDefaultValue=true)]
        public string EngineNumberMatch { get; set; }

        /// <summary>
        /// Gets or Sets VehicleLicenseNumberMatch
        /// </summary>
        [DataMember(Name="vehicleLicenseNumberMatch", EmitDefaultValue=true)]
        public string VehicleLicenseNumberMatch { get; set; }

        /// <summary>
        /// Gets or Sets ColourMatch
        /// </summary>
        [DataMember(Name="colourMatch", EmitDefaultValue=true)]
        public string ColourMatch { get; set; }

        /// <summary>
        /// Gets or Sets YearOfManufactureMatch
        /// </summary>
        [DataMember(Name="yearOfManufactureMatch", EmitDefaultValue=true)]
        public string YearOfManufactureMatch { get; set; }

        /// <summary>
        /// Gets or Sets MatchResultMessage
        /// </summary>
        [DataMember(Name="matchResultMessage", EmitDefaultValue=true)]
        public string MatchResultMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118TUVehicleDetailsVL {\n");
            sb.Append("  TransUnionNumber: ").Append(TransUnionNumber).Append("\n");
            sb.Append("  HpInumber: ").Append(HpInumber).Append("\n");
            sb.Append("  ManufacturerMatch: ").Append(ManufacturerMatch).Append("\n");
            sb.Append("  ModelMatch: ").Append(ModelMatch).Append("\n");
            sb.Append("  VinChassisMatch: ").Append(VinChassisMatch).Append("\n");
            sb.Append("  EngineNumberMatch: ").Append(EngineNumberMatch).Append("\n");
            sb.Append("  VehicleLicenseNumberMatch: ").Append(VehicleLicenseNumberMatch).Append("\n");
            sb.Append("  ColourMatch: ").Append(ColourMatch).Append("\n");
            sb.Append("  YearOfManufactureMatch: ").Append(YearOfManufactureMatch).Append("\n");
            sb.Append("  MatchResultMessage: ").Append(MatchResultMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118TUVehicleDetailsVL);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118TUVehicleDetailsVL instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118TUVehicleDetailsVL to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118TUVehicleDetailsVL input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransUnionNumber == input.TransUnionNumber ||
                    (this.TransUnionNumber != null &&
                    this.TransUnionNumber.Equals(input.TransUnionNumber))
                ) && 
                (
                    this.HpInumber == input.HpInumber ||
                    (this.HpInumber != null &&
                    this.HpInumber.Equals(input.HpInumber))
                ) && 
                (
                    this.ManufacturerMatch == input.ManufacturerMatch ||
                    (this.ManufacturerMatch != null &&
                    this.ManufacturerMatch.Equals(input.ManufacturerMatch))
                ) && 
                (
                    this.ModelMatch == input.ModelMatch ||
                    (this.ModelMatch != null &&
                    this.ModelMatch.Equals(input.ModelMatch))
                ) && 
                (
                    this.VinChassisMatch == input.VinChassisMatch ||
                    (this.VinChassisMatch != null &&
                    this.VinChassisMatch.Equals(input.VinChassisMatch))
                ) && 
                (
                    this.EngineNumberMatch == input.EngineNumberMatch ||
                    (this.EngineNumberMatch != null &&
                    this.EngineNumberMatch.Equals(input.EngineNumberMatch))
                ) && 
                (
                    this.VehicleLicenseNumberMatch == input.VehicleLicenseNumberMatch ||
                    (this.VehicleLicenseNumberMatch != null &&
                    this.VehicleLicenseNumberMatch.Equals(input.VehicleLicenseNumberMatch))
                ) && 
                (
                    this.ColourMatch == input.ColourMatch ||
                    (this.ColourMatch != null &&
                    this.ColourMatch.Equals(input.ColourMatch))
                ) && 
                (
                    this.YearOfManufactureMatch == input.YearOfManufactureMatch ||
                    (this.YearOfManufactureMatch != null &&
                    this.YearOfManufactureMatch.Equals(input.YearOfManufactureMatch))
                ) && 
                (
                    this.MatchResultMessage == input.MatchResultMessage ||
                    (this.MatchResultMessage != null &&
                    this.MatchResultMessage.Equals(input.MatchResultMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransUnionNumber != null)
                    hashCode = hashCode * 59 + this.TransUnionNumber.GetHashCode();
                if (this.HpInumber != null)
                    hashCode = hashCode * 59 + this.HpInumber.GetHashCode();
                if (this.ManufacturerMatch != null)
                    hashCode = hashCode * 59 + this.ManufacturerMatch.GetHashCode();
                if (this.ModelMatch != null)
                    hashCode = hashCode * 59 + this.ModelMatch.GetHashCode();
                if (this.VinChassisMatch != null)
                    hashCode = hashCode * 59 + this.VinChassisMatch.GetHashCode();
                if (this.EngineNumberMatch != null)
                    hashCode = hashCode * 59 + this.EngineNumberMatch.GetHashCode();
                if (this.VehicleLicenseNumberMatch != null)
                    hashCode = hashCode * 59 + this.VehicleLicenseNumberMatch.GetHashCode();
                if (this.ColourMatch != null)
                    hashCode = hashCode * 59 + this.ColourMatch.GetHashCode();
                if (this.YearOfManufactureMatch != null)
                    hashCode = hashCode * 59 + this.YearOfManufactureMatch.GetHashCode();
                if (this.MatchResultMessage != null)
                    hashCode = hashCode * 59 + this.MatchResultMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
