/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ClaimantHeaderSH
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ClaimantHeaderSH :  IEquatable<TransunionConsumer118ClaimantHeaderSH>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ClaimantHeaderSH" /> class.
        /// </summary>
        /// <param name="requestIndicator">requestIndicator.</param>
        /// <param name="claimantSurname">claimantSurname.</param>
        /// <param name="claimantForename1">claimantForename1.</param>
        /// <param name="claimantForename2">claimantForename2.</param>
        /// <param name="claimantForename3">claimantForename3.</param>
        /// <param name="claimantRSAID">claimantRSAID.</param>
        /// <param name="claimantOtherID">claimantOtherID.</param>
        /// <param name="claimantDOB">claimantDOB.</param>
        public TransunionConsumer118ClaimantHeaderSH(string requestIndicator = default(string), string claimantSurname = default(string), string claimantForename1 = default(string), string claimantForename2 = default(string), string claimantForename3 = default(string), string claimantRSAID = default(string), string claimantOtherID = default(string), string claimantDOB = default(string))
        {
            this.RequestIndicator = requestIndicator;
            this.ClaimantSurname = claimantSurname;
            this.ClaimantForename1 = claimantForename1;
            this.ClaimantForename2 = claimantForename2;
            this.ClaimantForename3 = claimantForename3;
            this.ClaimantRSAID = claimantRSAID;
            this.ClaimantOtherID = claimantOtherID;
            this.ClaimantDOB = claimantDOB;
            this.RequestIndicator = requestIndicator;
            this.ClaimantSurname = claimantSurname;
            this.ClaimantForename1 = claimantForename1;
            this.ClaimantForename2 = claimantForename2;
            this.ClaimantForename3 = claimantForename3;
            this.ClaimantRSAID = claimantRSAID;
            this.ClaimantOtherID = claimantOtherID;
            this.ClaimantDOB = claimantDOB;
        }

        /// <summary>
        /// Gets or Sets RequestIndicator
        /// </summary>
        [DataMember(Name="requestIndicator", EmitDefaultValue=true)]
        public string RequestIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantSurname
        /// </summary>
        [DataMember(Name="claimantSurname", EmitDefaultValue=true)]
        public string ClaimantSurname { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantForename1
        /// </summary>
        [DataMember(Name="claimantForename1", EmitDefaultValue=true)]
        public string ClaimantForename1 { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantForename2
        /// </summary>
        [DataMember(Name="claimantForename2", EmitDefaultValue=true)]
        public string ClaimantForename2 { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantForename3
        /// </summary>
        [DataMember(Name="claimantForename3", EmitDefaultValue=true)]
        public string ClaimantForename3 { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantRSAID
        /// </summary>
        [DataMember(Name="claimantRSAID", EmitDefaultValue=true)]
        public string ClaimantRSAID { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantOtherID
        /// </summary>
        [DataMember(Name="claimantOtherID", EmitDefaultValue=true)]
        public string ClaimantOtherID { get; set; }

        /// <summary>
        /// Gets or Sets ClaimantDOB
        /// </summary>
        [DataMember(Name="claimantDOB", EmitDefaultValue=true)]
        public string ClaimantDOB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ClaimantHeaderSH {\n");
            sb.Append("  RequestIndicator: ").Append(RequestIndicator).Append("\n");
            sb.Append("  ClaimantSurname: ").Append(ClaimantSurname).Append("\n");
            sb.Append("  ClaimantForename1: ").Append(ClaimantForename1).Append("\n");
            sb.Append("  ClaimantForename2: ").Append(ClaimantForename2).Append("\n");
            sb.Append("  ClaimantForename3: ").Append(ClaimantForename3).Append("\n");
            sb.Append("  ClaimantRSAID: ").Append(ClaimantRSAID).Append("\n");
            sb.Append("  ClaimantOtherID: ").Append(ClaimantOtherID).Append("\n");
            sb.Append("  ClaimantDOB: ").Append(ClaimantDOB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ClaimantHeaderSH);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ClaimantHeaderSH instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ClaimantHeaderSH to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ClaimantHeaderSH input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestIndicator == input.RequestIndicator ||
                    (this.RequestIndicator != null &&
                    this.RequestIndicator.Equals(input.RequestIndicator))
                ) && 
                (
                    this.ClaimantSurname == input.ClaimantSurname ||
                    (this.ClaimantSurname != null &&
                    this.ClaimantSurname.Equals(input.ClaimantSurname))
                ) && 
                (
                    this.ClaimantForename1 == input.ClaimantForename1 ||
                    (this.ClaimantForename1 != null &&
                    this.ClaimantForename1.Equals(input.ClaimantForename1))
                ) && 
                (
                    this.ClaimantForename2 == input.ClaimantForename2 ||
                    (this.ClaimantForename2 != null &&
                    this.ClaimantForename2.Equals(input.ClaimantForename2))
                ) && 
                (
                    this.ClaimantForename3 == input.ClaimantForename3 ||
                    (this.ClaimantForename3 != null &&
                    this.ClaimantForename3.Equals(input.ClaimantForename3))
                ) && 
                (
                    this.ClaimantRSAID == input.ClaimantRSAID ||
                    (this.ClaimantRSAID != null &&
                    this.ClaimantRSAID.Equals(input.ClaimantRSAID))
                ) && 
                (
                    this.ClaimantOtherID == input.ClaimantOtherID ||
                    (this.ClaimantOtherID != null &&
                    this.ClaimantOtherID.Equals(input.ClaimantOtherID))
                ) && 
                (
                    this.ClaimantDOB == input.ClaimantDOB ||
                    (this.ClaimantDOB != null &&
                    this.ClaimantDOB.Equals(input.ClaimantDOB))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestIndicator != null)
                    hashCode = hashCode * 59 + this.RequestIndicator.GetHashCode();
                if (this.ClaimantSurname != null)
                    hashCode = hashCode * 59 + this.ClaimantSurname.GetHashCode();
                if (this.ClaimantForename1 != null)
                    hashCode = hashCode * 59 + this.ClaimantForename1.GetHashCode();
                if (this.ClaimantForename2 != null)
                    hashCode = hashCode * 59 + this.ClaimantForename2.GetHashCode();
                if (this.ClaimantForename3 != null)
                    hashCode = hashCode * 59 + this.ClaimantForename3.GetHashCode();
                if (this.ClaimantRSAID != null)
                    hashCode = hashCode * 59 + this.ClaimantRSAID.GetHashCode();
                if (this.ClaimantOtherID != null)
                    hashCode = hashCode * 59 + this.ClaimantOtherID.GetHashCode();
                if (this.ClaimantDOB != null)
                    hashCode = hashCode * 59 + this.ClaimantDOB.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
