/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialLinkedBusinessDetailLF
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialLinkedBusinessDetailLF :  IEquatable<TransunionCommercialLinkedBusinessDetailLF>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialLinkedBusinessDetailLF" /> class.
        /// </summary>
        /// <param name="majorProductCode">majorProductCode.</param>
        /// <param name="itNumber">itNumber.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        /// <param name="businessName">businessName.</param>
        /// <param name="akaName">akaName.</param>
        /// <param name="ebType">ebType.</param>
        /// <param name="industry">industry.</param>
        /// <param name="category">category.</param>
        /// <param name="businessFunction">businessFunction.</param>
        /// <param name="registrationStatus">registrationStatus.</param>
        /// <param name="registrationCountry">registrationCountry.</param>
        /// <param name="language">language.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="faxNumber">faxNumber.</param>
        /// <param name="startCapital">startCapital.</param>
        /// <param name="purchasePrice">purchasePrice.</param>
        /// <param name="inBusiness">inBusiness.</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        /// <param name="registeredAddress">registeredAddress.</param>
        public TransunionCommercialLinkedBusinessDetailLF(string majorProductCode = default(string), string itNumber = default(string), string registrationNumber = default(string), string businessName = default(string), string akaName = default(string), string ebType = default(string), string industry = default(string), string category = default(string), string businessFunction = default(string), string registrationStatus = default(string), string registrationCountry = default(string), string language = default(string), string phoneNumber = default(string), string faxNumber = default(string), string startCapital = default(string), string purchasePrice = default(string), string inBusiness = default(string), string physicalAddress = default(string), string registeredAddress = default(string))
        {
            this.MajorProductCode = majorProductCode;
            this.ItNumber = itNumber;
            this.RegistrationNumber = registrationNumber;
            this.BusinessName = businessName;
            this.AkaName = akaName;
            this.EbType = ebType;
            this.Industry = industry;
            this.Category = category;
            this.BusinessFunction = businessFunction;
            this.RegistrationStatus = registrationStatus;
            this.RegistrationCountry = registrationCountry;
            this.Language = language;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.StartCapital = startCapital;
            this.PurchasePrice = purchasePrice;
            this.InBusiness = inBusiness;
            this.PhysicalAddress = physicalAddress;
            this.RegisteredAddress = registeredAddress;
            this.MajorProductCode = majorProductCode;
            this.ItNumber = itNumber;
            this.RegistrationNumber = registrationNumber;
            this.BusinessName = businessName;
            this.AkaName = akaName;
            this.EbType = ebType;
            this.Industry = industry;
            this.Category = category;
            this.BusinessFunction = businessFunction;
            this.RegistrationStatus = registrationStatus;
            this.RegistrationCountry = registrationCountry;
            this.Language = language;
            this.PhoneNumber = phoneNumber;
            this.FaxNumber = faxNumber;
            this.StartCapital = startCapital;
            this.PurchasePrice = purchasePrice;
            this.InBusiness = inBusiness;
            this.PhysicalAddress = physicalAddress;
            this.RegisteredAddress = registeredAddress;
        }

        /// <summary>
        /// Gets or Sets MajorProductCode
        /// </summary>
        [DataMember(Name="majorProductCode", EmitDefaultValue=true)]
        public string MajorProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ItNumber
        /// </summary>
        [DataMember(Name="itNumber", EmitDefaultValue=true)]
        public string ItNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=true)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets BusinessName
        /// </summary>
        [DataMember(Name="businessName", EmitDefaultValue=true)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Gets or Sets AkaName
        /// </summary>
        [DataMember(Name="akaName", EmitDefaultValue=true)]
        public string AkaName { get; set; }

        /// <summary>
        /// Gets or Sets EbType
        /// </summary>
        [DataMember(Name="ebType", EmitDefaultValue=true)]
        public string EbType { get; set; }

        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name="industry", EmitDefaultValue=true)]
        public string Industry { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets BusinessFunction
        /// </summary>
        [DataMember(Name="businessFunction", EmitDefaultValue=true)]
        public string BusinessFunction { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationStatus
        /// </summary>
        [DataMember(Name="registrationStatus", EmitDefaultValue=true)]
        public string RegistrationStatus { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCountry
        /// </summary>
        [DataMember(Name="registrationCountry", EmitDefaultValue=true)]
        public string RegistrationCountry { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxNumber
        /// </summary>
        [DataMember(Name="faxNumber", EmitDefaultValue=true)]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartCapital
        /// </summary>
        [DataMember(Name="startCapital", EmitDefaultValue=true)]
        public string StartCapital { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="purchasePrice", EmitDefaultValue=true)]
        public string PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets InBusiness
        /// </summary>
        [DataMember(Name="inBusiness", EmitDefaultValue=true)]
        public string InBusiness { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name="physicalAddress", EmitDefaultValue=true)]
        public string PhysicalAddress { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredAddress
        /// </summary>
        [DataMember(Name="registeredAddress", EmitDefaultValue=true)]
        public string RegisteredAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialLinkedBusinessDetailLF {\n");
            sb.Append("  MajorProductCode: ").Append(MajorProductCode).Append("\n");
            sb.Append("  ItNumber: ").Append(ItNumber).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  AkaName: ").Append(AkaName).Append("\n");
            sb.Append("  EbType: ").Append(EbType).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  BusinessFunction: ").Append(BusinessFunction).Append("\n");
            sb.Append("  RegistrationStatus: ").Append(RegistrationStatus).Append("\n");
            sb.Append("  RegistrationCountry: ").Append(RegistrationCountry).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  StartCapital: ").Append(StartCapital).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  InBusiness: ").Append(InBusiness).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("  RegisteredAddress: ").Append(RegisteredAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialLinkedBusinessDetailLF);
        }

        /// <summary>
        /// Returns true if TransunionCommercialLinkedBusinessDetailLF instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialLinkedBusinessDetailLF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialLinkedBusinessDetailLF input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProductCode == input.MajorProductCode ||
                    (this.MajorProductCode != null &&
                    this.MajorProductCode.Equals(input.MajorProductCode))
                ) && 
                (
                    this.ItNumber == input.ItNumber ||
                    (this.ItNumber != null &&
                    this.ItNumber.Equals(input.ItNumber))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.AkaName == input.AkaName ||
                    (this.AkaName != null &&
                    this.AkaName.Equals(input.AkaName))
                ) && 
                (
                    this.EbType == input.EbType ||
                    (this.EbType != null &&
                    this.EbType.Equals(input.EbType))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.BusinessFunction == input.BusinessFunction ||
                    (this.BusinessFunction != null &&
                    this.BusinessFunction.Equals(input.BusinessFunction))
                ) && 
                (
                    this.RegistrationStatus == input.RegistrationStatus ||
                    (this.RegistrationStatus != null &&
                    this.RegistrationStatus.Equals(input.RegistrationStatus))
                ) && 
                (
                    this.RegistrationCountry == input.RegistrationCountry ||
                    (this.RegistrationCountry != null &&
                    this.RegistrationCountry.Equals(input.RegistrationCountry))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.FaxNumber == input.FaxNumber ||
                    (this.FaxNumber != null &&
                    this.FaxNumber.Equals(input.FaxNumber))
                ) && 
                (
                    this.StartCapital == input.StartCapital ||
                    (this.StartCapital != null &&
                    this.StartCapital.Equals(input.StartCapital))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.InBusiness == input.InBusiness ||
                    (this.InBusiness != null &&
                    this.InBusiness.Equals(input.InBusiness))
                ) && 
                (
                    this.PhysicalAddress == input.PhysicalAddress ||
                    (this.PhysicalAddress != null &&
                    this.PhysicalAddress.Equals(input.PhysicalAddress))
                ) && 
                (
                    this.RegisteredAddress == input.RegisteredAddress ||
                    (this.RegisteredAddress != null &&
                    this.RegisteredAddress.Equals(input.RegisteredAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProductCode != null)
                    hashCode = hashCode * 59 + this.MajorProductCode.GetHashCode();
                if (this.ItNumber != null)
                    hashCode = hashCode * 59 + this.ItNumber.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.AkaName != null)
                    hashCode = hashCode * 59 + this.AkaName.GetHashCode();
                if (this.EbType != null)
                    hashCode = hashCode * 59 + this.EbType.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.BusinessFunction != null)
                    hashCode = hashCode * 59 + this.BusinessFunction.GetHashCode();
                if (this.RegistrationStatus != null)
                    hashCode = hashCode * 59 + this.RegistrationStatus.GetHashCode();
                if (this.RegistrationCountry != null)
                    hashCode = hashCode * 59 + this.RegistrationCountry.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hashCode = hashCode * 59 + this.FaxNumber.GetHashCode();
                if (this.StartCapital != null)
                    hashCode = hashCode * 59 + this.StartCapital.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.InBusiness != null)
                    hashCode = hashCode * 59 + this.InBusiness.GetHashCode();
                if (this.PhysicalAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalAddress.GetHashCode();
                if (this.RegisteredAddress != null)
                    hashCode = hashCode * 59 + this.RegisteredAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
