/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedOfficev1PropertyResponse
    /// </summary>
    [DataContract]
    public partial class WindeedOfficev1PropertyResponse :  IEquatable<WindeedOfficev1PropertyResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedOfficev1Registrar? DeedsOffice { get; set; }
        /// <summary>
        /// Gets or Sets SupplierMode
        /// </summary>
        [DataMember(Name="supplierMode", EmitDefaultValue=false)]
        public WindeedOfficev1SupplierMode? SupplierMode { get; set; }
        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public WindeedOfficev1Supplier? Supplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficev1PropertyResponse" /> class.
        /// </summary>
        /// <param name="responseDateTime">responseDateTime.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="supplierMode">supplierMode.</param>
        /// <param name="supplier">supplier.</param>
        /// <param name="property">property.</param>
        /// <param name="titleDeeds">titleDeeds.</param>
        /// <param name="endorsements">endorsements.</param>
        /// <param name="history">history.</param>
        public WindeedOfficev1PropertyResponse(DateTime responseDateTime = default(DateTime), WindeedOfficev1Registrar? deedsOffice = default(WindeedOfficev1Registrar?), WindeedOfficev1SupplierMode? supplierMode = default(WindeedOfficev1SupplierMode?), WindeedOfficev1Supplier? supplier = default(WindeedOfficev1Supplier?), WindeedOfficev1PropertyDetail property = default(WindeedOfficev1PropertyDetail), List<WindeedOfficev1TitleDeed> titleDeeds = default(List<WindeedOfficev1TitleDeed>), List<WindeedOfficev1EndorsementDocument> endorsements = default(List<WindeedOfficev1EndorsementDocument>), List<WindeedOfficev1HistoricDocument> history = default(List<WindeedOfficev1HistoricDocument>))
        {
            this.TitleDeeds = titleDeeds;
            this.Endorsements = endorsements;
            this.History = history;
            this.ResponseDateTime = responseDateTime;
            this.DeedsOffice = deedsOffice;
            this.SupplierMode = supplierMode;
            this.Supplier = supplier;
            this.Property = property;
            this.TitleDeeds = titleDeeds;
            this.Endorsements = endorsements;
            this.History = history;
        }

        /// <summary>
        /// Gets or Sets ResponseDateTime
        /// </summary>
        [DataMember(Name="responseDateTime", EmitDefaultValue=false)]
        public DateTime ResponseDateTime { get; set; }




        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public WindeedOfficev1PropertyDetail Property { get; set; }

        /// <summary>
        /// Gets or Sets TitleDeeds
        /// </summary>
        [DataMember(Name="titleDeeds", EmitDefaultValue=true)]
        public List<WindeedOfficev1TitleDeed> TitleDeeds { get; set; }

        /// <summary>
        /// Gets or Sets Endorsements
        /// </summary>
        [DataMember(Name="endorsements", EmitDefaultValue=true)]
        public List<WindeedOfficev1EndorsementDocument> Endorsements { get; set; }

        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=true)]
        public List<WindeedOfficev1HistoricDocument> History { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedOfficev1PropertyResponse {\n");
            sb.Append("  ResponseDateTime: ").Append(ResponseDateTime).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  SupplierMode: ").Append(SupplierMode).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  TitleDeeds: ").Append(TitleDeeds).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedOfficev1PropertyResponse);
        }

        /// <summary>
        /// Returns true if WindeedOfficev1PropertyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedOfficev1PropertyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedOfficev1PropertyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseDateTime == input.ResponseDateTime ||
                    (this.ResponseDateTime != null &&
                    this.ResponseDateTime.Equals(input.ResponseDateTime))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.SupplierMode == input.SupplierMode ||
                    (this.SupplierMode != null &&
                    this.SupplierMode.Equals(input.SupplierMode))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.TitleDeeds == input.TitleDeeds ||
                    this.TitleDeeds != null &&
                    input.TitleDeeds != null &&
                    this.TitleDeeds.SequenceEqual(input.TitleDeeds)
                ) && 
                (
                    this.Endorsements == input.Endorsements ||
                    this.Endorsements != null &&
                    input.Endorsements != null &&
                    this.Endorsements.SequenceEqual(input.Endorsements)
                ) && 
                (
                    this.History == input.History ||
                    this.History != null &&
                    input.History != null &&
                    this.History.SequenceEqual(input.History)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseDateTime != null)
                    hashCode = hashCode * 59 + this.ResponseDateTime.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.SupplierMode != null)
                    hashCode = hashCode * 59 + this.SupplierMode.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.TitleDeeds != null)
                    hashCode = hashCode * 59 + this.TitleDeeds.GetHashCode();
                if (this.Endorsements != null)
                    hashCode = hashCode * 59 + this.Endorsements.GetHashCode();
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
