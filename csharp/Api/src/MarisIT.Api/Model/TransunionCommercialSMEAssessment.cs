/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialSMEAssessment
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialSMEAssessment :  IEquatable<TransunionCommercialSMEAssessment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialSMEAssessment" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="typeOfScore">typeOfScore.</param>
        /// <param name="scoreDate">scoreDate.</param>
        /// <param name="score">score.</param>
        /// <param name="scoreBand">scoreBand.</param>
        /// <param name="bandTrend">bandTrend.</param>
        /// <param name="bandDesc">bandDesc.</param>
        /// <param name="oddsOfFailure">oddsOfFailure.</param>
        /// <param name="failureRate">failureRate.</param>
        /// <param name="size">size.</param>
        /// <param name="smeCommentCode">smeCommentCode.</param>
        /// <param name="comments">comments.</param>
        /// <param name="keyContrCodes">keyContrCodes.</param>
        /// <param name="subjectGraphValue">subjectGraphValue.</param>
        /// <param name="averageGraphValue">averageGraphValue.</param>
        /// <param name="recomActionCode">recomActionCode.</param>
        /// <param name="historyDate">historyDate.</param>
        /// <param name="historyScore">historyScore.</param>
        /// <param name="historyAverage">historyAverage.</param>
        public TransunionCommercialSMEAssessment(string majorProduct = default(string), string typeOfScore = default(string), string scoreDate = default(string), string score = default(string), string scoreBand = default(string), string bandTrend = default(string), string bandDesc = default(string), string oddsOfFailure = default(string), string failureRate = default(string), string size = default(string), string smeCommentCode = default(string), List<string> comments = default(List<string>), List<string> keyContrCodes = default(List<string>), List<string> subjectGraphValue = default(List<string>), List<string> averageGraphValue = default(List<string>), List<string> recomActionCode = default(List<string>), List<string> historyDate = default(List<string>), List<string> historyScore = default(List<string>), List<string> historyAverage = default(List<string>))
        {
            this.MajorProduct = majorProduct;
            this.TypeOfScore = typeOfScore;
            this.ScoreDate = scoreDate;
            this.Score = score;
            this.ScoreBand = scoreBand;
            this.BandTrend = bandTrend;
            this.BandDesc = bandDesc;
            this.OddsOfFailure = oddsOfFailure;
            this.FailureRate = failureRate;
            this.Size = size;
            this.SmeCommentCode = smeCommentCode;
            this.Comments = comments;
            this.KeyContrCodes = keyContrCodes;
            this.SubjectGraphValue = subjectGraphValue;
            this.AverageGraphValue = averageGraphValue;
            this.RecomActionCode = recomActionCode;
            this.HistoryDate = historyDate;
            this.HistoryScore = historyScore;
            this.HistoryAverage = historyAverage;
            this.MajorProduct = majorProduct;
            this.TypeOfScore = typeOfScore;
            this.ScoreDate = scoreDate;
            this.Score = score;
            this.ScoreBand = scoreBand;
            this.BandTrend = bandTrend;
            this.BandDesc = bandDesc;
            this.OddsOfFailure = oddsOfFailure;
            this.FailureRate = failureRate;
            this.Size = size;
            this.SmeCommentCode = smeCommentCode;
            this.Comments = comments;
            this.KeyContrCodes = keyContrCodes;
            this.SubjectGraphValue = subjectGraphValue;
            this.AverageGraphValue = averageGraphValue;
            this.RecomActionCode = recomActionCode;
            this.HistoryDate = historyDate;
            this.HistoryScore = historyScore;
            this.HistoryAverage = historyAverage;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfScore
        /// </summary>
        [DataMember(Name="typeOfScore", EmitDefaultValue=true)]
        public string TypeOfScore { get; set; }

        /// <summary>
        /// Gets or Sets ScoreDate
        /// </summary>
        [DataMember(Name="scoreDate", EmitDefaultValue=true)]
        public string ScoreDate { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name="score", EmitDefaultValue=true)]
        public string Score { get; set; }

        /// <summary>
        /// Gets or Sets ScoreBand
        /// </summary>
        [DataMember(Name="scoreBand", EmitDefaultValue=true)]
        public string ScoreBand { get; set; }

        /// <summary>
        /// Gets or Sets BandTrend
        /// </summary>
        [DataMember(Name="bandTrend", EmitDefaultValue=true)]
        public string BandTrend { get; set; }

        /// <summary>
        /// Gets or Sets BandDesc
        /// </summary>
        [DataMember(Name="bandDesc", EmitDefaultValue=true)]
        public string BandDesc { get; set; }

        /// <summary>
        /// Gets or Sets OddsOfFailure
        /// </summary>
        [DataMember(Name="oddsOfFailure", EmitDefaultValue=true)]
        public string OddsOfFailure { get; set; }

        /// <summary>
        /// Gets or Sets FailureRate
        /// </summary>
        [DataMember(Name="failureRate", EmitDefaultValue=true)]
        public string FailureRate { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=true)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets SmeCommentCode
        /// </summary>
        [DataMember(Name="smeCommentCode", EmitDefaultValue=true)]
        public string SmeCommentCode { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public List<string> Comments { get; set; }

        /// <summary>
        /// Gets or Sets KeyContrCodes
        /// </summary>
        [DataMember(Name="keyContrCodes", EmitDefaultValue=true)]
        public List<string> KeyContrCodes { get; set; }

        /// <summary>
        /// Gets or Sets SubjectGraphValue
        /// </summary>
        [DataMember(Name="subjectGraphValue", EmitDefaultValue=true)]
        public List<string> SubjectGraphValue { get; set; }

        /// <summary>
        /// Gets or Sets AverageGraphValue
        /// </summary>
        [DataMember(Name="averageGraphValue", EmitDefaultValue=true)]
        public List<string> AverageGraphValue { get; set; }

        /// <summary>
        /// Gets or Sets RecomActionCode
        /// </summary>
        [DataMember(Name="recomActionCode", EmitDefaultValue=true)]
        public List<string> RecomActionCode { get; set; }

        /// <summary>
        /// Gets or Sets HistoryDate
        /// </summary>
        [DataMember(Name="historyDate", EmitDefaultValue=true)]
        public List<string> HistoryDate { get; set; }

        /// <summary>
        /// Gets or Sets HistoryScore
        /// </summary>
        [DataMember(Name="historyScore", EmitDefaultValue=true)]
        public List<string> HistoryScore { get; set; }

        /// <summary>
        /// Gets or Sets HistoryAverage
        /// </summary>
        [DataMember(Name="historyAverage", EmitDefaultValue=true)]
        public List<string> HistoryAverage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialSMEAssessment {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  TypeOfScore: ").Append(TypeOfScore).Append("\n");
            sb.Append("  ScoreDate: ").Append(ScoreDate).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ScoreBand: ").Append(ScoreBand).Append("\n");
            sb.Append("  BandTrend: ").Append(BandTrend).Append("\n");
            sb.Append("  BandDesc: ").Append(BandDesc).Append("\n");
            sb.Append("  OddsOfFailure: ").Append(OddsOfFailure).Append("\n");
            sb.Append("  FailureRate: ").Append(FailureRate).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SmeCommentCode: ").Append(SmeCommentCode).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  KeyContrCodes: ").Append(KeyContrCodes).Append("\n");
            sb.Append("  SubjectGraphValue: ").Append(SubjectGraphValue).Append("\n");
            sb.Append("  AverageGraphValue: ").Append(AverageGraphValue).Append("\n");
            sb.Append("  RecomActionCode: ").Append(RecomActionCode).Append("\n");
            sb.Append("  HistoryDate: ").Append(HistoryDate).Append("\n");
            sb.Append("  HistoryScore: ").Append(HistoryScore).Append("\n");
            sb.Append("  HistoryAverage: ").Append(HistoryAverage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialSMEAssessment);
        }

        /// <summary>
        /// Returns true if TransunionCommercialSMEAssessment instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialSMEAssessment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialSMEAssessment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.TypeOfScore == input.TypeOfScore ||
                    (this.TypeOfScore != null &&
                    this.TypeOfScore.Equals(input.TypeOfScore))
                ) && 
                (
                    this.ScoreDate == input.ScoreDate ||
                    (this.ScoreDate != null &&
                    this.ScoreDate.Equals(input.ScoreDate))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ScoreBand == input.ScoreBand ||
                    (this.ScoreBand != null &&
                    this.ScoreBand.Equals(input.ScoreBand))
                ) && 
                (
                    this.BandTrend == input.BandTrend ||
                    (this.BandTrend != null &&
                    this.BandTrend.Equals(input.BandTrend))
                ) && 
                (
                    this.BandDesc == input.BandDesc ||
                    (this.BandDesc != null &&
                    this.BandDesc.Equals(input.BandDesc))
                ) && 
                (
                    this.OddsOfFailure == input.OddsOfFailure ||
                    (this.OddsOfFailure != null &&
                    this.OddsOfFailure.Equals(input.OddsOfFailure))
                ) && 
                (
                    this.FailureRate == input.FailureRate ||
                    (this.FailureRate != null &&
                    this.FailureRate.Equals(input.FailureRate))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.SmeCommentCode == input.SmeCommentCode ||
                    (this.SmeCommentCode != null &&
                    this.SmeCommentCode.Equals(input.SmeCommentCode))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.KeyContrCodes == input.KeyContrCodes ||
                    this.KeyContrCodes != null &&
                    input.KeyContrCodes != null &&
                    this.KeyContrCodes.SequenceEqual(input.KeyContrCodes)
                ) && 
                (
                    this.SubjectGraphValue == input.SubjectGraphValue ||
                    this.SubjectGraphValue != null &&
                    input.SubjectGraphValue != null &&
                    this.SubjectGraphValue.SequenceEqual(input.SubjectGraphValue)
                ) && 
                (
                    this.AverageGraphValue == input.AverageGraphValue ||
                    this.AverageGraphValue != null &&
                    input.AverageGraphValue != null &&
                    this.AverageGraphValue.SequenceEqual(input.AverageGraphValue)
                ) && 
                (
                    this.RecomActionCode == input.RecomActionCode ||
                    this.RecomActionCode != null &&
                    input.RecomActionCode != null &&
                    this.RecomActionCode.SequenceEqual(input.RecomActionCode)
                ) && 
                (
                    this.HistoryDate == input.HistoryDate ||
                    this.HistoryDate != null &&
                    input.HistoryDate != null &&
                    this.HistoryDate.SequenceEqual(input.HistoryDate)
                ) && 
                (
                    this.HistoryScore == input.HistoryScore ||
                    this.HistoryScore != null &&
                    input.HistoryScore != null &&
                    this.HistoryScore.SequenceEqual(input.HistoryScore)
                ) && 
                (
                    this.HistoryAverage == input.HistoryAverage ||
                    this.HistoryAverage != null &&
                    input.HistoryAverage != null &&
                    this.HistoryAverage.SequenceEqual(input.HistoryAverage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.TypeOfScore != null)
                    hashCode = hashCode * 59 + this.TypeOfScore.GetHashCode();
                if (this.ScoreDate != null)
                    hashCode = hashCode * 59 + this.ScoreDate.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ScoreBand != null)
                    hashCode = hashCode * 59 + this.ScoreBand.GetHashCode();
                if (this.BandTrend != null)
                    hashCode = hashCode * 59 + this.BandTrend.GetHashCode();
                if (this.BandDesc != null)
                    hashCode = hashCode * 59 + this.BandDesc.GetHashCode();
                if (this.OddsOfFailure != null)
                    hashCode = hashCode * 59 + this.OddsOfFailure.GetHashCode();
                if (this.FailureRate != null)
                    hashCode = hashCode * 59 + this.FailureRate.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.SmeCommentCode != null)
                    hashCode = hashCode * 59 + this.SmeCommentCode.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.KeyContrCodes != null)
                    hashCode = hashCode * 59 + this.KeyContrCodes.GetHashCode();
                if (this.SubjectGraphValue != null)
                    hashCode = hashCode * 59 + this.SubjectGraphValue.GetHashCode();
                if (this.AverageGraphValue != null)
                    hashCode = hashCode * 59 + this.AverageGraphValue.GetHashCode();
                if (this.RecomActionCode != null)
                    hashCode = hashCode * 59 + this.RecomActionCode.GetHashCode();
                if (this.HistoryDate != null)
                    hashCode = hashCode * 59 + this.HistoryDate.GetHashCode();
                if (this.HistoryScore != null)
                    hashCode = hashCode * 59 + this.HistoryScore.GetHashCode();
                if (this.HistoryAverage != null)
                    hashCode = hashCode * 59 + this.HistoryAverage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
