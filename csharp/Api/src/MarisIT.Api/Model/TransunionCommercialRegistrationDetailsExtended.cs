/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialRegistrationDetailsExtended
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialRegistrationDetailsExtended :  IEquatable<TransunionCommercialRegistrationDetailsExtended>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialRegistrationDetailsExtended" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="businessRescueDate">businessRescueDate.</param>
        /// <param name="businessRescueComment">businessRescueComment.</param>
        /// <param name="auditorBusinessAddresses">auditorBusinessAddresses.</param>
        /// <param name="auditorBusinessPostalCode">auditorBusinessPostalCode.</param>
        public TransunionCommercialRegistrationDetailsExtended(string majorProduct = default(string), string businessRescueDate = default(string), string businessRescueComment = default(string), List<TransunionCommercialAuditorBusinessAddress> auditorBusinessAddresses = default(List<TransunionCommercialAuditorBusinessAddress>), string auditorBusinessPostalCode = default(string))
        {
            this.MajorProduct = majorProduct;
            this.BusinessRescueDate = businessRescueDate;
            this.BusinessRescueComment = businessRescueComment;
            this.AuditorBusinessAddresses = auditorBusinessAddresses;
            this.AuditorBusinessPostalCode = auditorBusinessPostalCode;
            this.MajorProduct = majorProduct;
            this.BusinessRescueDate = businessRescueDate;
            this.BusinessRescueComment = businessRescueComment;
            this.AuditorBusinessAddresses = auditorBusinessAddresses;
            this.AuditorBusinessPostalCode = auditorBusinessPostalCode;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets BusinessRescueDate
        /// </summary>
        [DataMember(Name="businessRescueDate", EmitDefaultValue=true)]
        public string BusinessRescueDate { get; set; }

        /// <summary>
        /// Gets or Sets BusinessRescueComment
        /// </summary>
        [DataMember(Name="businessRescueComment", EmitDefaultValue=true)]
        public string BusinessRescueComment { get; set; }

        /// <summary>
        /// Gets or Sets AuditorBusinessAddresses
        /// </summary>
        [DataMember(Name="auditorBusinessAddresses", EmitDefaultValue=true)]
        public List<TransunionCommercialAuditorBusinessAddress> AuditorBusinessAddresses { get; set; }

        /// <summary>
        /// Gets or Sets AuditorBusinessPostalCode
        /// </summary>
        [DataMember(Name="auditorBusinessPostalCode", EmitDefaultValue=true)]
        public string AuditorBusinessPostalCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialRegistrationDetailsExtended {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  BusinessRescueDate: ").Append(BusinessRescueDate).Append("\n");
            sb.Append("  BusinessRescueComment: ").Append(BusinessRescueComment).Append("\n");
            sb.Append("  AuditorBusinessAddresses: ").Append(AuditorBusinessAddresses).Append("\n");
            sb.Append("  AuditorBusinessPostalCode: ").Append(AuditorBusinessPostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialRegistrationDetailsExtended);
        }

        /// <summary>
        /// Returns true if TransunionCommercialRegistrationDetailsExtended instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialRegistrationDetailsExtended to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialRegistrationDetailsExtended input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.BusinessRescueDate == input.BusinessRescueDate ||
                    (this.BusinessRescueDate != null &&
                    this.BusinessRescueDate.Equals(input.BusinessRescueDate))
                ) && 
                (
                    this.BusinessRescueComment == input.BusinessRescueComment ||
                    (this.BusinessRescueComment != null &&
                    this.BusinessRescueComment.Equals(input.BusinessRescueComment))
                ) && 
                (
                    this.AuditorBusinessAddresses == input.AuditorBusinessAddresses ||
                    this.AuditorBusinessAddresses != null &&
                    input.AuditorBusinessAddresses != null &&
                    this.AuditorBusinessAddresses.SequenceEqual(input.AuditorBusinessAddresses)
                ) && 
                (
                    this.AuditorBusinessPostalCode == input.AuditorBusinessPostalCode ||
                    (this.AuditorBusinessPostalCode != null &&
                    this.AuditorBusinessPostalCode.Equals(input.AuditorBusinessPostalCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.BusinessRescueDate != null)
                    hashCode = hashCode * 59 + this.BusinessRescueDate.GetHashCode();
                if (this.BusinessRescueComment != null)
                    hashCode = hashCode * 59 + this.BusinessRescueComment.GetHashCode();
                if (this.AuditorBusinessAddresses != null)
                    hashCode = hashCode * 59 + this.AuditorBusinessAddresses.GetHashCode();
                if (this.AuditorBusinessPostalCode != null)
                    hashCode = hashCode * 59 + this.AuditorBusinessPostalCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
