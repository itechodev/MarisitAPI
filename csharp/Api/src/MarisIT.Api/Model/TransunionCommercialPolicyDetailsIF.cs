/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialPolicyDetailsIF
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialPolicyDetailsIF :  IEquatable<TransunionCommercialPolicyDetailsIF>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialPolicyDetailsIF" /> class.
        /// </summary>
        /// <param name="productCode">productCode.</param>
        /// <param name="policyCounter">policyCounter.</param>
        /// <param name="insurer">insurer.</param>
        /// <param name="policyNumber">policyNumber.</param>
        /// <param name="policyInceptionDate">policyInceptionDate.</param>
        /// <param name="policyCancellationDate">policyCancellationDate.</param>
        /// <param name="policyCancellationReason">policyCancellationReason.</param>
        /// <param name="certificateNumber">certificateNumber.</param>
        /// <param name="certificateInceptionDate">certificateInceptionDate.</param>
        /// <param name="certificateCancellationReason">certificateCancellationReason.</param>
        /// <param name="policyStatus">policyStatus.</param>
        /// <param name="statusDate">statusDate.</param>
        /// <param name="message">message.</param>
        public TransunionCommercialPolicyDetailsIF(string productCode = default(string), string policyCounter = default(string), string insurer = default(string), string policyNumber = default(string), string policyInceptionDate = default(string), string policyCancellationDate = default(string), string policyCancellationReason = default(string), string certificateNumber = default(string), string certificateInceptionDate = default(string), string certificateCancellationReason = default(string), string policyStatus = default(string), string statusDate = default(string), string message = default(string))
        {
            this.ProductCode = productCode;
            this.PolicyCounter = policyCounter;
            this.Insurer = insurer;
            this.PolicyNumber = policyNumber;
            this.PolicyInceptionDate = policyInceptionDate;
            this.PolicyCancellationDate = policyCancellationDate;
            this.PolicyCancellationReason = policyCancellationReason;
            this.CertificateNumber = certificateNumber;
            this.CertificateInceptionDate = certificateInceptionDate;
            this.CertificateCancellationReason = certificateCancellationReason;
            this.PolicyStatus = policyStatus;
            this.StatusDate = statusDate;
            this.Message = message;
            this.ProductCode = productCode;
            this.PolicyCounter = policyCounter;
            this.Insurer = insurer;
            this.PolicyNumber = policyNumber;
            this.PolicyInceptionDate = policyInceptionDate;
            this.PolicyCancellationDate = policyCancellationDate;
            this.PolicyCancellationReason = policyCancellationReason;
            this.CertificateNumber = certificateNumber;
            this.CertificateInceptionDate = certificateInceptionDate;
            this.CertificateCancellationReason = certificateCancellationReason;
            this.PolicyStatus = policyStatus;
            this.StatusDate = statusDate;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name="productCode", EmitDefaultValue=true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets PolicyCounter
        /// </summary>
        [DataMember(Name="policyCounter", EmitDefaultValue=true)]
        public string PolicyCounter { get; set; }

        /// <summary>
        /// Gets or Sets Insurer
        /// </summary>
        [DataMember(Name="insurer", EmitDefaultValue=true)]
        public string Insurer { get; set; }

        /// <summary>
        /// Gets or Sets PolicyNumber
        /// </summary>
        [DataMember(Name="policyNumber", EmitDefaultValue=true)]
        public string PolicyNumber { get; set; }

        /// <summary>
        /// Gets or Sets PolicyInceptionDate
        /// </summary>
        [DataMember(Name="policyInceptionDate", EmitDefaultValue=true)]
        public string PolicyInceptionDate { get; set; }

        /// <summary>
        /// Gets or Sets PolicyCancellationDate
        /// </summary>
        [DataMember(Name="policyCancellationDate", EmitDefaultValue=true)]
        public string PolicyCancellationDate { get; set; }

        /// <summary>
        /// Gets or Sets PolicyCancellationReason
        /// </summary>
        [DataMember(Name="policyCancellationReason", EmitDefaultValue=true)]
        public string PolicyCancellationReason { get; set; }

        /// <summary>
        /// Gets or Sets CertificateNumber
        /// </summary>
        [DataMember(Name="certificateNumber", EmitDefaultValue=true)]
        public string CertificateNumber { get; set; }

        /// <summary>
        /// Gets or Sets CertificateInceptionDate
        /// </summary>
        [DataMember(Name="certificateInceptionDate", EmitDefaultValue=true)]
        public string CertificateInceptionDate { get; set; }

        /// <summary>
        /// Gets or Sets CertificateCancellationReason
        /// </summary>
        [DataMember(Name="certificateCancellationReason", EmitDefaultValue=true)]
        public string CertificateCancellationReason { get; set; }

        /// <summary>
        /// Gets or Sets PolicyStatus
        /// </summary>
        [DataMember(Name="policyStatus", EmitDefaultValue=true)]
        public string PolicyStatus { get; set; }

        /// <summary>
        /// Gets or Sets StatusDate
        /// </summary>
        [DataMember(Name="statusDate", EmitDefaultValue=true)]
        public string StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialPolicyDetailsIF {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  PolicyCounter: ").Append(PolicyCounter).Append("\n");
            sb.Append("  Insurer: ").Append(Insurer).Append("\n");
            sb.Append("  PolicyNumber: ").Append(PolicyNumber).Append("\n");
            sb.Append("  PolicyInceptionDate: ").Append(PolicyInceptionDate).Append("\n");
            sb.Append("  PolicyCancellationDate: ").Append(PolicyCancellationDate).Append("\n");
            sb.Append("  PolicyCancellationReason: ").Append(PolicyCancellationReason).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  CertificateInceptionDate: ").Append(CertificateInceptionDate).Append("\n");
            sb.Append("  CertificateCancellationReason: ").Append(CertificateCancellationReason).Append("\n");
            sb.Append("  PolicyStatus: ").Append(PolicyStatus).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialPolicyDetailsIF);
        }

        /// <summary>
        /// Returns true if TransunionCommercialPolicyDetailsIF instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialPolicyDetailsIF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialPolicyDetailsIF input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.PolicyCounter == input.PolicyCounter ||
                    (this.PolicyCounter != null &&
                    this.PolicyCounter.Equals(input.PolicyCounter))
                ) && 
                (
                    this.Insurer == input.Insurer ||
                    (this.Insurer != null &&
                    this.Insurer.Equals(input.Insurer))
                ) && 
                (
                    this.PolicyNumber == input.PolicyNumber ||
                    (this.PolicyNumber != null &&
                    this.PolicyNumber.Equals(input.PolicyNumber))
                ) && 
                (
                    this.PolicyInceptionDate == input.PolicyInceptionDate ||
                    (this.PolicyInceptionDate != null &&
                    this.PolicyInceptionDate.Equals(input.PolicyInceptionDate))
                ) && 
                (
                    this.PolicyCancellationDate == input.PolicyCancellationDate ||
                    (this.PolicyCancellationDate != null &&
                    this.PolicyCancellationDate.Equals(input.PolicyCancellationDate))
                ) && 
                (
                    this.PolicyCancellationReason == input.PolicyCancellationReason ||
                    (this.PolicyCancellationReason != null &&
                    this.PolicyCancellationReason.Equals(input.PolicyCancellationReason))
                ) && 
                (
                    this.CertificateNumber == input.CertificateNumber ||
                    (this.CertificateNumber != null &&
                    this.CertificateNumber.Equals(input.CertificateNumber))
                ) && 
                (
                    this.CertificateInceptionDate == input.CertificateInceptionDate ||
                    (this.CertificateInceptionDate != null &&
                    this.CertificateInceptionDate.Equals(input.CertificateInceptionDate))
                ) && 
                (
                    this.CertificateCancellationReason == input.CertificateCancellationReason ||
                    (this.CertificateCancellationReason != null &&
                    this.CertificateCancellationReason.Equals(input.CertificateCancellationReason))
                ) && 
                (
                    this.PolicyStatus == input.PolicyStatus ||
                    (this.PolicyStatus != null &&
                    this.PolicyStatus.Equals(input.PolicyStatus))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.PolicyCounter != null)
                    hashCode = hashCode * 59 + this.PolicyCounter.GetHashCode();
                if (this.Insurer != null)
                    hashCode = hashCode * 59 + this.Insurer.GetHashCode();
                if (this.PolicyNumber != null)
                    hashCode = hashCode * 59 + this.PolicyNumber.GetHashCode();
                if (this.PolicyInceptionDate != null)
                    hashCode = hashCode * 59 + this.PolicyInceptionDate.GetHashCode();
                if (this.PolicyCancellationDate != null)
                    hashCode = hashCode * 59 + this.PolicyCancellationDate.GetHashCode();
                if (this.PolicyCancellationReason != null)
                    hashCode = hashCode * 59 + this.PolicyCancellationReason.GetHashCode();
                if (this.CertificateNumber != null)
                    hashCode = hashCode * 59 + this.CertificateNumber.GetHashCode();
                if (this.CertificateInceptionDate != null)
                    hashCode = hashCode * 59 + this.CertificateInceptionDate.GetHashCode();
                if (this.CertificateCancellationReason != null)
                    hashCode = hashCode * 59 + this.CertificateCancellationReason.GetHashCode();
                if (this.PolicyStatus != null)
                    hashCode = hashCode * 59 + this.PolicyStatus.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
