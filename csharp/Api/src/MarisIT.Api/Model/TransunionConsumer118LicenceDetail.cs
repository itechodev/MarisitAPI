/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118LicenceDetail
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118LicenceDetail :  IEquatable<TransunionConsumer118LicenceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118LicenceDetail" /> class.
        /// </summary>
        /// <param name="fromDate">fromDate.</param>
        /// <param name="toDate">toDate.</param>
        /// <param name="dateFirstIssue">dateFirstIssue.</param>
        /// <param name="driverLicenceCode">driverLicenceCode.</param>
        /// <param name="driverLicenceDescription">driverLicenceDescription.</param>
        /// <param name="vehicleRestrictionCode">vehicleRestrictionCode.</param>
        /// <param name="vehicleRestrictionDescription">vehicleRestrictionDescription.</param>
        public TransunionConsumer118LicenceDetail(string fromDate = default(string), string toDate = default(string), string dateFirstIssue = default(string), string driverLicenceCode = default(string), string driverLicenceDescription = default(string), string vehicleRestrictionCode = default(string), string vehicleRestrictionDescription = default(string))
        {
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.DateFirstIssue = dateFirstIssue;
            this.DriverLicenceCode = driverLicenceCode;
            this.DriverLicenceDescription = driverLicenceDescription;
            this.VehicleRestrictionCode = vehicleRestrictionCode;
            this.VehicleRestrictionDescription = vehicleRestrictionDescription;
            this.FromDate = fromDate;
            this.ToDate = toDate;
            this.DateFirstIssue = dateFirstIssue;
            this.DriverLicenceCode = driverLicenceCode;
            this.DriverLicenceDescription = driverLicenceDescription;
            this.VehicleRestrictionCode = vehicleRestrictionCode;
            this.VehicleRestrictionDescription = vehicleRestrictionDescription;
        }

        /// <summary>
        /// Gets or Sets FromDate
        /// </summary>
        [DataMember(Name="fromDate", EmitDefaultValue=true)]
        public string FromDate { get; set; }

        /// <summary>
        /// Gets or Sets ToDate
        /// </summary>
        [DataMember(Name="toDate", EmitDefaultValue=true)]
        public string ToDate { get; set; }

        /// <summary>
        /// Gets or Sets DateFirstIssue
        /// </summary>
        [DataMember(Name="dateFirstIssue", EmitDefaultValue=true)]
        public string DateFirstIssue { get; set; }

        /// <summary>
        /// Gets or Sets DriverLicenceCode
        /// </summary>
        [DataMember(Name="driverLicenceCode", EmitDefaultValue=true)]
        public string DriverLicenceCode { get; set; }

        /// <summary>
        /// Gets or Sets DriverLicenceDescription
        /// </summary>
        [DataMember(Name="driverLicenceDescription", EmitDefaultValue=true)]
        public string DriverLicenceDescription { get; set; }

        /// <summary>
        /// Gets or Sets VehicleRestrictionCode
        /// </summary>
        [DataMember(Name="vehicleRestrictionCode", EmitDefaultValue=true)]
        public string VehicleRestrictionCode { get; set; }

        /// <summary>
        /// Gets or Sets VehicleRestrictionDescription
        /// </summary>
        [DataMember(Name="vehicleRestrictionDescription", EmitDefaultValue=true)]
        public string VehicleRestrictionDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118LicenceDetail {\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  DateFirstIssue: ").Append(DateFirstIssue).Append("\n");
            sb.Append("  DriverLicenceCode: ").Append(DriverLicenceCode).Append("\n");
            sb.Append("  DriverLicenceDescription: ").Append(DriverLicenceDescription).Append("\n");
            sb.Append("  VehicleRestrictionCode: ").Append(VehicleRestrictionCode).Append("\n");
            sb.Append("  VehicleRestrictionDescription: ").Append(VehicleRestrictionDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118LicenceDetail);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118LicenceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118LicenceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118LicenceDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.ToDate == input.ToDate ||
                    (this.ToDate != null &&
                    this.ToDate.Equals(input.ToDate))
                ) && 
                (
                    this.DateFirstIssue == input.DateFirstIssue ||
                    (this.DateFirstIssue != null &&
                    this.DateFirstIssue.Equals(input.DateFirstIssue))
                ) && 
                (
                    this.DriverLicenceCode == input.DriverLicenceCode ||
                    (this.DriverLicenceCode != null &&
                    this.DriverLicenceCode.Equals(input.DriverLicenceCode))
                ) && 
                (
                    this.DriverLicenceDescription == input.DriverLicenceDescription ||
                    (this.DriverLicenceDescription != null &&
                    this.DriverLicenceDescription.Equals(input.DriverLicenceDescription))
                ) && 
                (
                    this.VehicleRestrictionCode == input.VehicleRestrictionCode ||
                    (this.VehicleRestrictionCode != null &&
                    this.VehicleRestrictionCode.Equals(input.VehicleRestrictionCode))
                ) && 
                (
                    this.VehicleRestrictionDescription == input.VehicleRestrictionDescription ||
                    (this.VehicleRestrictionDescription != null &&
                    this.VehicleRestrictionDescription.Equals(input.VehicleRestrictionDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.ToDate != null)
                    hashCode = hashCode * 59 + this.ToDate.GetHashCode();
                if (this.DateFirstIssue != null)
                    hashCode = hashCode * 59 + this.DateFirstIssue.GetHashCode();
                if (this.DriverLicenceCode != null)
                    hashCode = hashCode * 59 + this.DriverLicenceCode.GetHashCode();
                if (this.DriverLicenceDescription != null)
                    hashCode = hashCode * 59 + this.DriverLicenceDescription.GetHashCode();
                if (this.VehicleRestrictionCode != null)
                    hashCode = hashCode * 59 + this.VehicleRestrictionCode.GetHashCode();
                if (this.VehicleRestrictionDescription != null)
                    hashCode = hashCode * 59 + this.VehicleRestrictionDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
