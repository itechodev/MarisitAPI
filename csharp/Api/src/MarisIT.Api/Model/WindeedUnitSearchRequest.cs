/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedUnitSearchRequest
    /// </summary>
    [DataContract]
    public partial class WindeedUnitSearchRequest :  IEquatable<WindeedUnitSearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public WindeedUnitType? UnitType { get; set; }
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=true)]
        public WindeedDeedsOffice DeedsOffice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedUnitSearchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WindeedUnitSearchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedUnitSearchRequest" /> class.
        /// </summary>
        /// <param name="schemeName">schemeName (required).</param>
        /// <param name="schemeNumber">schemeNumber.</param>
        /// <param name="unitNumber">unitNumber.</param>
        /// <param name="unitType">unitType.</param>
        /// <param name="deedsOffice">deedsOffice (required).</param>
        /// <param name="reference">reference.</param>
        public WindeedUnitSearchRequest(string schemeName = default(string), int schemeNumber = default(int), string unitNumber = default(string), WindeedUnitType? unitType = default(WindeedUnitType?), WindeedDeedsOffice deedsOffice = default(WindeedDeedsOffice), string reference = default(string))
        {
            // to ensure "schemeName" is required (not null)
            if (schemeName == null)
            {
                throw new InvalidDataException("schemeName is a required property for WindeedUnitSearchRequest and cannot be null");
            }
            else
            {
                this.SchemeName = schemeName;
            }

            this.UnitNumber = unitNumber;
            // to ensure "deedsOffice" is required (not null)
            if (deedsOffice == null)
            {
                throw new InvalidDataException("deedsOffice is a required property for WindeedUnitSearchRequest and cannot be null");
            }
            else
            {
                this.DeedsOffice = deedsOffice;
            }

            this.Reference = reference;
            this.SchemeNumber = schemeNumber;
            this.UnitNumber = unitNumber;
            this.UnitType = unitType;
            this.Reference = reference;
        }

        /// <summary>
        /// Gets or Sets SchemeName
        /// </summary>
        [DataMember(Name="schemeName", EmitDefaultValue=true)]
        public string SchemeName { get; set; }

        /// <summary>
        /// Gets or Sets SchemeNumber
        /// </summary>
        [DataMember(Name="schemeNumber", EmitDefaultValue=false)]
        public int SchemeNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [DataMember(Name="unitNumber", EmitDefaultValue=true)]
        public string UnitNumber { get; set; }



        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedUnitSearchRequest {\n");
            sb.Append("  SchemeName: ").Append(SchemeName).Append("\n");
            sb.Append("  SchemeNumber: ").Append(SchemeNumber).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedUnitSearchRequest);
        }

        /// <summary>
        /// Returns true if WindeedUnitSearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedUnitSearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedUnitSearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemeName == input.SchemeName ||
                    (this.SchemeName != null &&
                    this.SchemeName.Equals(input.SchemeName))
                ) && 
                (
                    this.SchemeNumber == input.SchemeNumber ||
                    (this.SchemeNumber != null &&
                    this.SchemeNumber.Equals(input.SchemeNumber))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemeName != null)
                    hashCode = hashCode * 59 + this.SchemeName.GetHashCode();
                if (this.SchemeNumber != null)
                    hashCode = hashCode * 59 + this.SchemeNumber.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
