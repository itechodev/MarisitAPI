/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsBankVerificationPassportRequest
    /// </summary>
    [DataContract]
    public partial class XdsBankVerificationPassportRequest :  IEquatable<XdsBankVerificationPassportRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public XdsAccountTypes AccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsBankVerificationPassportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XdsBankVerificationPassportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsBankVerificationPassportRequest" /> class.
        /// </summary>
        /// <param name="bankName">bankName (required).</param>
        /// <param name="branchCode">branchCode (required).</param>
        /// <param name="accountType">accountType (required).</param>
        /// <param name="accountNo">accountNo (required).</param>
        /// <param name="reference">reference.</param>
        /// <param name="isForeignPassport">isForeignPassport (required).</param>
        /// <param name="passportNumber">passportNumber (required).</param>
        /// <param name="initials">initials (required).</param>
        /// <param name="surname">surname (required).</param>
        public XdsBankVerificationPassportRequest(string bankName = default(string), string branchCode = default(string), XdsAccountTypes accountType = default(XdsAccountTypes), string accountNo = default(string), string reference = default(string), bool isForeignPassport = default(bool), string passportNumber = default(string), string initials = default(string), string surname = default(string))
        {
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }

            // to ensure "branchCode" is required (not null)
            if (branchCode == null)
            {
                throw new InvalidDataException("branchCode is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.BranchCode = branchCode;
            }

            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new InvalidDataException("accountType is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.AccountType = accountType;
            }

            // to ensure "accountNo" is required (not null)
            if (accountNo == null)
            {
                throw new InvalidDataException("accountNo is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.AccountNo = accountNo;
            }

            this.Reference = reference;
            // to ensure "isForeignPassport" is required (not null)
            if (isForeignPassport == null)
            {
                throw new InvalidDataException("isForeignPassport is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.IsForeignPassport = isForeignPassport;
            }

            // to ensure "passportNumber" is required (not null)
            if (passportNumber == null)
            {
                throw new InvalidDataException("passportNumber is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.PassportNumber = passportNumber;
            }

            // to ensure "initials" is required (not null)
            if (initials == null)
            {
                throw new InvalidDataException("initials is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.Initials = initials;
            }

            // to ensure "surname" is required (not null)
            if (surname == null)
            {
                throw new InvalidDataException("surname is a required property for XdsBankVerificationPassportRequest and cannot be null");
            }
            else
            {
                this.Surname = surname;
            }

            this.Reference = reference;
        }

        /// <summary>
        /// Gets or Sets BankName
        /// </summary>
        [DataMember(Name="bankName", EmitDefaultValue=true)]
        public string BankName { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name="branchCode", EmitDefaultValue=true)]
        public string BranchCode { get; set; }


        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="accountNo", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets IsForeignPassport
        /// </summary>
        [DataMember(Name="isForeignPassport", EmitDefaultValue=true)]
        public bool IsForeignPassport { get; set; }

        /// <summary>
        /// Gets or Sets PassportNumber
        /// </summary>
        [DataMember(Name="passportNumber", EmitDefaultValue=true)]
        public string PassportNumber { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials", EmitDefaultValue=true)]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsBankVerificationPassportRequest {\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  IsForeignPassport: ").Append(IsForeignPassport).Append("\n");
            sb.Append("  PassportNumber: ").Append(PassportNumber).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsBankVerificationPassportRequest);
        }

        /// <summary>
        /// Returns true if XdsBankVerificationPassportRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsBankVerificationPassportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsBankVerificationPassportRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.IsForeignPassport == input.IsForeignPassport ||
                    (this.IsForeignPassport != null &&
                    this.IsForeignPassport.Equals(input.IsForeignPassport))
                ) && 
                (
                    this.PassportNumber == input.PassportNumber ||
                    (this.PassportNumber != null &&
                    this.PassportNumber.Equals(input.PassportNumber))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.IsForeignPassport != null)
                    hashCode = hashCode * 59 + this.IsForeignPassport.GetHashCode();
                if (this.PassportNumber != null)
                    hashCode = hashCode * 59 + this.PassportNumber.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
