/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialFinanceData
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialFinanceData :  IEquatable<TransunionCommercialFinanceData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialFinanceData" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="date">date.</param>
        /// <param name="balanceSheetDateCurrent">balanceSheetDateCurrent.</param>
        /// <param name="balanceSheetDateBefore">balanceSheetDateBefore.</param>
        /// <param name="financialFactor">financialFactor.</param>
        /// <param name="currencyCurrent">currencyCurrent.</param>
        /// <param name="currencyBefore">currencyBefore.</param>
        /// <param name="finYearMonthCurrent">finYearMonthCurrent.</param>
        /// <param name="finYearMonthBefore">finYearMonthBefore.</param>
        /// <param name="yearCurrent">yearCurrent.</param>
        /// <param name="yearBefore">yearBefore.</param>
        /// <param name="turnoverBandCurrent">turnoverBandCurrent.</param>
        /// <param name="turnoverBandBefore">turnoverBandBefore.</param>
        /// <param name="turnoverApproximationCurrent">turnoverApproximationCurrent.</param>
        /// <param name="turnoverApproximationBefore">turnoverApproximationBefore.</param>
        /// <param name="netProfitApproximationCurrent">netProfitApproximationCurrent.</param>
        /// <param name="netProfitApproximationBefore">netProfitApproximationBefore.</param>
        /// <param name="balanceSheetTypeCurrent">balanceSheetTypeCurrent.</param>
        /// <param name="balanceSheetTypeBefore">balanceSheetTypeBefore.</param>
        /// <param name="infoSource">infoSource.</param>
        /// <param name="comment">comment.</param>
        public TransunionCommercialFinanceData(string majorProduct = default(string), string date = default(string), string balanceSheetDateCurrent = default(string), string balanceSheetDateBefore = default(string), string financialFactor = default(string), string currencyCurrent = default(string), string currencyBefore = default(string), string finYearMonthCurrent = default(string), string finYearMonthBefore = default(string), string yearCurrent = default(string), string yearBefore = default(string), List<string> turnoverBandCurrent = default(List<string>), List<string> turnoverBandBefore = default(List<string>), string turnoverApproximationCurrent = default(string), string turnoverApproximationBefore = default(string), string netProfitApproximationCurrent = default(string), string netProfitApproximationBefore = default(string), string balanceSheetTypeCurrent = default(string), string balanceSheetTypeBefore = default(string), string infoSource = default(string), string comment = default(string))
        {
            this.MajorProduct = majorProduct;
            this.Date = date;
            this.BalanceSheetDateCurrent = balanceSheetDateCurrent;
            this.BalanceSheetDateBefore = balanceSheetDateBefore;
            this.FinancialFactor = financialFactor;
            this.CurrencyCurrent = currencyCurrent;
            this.CurrencyBefore = currencyBefore;
            this.FinYearMonthCurrent = finYearMonthCurrent;
            this.FinYearMonthBefore = finYearMonthBefore;
            this.YearCurrent = yearCurrent;
            this.YearBefore = yearBefore;
            this.TurnoverBandCurrent = turnoverBandCurrent;
            this.TurnoverBandBefore = turnoverBandBefore;
            this.TurnoverApproximationCurrent = turnoverApproximationCurrent;
            this.TurnoverApproximationBefore = turnoverApproximationBefore;
            this.NetProfitApproximationCurrent = netProfitApproximationCurrent;
            this.NetProfitApproximationBefore = netProfitApproximationBefore;
            this.BalanceSheetTypeCurrent = balanceSheetTypeCurrent;
            this.BalanceSheetTypeBefore = balanceSheetTypeBefore;
            this.InfoSource = infoSource;
            this.Comment = comment;
            this.MajorProduct = majorProduct;
            this.Date = date;
            this.BalanceSheetDateCurrent = balanceSheetDateCurrent;
            this.BalanceSheetDateBefore = balanceSheetDateBefore;
            this.FinancialFactor = financialFactor;
            this.CurrencyCurrent = currencyCurrent;
            this.CurrencyBefore = currencyBefore;
            this.FinYearMonthCurrent = finYearMonthCurrent;
            this.FinYearMonthBefore = finYearMonthBefore;
            this.YearCurrent = yearCurrent;
            this.YearBefore = yearBefore;
            this.TurnoverBandCurrent = turnoverBandCurrent;
            this.TurnoverBandBefore = turnoverBandBefore;
            this.TurnoverApproximationCurrent = turnoverApproximationCurrent;
            this.TurnoverApproximationBefore = turnoverApproximationBefore;
            this.NetProfitApproximationCurrent = netProfitApproximationCurrent;
            this.NetProfitApproximationBefore = netProfitApproximationBefore;
            this.BalanceSheetTypeCurrent = balanceSheetTypeCurrent;
            this.BalanceSheetTypeBefore = balanceSheetTypeBefore;
            this.InfoSource = infoSource;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetDateCurrent
        /// </summary>
        [DataMember(Name="balanceSheetDateCurrent", EmitDefaultValue=true)]
        public string BalanceSheetDateCurrent { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetDateBefore
        /// </summary>
        [DataMember(Name="balanceSheetDateBefore", EmitDefaultValue=true)]
        public string BalanceSheetDateBefore { get; set; }

        /// <summary>
        /// Gets or Sets FinancialFactor
        /// </summary>
        [DataMember(Name="financialFactor", EmitDefaultValue=true)]
        public string FinancialFactor { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCurrent
        /// </summary>
        [DataMember(Name="currencyCurrent", EmitDefaultValue=true)]
        public string CurrencyCurrent { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyBefore
        /// </summary>
        [DataMember(Name="currencyBefore", EmitDefaultValue=true)]
        public string CurrencyBefore { get; set; }

        /// <summary>
        /// Gets or Sets FinYearMonthCurrent
        /// </summary>
        [DataMember(Name="finYearMonthCurrent", EmitDefaultValue=true)]
        public string FinYearMonthCurrent { get; set; }

        /// <summary>
        /// Gets or Sets FinYearMonthBefore
        /// </summary>
        [DataMember(Name="finYearMonthBefore", EmitDefaultValue=true)]
        public string FinYearMonthBefore { get; set; }

        /// <summary>
        /// Gets or Sets YearCurrent
        /// </summary>
        [DataMember(Name="yearCurrent", EmitDefaultValue=true)]
        public string YearCurrent { get; set; }

        /// <summary>
        /// Gets or Sets YearBefore
        /// </summary>
        [DataMember(Name="yearBefore", EmitDefaultValue=true)]
        public string YearBefore { get; set; }

        /// <summary>
        /// Gets or Sets TurnoverBandCurrent
        /// </summary>
        [DataMember(Name="turnoverBandCurrent", EmitDefaultValue=true)]
        public List<string> TurnoverBandCurrent { get; set; }

        /// <summary>
        /// Gets or Sets TurnoverBandBefore
        /// </summary>
        [DataMember(Name="turnoverBandBefore", EmitDefaultValue=true)]
        public List<string> TurnoverBandBefore { get; set; }

        /// <summary>
        /// Gets or Sets TurnoverApproximationCurrent
        /// </summary>
        [DataMember(Name="turnoverApproximationCurrent", EmitDefaultValue=true)]
        public string TurnoverApproximationCurrent { get; set; }

        /// <summary>
        /// Gets or Sets TurnoverApproximationBefore
        /// </summary>
        [DataMember(Name="turnoverApproximationBefore", EmitDefaultValue=true)]
        public string TurnoverApproximationBefore { get; set; }

        /// <summary>
        /// Gets or Sets NetProfitApproximationCurrent
        /// </summary>
        [DataMember(Name="netProfitApproximationCurrent", EmitDefaultValue=true)]
        public string NetProfitApproximationCurrent { get; set; }

        /// <summary>
        /// Gets or Sets NetProfitApproximationBefore
        /// </summary>
        [DataMember(Name="netProfitApproximationBefore", EmitDefaultValue=true)]
        public string NetProfitApproximationBefore { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetTypeCurrent
        /// </summary>
        [DataMember(Name="balanceSheetTypeCurrent", EmitDefaultValue=true)]
        public string BalanceSheetTypeCurrent { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetTypeBefore
        /// </summary>
        [DataMember(Name="balanceSheetTypeBefore", EmitDefaultValue=true)]
        public string BalanceSheetTypeBefore { get; set; }

        /// <summary>
        /// Gets or Sets InfoSource
        /// </summary>
        [DataMember(Name="infoSource", EmitDefaultValue=true)]
        public string InfoSource { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialFinanceData {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BalanceSheetDateCurrent: ").Append(BalanceSheetDateCurrent).Append("\n");
            sb.Append("  BalanceSheetDateBefore: ").Append(BalanceSheetDateBefore).Append("\n");
            sb.Append("  FinancialFactor: ").Append(FinancialFactor).Append("\n");
            sb.Append("  CurrencyCurrent: ").Append(CurrencyCurrent).Append("\n");
            sb.Append("  CurrencyBefore: ").Append(CurrencyBefore).Append("\n");
            sb.Append("  FinYearMonthCurrent: ").Append(FinYearMonthCurrent).Append("\n");
            sb.Append("  FinYearMonthBefore: ").Append(FinYearMonthBefore).Append("\n");
            sb.Append("  YearCurrent: ").Append(YearCurrent).Append("\n");
            sb.Append("  YearBefore: ").Append(YearBefore).Append("\n");
            sb.Append("  TurnoverBandCurrent: ").Append(TurnoverBandCurrent).Append("\n");
            sb.Append("  TurnoverBandBefore: ").Append(TurnoverBandBefore).Append("\n");
            sb.Append("  TurnoverApproximationCurrent: ").Append(TurnoverApproximationCurrent).Append("\n");
            sb.Append("  TurnoverApproximationBefore: ").Append(TurnoverApproximationBefore).Append("\n");
            sb.Append("  NetProfitApproximationCurrent: ").Append(NetProfitApproximationCurrent).Append("\n");
            sb.Append("  NetProfitApproximationBefore: ").Append(NetProfitApproximationBefore).Append("\n");
            sb.Append("  BalanceSheetTypeCurrent: ").Append(BalanceSheetTypeCurrent).Append("\n");
            sb.Append("  BalanceSheetTypeBefore: ").Append(BalanceSheetTypeBefore).Append("\n");
            sb.Append("  InfoSource: ").Append(InfoSource).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialFinanceData);
        }

        /// <summary>
        /// Returns true if TransunionCommercialFinanceData instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialFinanceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialFinanceData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.BalanceSheetDateCurrent == input.BalanceSheetDateCurrent ||
                    (this.BalanceSheetDateCurrent != null &&
                    this.BalanceSheetDateCurrent.Equals(input.BalanceSheetDateCurrent))
                ) && 
                (
                    this.BalanceSheetDateBefore == input.BalanceSheetDateBefore ||
                    (this.BalanceSheetDateBefore != null &&
                    this.BalanceSheetDateBefore.Equals(input.BalanceSheetDateBefore))
                ) && 
                (
                    this.FinancialFactor == input.FinancialFactor ||
                    (this.FinancialFactor != null &&
                    this.FinancialFactor.Equals(input.FinancialFactor))
                ) && 
                (
                    this.CurrencyCurrent == input.CurrencyCurrent ||
                    (this.CurrencyCurrent != null &&
                    this.CurrencyCurrent.Equals(input.CurrencyCurrent))
                ) && 
                (
                    this.CurrencyBefore == input.CurrencyBefore ||
                    (this.CurrencyBefore != null &&
                    this.CurrencyBefore.Equals(input.CurrencyBefore))
                ) && 
                (
                    this.FinYearMonthCurrent == input.FinYearMonthCurrent ||
                    (this.FinYearMonthCurrent != null &&
                    this.FinYearMonthCurrent.Equals(input.FinYearMonthCurrent))
                ) && 
                (
                    this.FinYearMonthBefore == input.FinYearMonthBefore ||
                    (this.FinYearMonthBefore != null &&
                    this.FinYearMonthBefore.Equals(input.FinYearMonthBefore))
                ) && 
                (
                    this.YearCurrent == input.YearCurrent ||
                    (this.YearCurrent != null &&
                    this.YearCurrent.Equals(input.YearCurrent))
                ) && 
                (
                    this.YearBefore == input.YearBefore ||
                    (this.YearBefore != null &&
                    this.YearBefore.Equals(input.YearBefore))
                ) && 
                (
                    this.TurnoverBandCurrent == input.TurnoverBandCurrent ||
                    this.TurnoverBandCurrent != null &&
                    input.TurnoverBandCurrent != null &&
                    this.TurnoverBandCurrent.SequenceEqual(input.TurnoverBandCurrent)
                ) && 
                (
                    this.TurnoverBandBefore == input.TurnoverBandBefore ||
                    this.TurnoverBandBefore != null &&
                    input.TurnoverBandBefore != null &&
                    this.TurnoverBandBefore.SequenceEqual(input.TurnoverBandBefore)
                ) && 
                (
                    this.TurnoverApproximationCurrent == input.TurnoverApproximationCurrent ||
                    (this.TurnoverApproximationCurrent != null &&
                    this.TurnoverApproximationCurrent.Equals(input.TurnoverApproximationCurrent))
                ) && 
                (
                    this.TurnoverApproximationBefore == input.TurnoverApproximationBefore ||
                    (this.TurnoverApproximationBefore != null &&
                    this.TurnoverApproximationBefore.Equals(input.TurnoverApproximationBefore))
                ) && 
                (
                    this.NetProfitApproximationCurrent == input.NetProfitApproximationCurrent ||
                    (this.NetProfitApproximationCurrent != null &&
                    this.NetProfitApproximationCurrent.Equals(input.NetProfitApproximationCurrent))
                ) && 
                (
                    this.NetProfitApproximationBefore == input.NetProfitApproximationBefore ||
                    (this.NetProfitApproximationBefore != null &&
                    this.NetProfitApproximationBefore.Equals(input.NetProfitApproximationBefore))
                ) && 
                (
                    this.BalanceSheetTypeCurrent == input.BalanceSheetTypeCurrent ||
                    (this.BalanceSheetTypeCurrent != null &&
                    this.BalanceSheetTypeCurrent.Equals(input.BalanceSheetTypeCurrent))
                ) && 
                (
                    this.BalanceSheetTypeBefore == input.BalanceSheetTypeBefore ||
                    (this.BalanceSheetTypeBefore != null &&
                    this.BalanceSheetTypeBefore.Equals(input.BalanceSheetTypeBefore))
                ) && 
                (
                    this.InfoSource == input.InfoSource ||
                    (this.InfoSource != null &&
                    this.InfoSource.Equals(input.InfoSource))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.BalanceSheetDateCurrent != null)
                    hashCode = hashCode * 59 + this.BalanceSheetDateCurrent.GetHashCode();
                if (this.BalanceSheetDateBefore != null)
                    hashCode = hashCode * 59 + this.BalanceSheetDateBefore.GetHashCode();
                if (this.FinancialFactor != null)
                    hashCode = hashCode * 59 + this.FinancialFactor.GetHashCode();
                if (this.CurrencyCurrent != null)
                    hashCode = hashCode * 59 + this.CurrencyCurrent.GetHashCode();
                if (this.CurrencyBefore != null)
                    hashCode = hashCode * 59 + this.CurrencyBefore.GetHashCode();
                if (this.FinYearMonthCurrent != null)
                    hashCode = hashCode * 59 + this.FinYearMonthCurrent.GetHashCode();
                if (this.FinYearMonthBefore != null)
                    hashCode = hashCode * 59 + this.FinYearMonthBefore.GetHashCode();
                if (this.YearCurrent != null)
                    hashCode = hashCode * 59 + this.YearCurrent.GetHashCode();
                if (this.YearBefore != null)
                    hashCode = hashCode * 59 + this.YearBefore.GetHashCode();
                if (this.TurnoverBandCurrent != null)
                    hashCode = hashCode * 59 + this.TurnoverBandCurrent.GetHashCode();
                if (this.TurnoverBandBefore != null)
                    hashCode = hashCode * 59 + this.TurnoverBandBefore.GetHashCode();
                if (this.TurnoverApproximationCurrent != null)
                    hashCode = hashCode * 59 + this.TurnoverApproximationCurrent.GetHashCode();
                if (this.TurnoverApproximationBefore != null)
                    hashCode = hashCode * 59 + this.TurnoverApproximationBefore.GetHashCode();
                if (this.NetProfitApproximationCurrent != null)
                    hashCode = hashCode * 59 + this.NetProfitApproximationCurrent.GetHashCode();
                if (this.NetProfitApproximationBefore != null)
                    hashCode = hashCode * 59 + this.NetProfitApproximationBefore.GetHashCode();
                if (this.BalanceSheetTypeCurrent != null)
                    hashCode = hashCode * 59 + this.BalanceSheetTypeCurrent.GetHashCode();
                if (this.BalanceSheetTypeBefore != null)
                    hashCode = hashCode * 59 + this.BalanceSheetTypeBefore.GetHashCode();
                if (this.InfoSource != null)
                    hashCode = hashCode * 59 + this.InfoSource.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
