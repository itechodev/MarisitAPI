/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPBONDDETAILS
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPBONDDETAILS :  IEquatable<CompuscanCOMPBONDDETAILS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPBONDDETAILS" /> class.
        /// </summary>
        /// <param name="activeindicator">activeindicator.</param>
        /// <param name="bondamount">bondamount.</param>
        /// <param name="bondnumber">bondnumber.</param>
        /// <param name="bondregistrationdate">bondregistrationdate.</param>
        /// <param name="bondregdate">bondregdate.</param>
        /// <param name="erfno">erfno.</param>
        /// <param name="institution">institution.</param>
        /// <param name="noprop">noprop.</param>
        /// <param name="propertyid">propertyid.</param>
        public CompuscanCOMPBONDDETAILS(string activeindicator = default(string), string bondamount = default(string), string bondnumber = default(string), string bondregistrationdate = default(string), string bondregdate = default(string), string erfno = default(string), string institution = default(string), string noprop = default(string), string propertyid = default(string))
        {
            this.Activeindicator = activeindicator;
            this.Bondamount = bondamount;
            this.Bondnumber = bondnumber;
            this.Bondregistrationdate = bondregistrationdate;
            this.Bondregdate = bondregdate;
            this.Erfno = erfno;
            this.Institution = institution;
            this.Noprop = noprop;
            this.Propertyid = propertyid;
            this.Activeindicator = activeindicator;
            this.Bondamount = bondamount;
            this.Bondnumber = bondnumber;
            this.Bondregistrationdate = bondregistrationdate;
            this.Bondregdate = bondregdate;
            this.Erfno = erfno;
            this.Institution = institution;
            this.Noprop = noprop;
            this.Propertyid = propertyid;
        }

        /// <summary>
        /// Gets or Sets Activeindicator
        /// </summary>
        [DataMember(Name="activeindicator", EmitDefaultValue=true)]
        public string Activeindicator { get; set; }

        /// <summary>
        /// Gets or Sets Bondamount
        /// </summary>
        [DataMember(Name="bondamount", EmitDefaultValue=true)]
        public string Bondamount { get; set; }

        /// <summary>
        /// Gets or Sets Bondnumber
        /// </summary>
        [DataMember(Name="bondnumber", EmitDefaultValue=true)]
        public string Bondnumber { get; set; }

        /// <summary>
        /// Gets or Sets Bondregistrationdate
        /// </summary>
        [DataMember(Name="bondregistrationdate", EmitDefaultValue=true)]
        public string Bondregistrationdate { get; set; }

        /// <summary>
        /// Gets or Sets Bondregdate
        /// </summary>
        [DataMember(Name="bondregdate", EmitDefaultValue=true)]
        public string Bondregdate { get; set; }

        /// <summary>
        /// Gets or Sets Erfno
        /// </summary>
        [DataMember(Name="erfno", EmitDefaultValue=true)]
        public string Erfno { get; set; }

        /// <summary>
        /// Gets or Sets Institution
        /// </summary>
        [DataMember(Name="institution", EmitDefaultValue=true)]
        public string Institution { get; set; }

        /// <summary>
        /// Gets or Sets Noprop
        /// </summary>
        [DataMember(Name="noprop", EmitDefaultValue=true)]
        public string Noprop { get; set; }

        /// <summary>
        /// Gets or Sets Propertyid
        /// </summary>
        [DataMember(Name="propertyid", EmitDefaultValue=true)]
        public string Propertyid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPBONDDETAILS {\n");
            sb.Append("  Activeindicator: ").Append(Activeindicator).Append("\n");
            sb.Append("  Bondamount: ").Append(Bondamount).Append("\n");
            sb.Append("  Bondnumber: ").Append(Bondnumber).Append("\n");
            sb.Append("  Bondregistrationdate: ").Append(Bondregistrationdate).Append("\n");
            sb.Append("  Bondregdate: ").Append(Bondregdate).Append("\n");
            sb.Append("  Erfno: ").Append(Erfno).Append("\n");
            sb.Append("  Institution: ").Append(Institution).Append("\n");
            sb.Append("  Noprop: ").Append(Noprop).Append("\n");
            sb.Append("  Propertyid: ").Append(Propertyid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPBONDDETAILS);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPBONDDETAILS instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPBONDDETAILS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPBONDDETAILS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activeindicator == input.Activeindicator ||
                    (this.Activeindicator != null &&
                    this.Activeindicator.Equals(input.Activeindicator))
                ) && 
                (
                    this.Bondamount == input.Bondamount ||
                    (this.Bondamount != null &&
                    this.Bondamount.Equals(input.Bondamount))
                ) && 
                (
                    this.Bondnumber == input.Bondnumber ||
                    (this.Bondnumber != null &&
                    this.Bondnumber.Equals(input.Bondnumber))
                ) && 
                (
                    this.Bondregistrationdate == input.Bondregistrationdate ||
                    (this.Bondregistrationdate != null &&
                    this.Bondregistrationdate.Equals(input.Bondregistrationdate))
                ) && 
                (
                    this.Bondregdate == input.Bondregdate ||
                    (this.Bondregdate != null &&
                    this.Bondregdate.Equals(input.Bondregdate))
                ) && 
                (
                    this.Erfno == input.Erfno ||
                    (this.Erfno != null &&
                    this.Erfno.Equals(input.Erfno))
                ) && 
                (
                    this.Institution == input.Institution ||
                    (this.Institution != null &&
                    this.Institution.Equals(input.Institution))
                ) && 
                (
                    this.Noprop == input.Noprop ||
                    (this.Noprop != null &&
                    this.Noprop.Equals(input.Noprop))
                ) && 
                (
                    this.Propertyid == input.Propertyid ||
                    (this.Propertyid != null &&
                    this.Propertyid.Equals(input.Propertyid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activeindicator != null)
                    hashCode = hashCode * 59 + this.Activeindicator.GetHashCode();
                if (this.Bondamount != null)
                    hashCode = hashCode * 59 + this.Bondamount.GetHashCode();
                if (this.Bondnumber != null)
                    hashCode = hashCode * 59 + this.Bondnumber.GetHashCode();
                if (this.Bondregistrationdate != null)
                    hashCode = hashCode * 59 + this.Bondregistrationdate.GetHashCode();
                if (this.Bondregdate != null)
                    hashCode = hashCode * 59 + this.Bondregdate.GetHashCode();
                if (this.Erfno != null)
                    hashCode = hashCode * 59 + this.Erfno.GetHashCode();
                if (this.Institution != null)
                    hashCode = hashCode * 59 + this.Institution.GetHashCode();
                if (this.Noprop != null)
                    hashCode = hashCode * 59 + this.Noprop.GetHashCode();
                if (this.Propertyid != null)
                    hashCode = hashCode * 59 + this.Propertyid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
