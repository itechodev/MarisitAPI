/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialBusinessPlusPrincipalSummary
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialBusinessPlusPrincipalSummary :  IEquatable<TransunionCommercialBusinessPlusPrincipalSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialBusinessPlusPrincipalSummary" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="surname">surname.</param>
        /// <param name="forename1">forename1.</param>
        /// <param name="forename2">forename2.</param>
        /// <param name="forename3">forename3.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="judgementCount">judgementCount.</param>
        /// <param name="adverseCount">adverseCount.</param>
        /// <param name="noticesCount">noticesCount.</param>
        /// <param name="debtCounseling">debtCounseling.</param>
        /// <param name="numberOfNonAdverseNotorialBonds">numberOfNonAdverseNotorialBonds.</param>
        /// <param name="deedsCount">deedsCount.</param>
        /// <param name="numberOfBusinesses">numberOfBusinesses.</param>
        public TransunionCommercialBusinessPlusPrincipalSummary(string majorProduct = default(string), string surname = default(string), string forename1 = default(string), string forename2 = default(string), string forename3 = default(string), string idNumber = default(string), string judgementCount = default(string), string adverseCount = default(string), string noticesCount = default(string), string debtCounseling = default(string), string numberOfNonAdverseNotorialBonds = default(string), string deedsCount = default(string), string numberOfBusinesses = default(string))
        {
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdNumber = idNumber;
            this.JudgementCount = judgementCount;
            this.AdverseCount = adverseCount;
            this.NoticesCount = noticesCount;
            this.DebtCounseling = debtCounseling;
            this.NumberOfNonAdverseNotorialBonds = numberOfNonAdverseNotorialBonds;
            this.DeedsCount = deedsCount;
            this.NumberOfBusinesses = numberOfBusinesses;
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdNumber = idNumber;
            this.JudgementCount = judgementCount;
            this.AdverseCount = adverseCount;
            this.NoticesCount = noticesCount;
            this.DebtCounseling = debtCounseling;
            this.NumberOfNonAdverseNotorialBonds = numberOfNonAdverseNotorialBonds;
            this.DeedsCount = deedsCount;
            this.NumberOfBusinesses = numberOfBusinesses;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Forename1
        /// </summary>
        [DataMember(Name="forename1", EmitDefaultValue=true)]
        public string Forename1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename2
        /// </summary>
        [DataMember(Name="forename2", EmitDefaultValue=true)]
        public string Forename2 { get; set; }

        /// <summary>
        /// Gets or Sets Forename3
        /// </summary>
        [DataMember(Name="forename3", EmitDefaultValue=true)]
        public string Forename3 { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets JudgementCount
        /// </summary>
        [DataMember(Name="judgementCount", EmitDefaultValue=true)]
        public string JudgementCount { get; set; }

        /// <summary>
        /// Gets or Sets AdverseCount
        /// </summary>
        [DataMember(Name="adverseCount", EmitDefaultValue=true)]
        public string AdverseCount { get; set; }

        /// <summary>
        /// Gets or Sets NoticesCount
        /// </summary>
        [DataMember(Name="noticesCount", EmitDefaultValue=true)]
        public string NoticesCount { get; set; }

        /// <summary>
        /// Gets or Sets DebtCounseling
        /// </summary>
        [DataMember(Name="debtCounseling", EmitDefaultValue=true)]
        public string DebtCounseling { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfNonAdverseNotorialBonds
        /// </summary>
        [DataMember(Name="numberOfNonAdverseNotorialBonds", EmitDefaultValue=true)]
        public string NumberOfNonAdverseNotorialBonds { get; set; }

        /// <summary>
        /// Gets or Sets DeedsCount
        /// </summary>
        [DataMember(Name="deedsCount", EmitDefaultValue=true)]
        public string DeedsCount { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfBusinesses
        /// </summary>
        [DataMember(Name="numberOfBusinesses", EmitDefaultValue=true)]
        public string NumberOfBusinesses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialBusinessPlusPrincipalSummary {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Forename1: ").Append(Forename1).Append("\n");
            sb.Append("  Forename2: ").Append(Forename2).Append("\n");
            sb.Append("  Forename3: ").Append(Forename3).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  JudgementCount: ").Append(JudgementCount).Append("\n");
            sb.Append("  AdverseCount: ").Append(AdverseCount).Append("\n");
            sb.Append("  NoticesCount: ").Append(NoticesCount).Append("\n");
            sb.Append("  DebtCounseling: ").Append(DebtCounseling).Append("\n");
            sb.Append("  NumberOfNonAdverseNotorialBonds: ").Append(NumberOfNonAdverseNotorialBonds).Append("\n");
            sb.Append("  DeedsCount: ").Append(DeedsCount).Append("\n");
            sb.Append("  NumberOfBusinesses: ").Append(NumberOfBusinesses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialBusinessPlusPrincipalSummary);
        }

        /// <summary>
        /// Returns true if TransunionCommercialBusinessPlusPrincipalSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialBusinessPlusPrincipalSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialBusinessPlusPrincipalSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Forename1 == input.Forename1 ||
                    (this.Forename1 != null &&
                    this.Forename1.Equals(input.Forename1))
                ) && 
                (
                    this.Forename2 == input.Forename2 ||
                    (this.Forename2 != null &&
                    this.Forename2.Equals(input.Forename2))
                ) && 
                (
                    this.Forename3 == input.Forename3 ||
                    (this.Forename3 != null &&
                    this.Forename3.Equals(input.Forename3))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.JudgementCount == input.JudgementCount ||
                    (this.JudgementCount != null &&
                    this.JudgementCount.Equals(input.JudgementCount))
                ) && 
                (
                    this.AdverseCount == input.AdverseCount ||
                    (this.AdverseCount != null &&
                    this.AdverseCount.Equals(input.AdverseCount))
                ) && 
                (
                    this.NoticesCount == input.NoticesCount ||
                    (this.NoticesCount != null &&
                    this.NoticesCount.Equals(input.NoticesCount))
                ) && 
                (
                    this.DebtCounseling == input.DebtCounseling ||
                    (this.DebtCounseling != null &&
                    this.DebtCounseling.Equals(input.DebtCounseling))
                ) && 
                (
                    this.NumberOfNonAdverseNotorialBonds == input.NumberOfNonAdverseNotorialBonds ||
                    (this.NumberOfNonAdverseNotorialBonds != null &&
                    this.NumberOfNonAdverseNotorialBonds.Equals(input.NumberOfNonAdverseNotorialBonds))
                ) && 
                (
                    this.DeedsCount == input.DeedsCount ||
                    (this.DeedsCount != null &&
                    this.DeedsCount.Equals(input.DeedsCount))
                ) && 
                (
                    this.NumberOfBusinesses == input.NumberOfBusinesses ||
                    (this.NumberOfBusinesses != null &&
                    this.NumberOfBusinesses.Equals(input.NumberOfBusinesses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Forename1 != null)
                    hashCode = hashCode * 59 + this.Forename1.GetHashCode();
                if (this.Forename2 != null)
                    hashCode = hashCode * 59 + this.Forename2.GetHashCode();
                if (this.Forename3 != null)
                    hashCode = hashCode * 59 + this.Forename3.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.JudgementCount != null)
                    hashCode = hashCode * 59 + this.JudgementCount.GetHashCode();
                if (this.AdverseCount != null)
                    hashCode = hashCode * 59 + this.AdverseCount.GetHashCode();
                if (this.NoticesCount != null)
                    hashCode = hashCode * 59 + this.NoticesCount.GetHashCode();
                if (this.DebtCounseling != null)
                    hashCode = hashCode * 59 + this.DebtCounseling.GetHashCode();
                if (this.NumberOfNonAdverseNotorialBonds != null)
                    hashCode = hashCode * 59 + this.NumberOfNonAdverseNotorialBonds.GetHashCode();
                if (this.DeedsCount != null)
                    hashCode = hashCode * 59 + this.DeedsCount.GetHashCode();
                if (this.NumberOfBusinesses != null)
                    hashCode = hashCode * 59 + this.NumberOfBusinesses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
