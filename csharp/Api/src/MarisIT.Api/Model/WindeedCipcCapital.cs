/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcCapital
    /// </summary>
    [DataContract]
    public partial class WindeedCipcCapital :  IEquatable<WindeedCipcCapital>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcCapital" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="sharesCount">sharesCount.</param>
        /// <param name="parriValue">parriValue.</param>
        /// <param name="amountPerShare">amountPerShare.</param>
        /// <param name="capitalPremium">capitalPremium.</param>
        public WindeedCipcCapital(WindeedCipcCipcLookup type = default(WindeedCipcCipcLookup), int? sharesCount = default(int?), double? parriValue = default(double?), double? amountPerShare = default(double?), int? capitalPremium = default(int?))
        {
            this.SharesCount = sharesCount;
            this.ParriValue = parriValue;
            this.AmountPerShare = amountPerShare;
            this.CapitalPremium = capitalPremium;
            this.Type = type;
            this.SharesCount = sharesCount;
            this.ParriValue = parriValue;
            this.AmountPerShare = amountPerShare;
            this.CapitalPremium = capitalPremium;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Type { get; set; }

        /// <summary>
        /// Gets or Sets SharesCount
        /// </summary>
        [DataMember(Name="sharesCount", EmitDefaultValue=true)]
        public int? SharesCount { get; set; }

        /// <summary>
        /// Gets or Sets ParriValue
        /// </summary>
        [DataMember(Name="parriValue", EmitDefaultValue=true)]
        public double? ParriValue { get; set; }

        /// <summary>
        /// Gets or Sets AmountPerShare
        /// </summary>
        [DataMember(Name="amountPerShare", EmitDefaultValue=true)]
        public double? AmountPerShare { get; set; }

        /// <summary>
        /// Gets or Sets CapitalPremium
        /// </summary>
        [DataMember(Name="capitalPremium", EmitDefaultValue=true)]
        public int? CapitalPremium { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcCapital {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SharesCount: ").Append(SharesCount).Append("\n");
            sb.Append("  ParriValue: ").Append(ParriValue).Append("\n");
            sb.Append("  AmountPerShare: ").Append(AmountPerShare).Append("\n");
            sb.Append("  CapitalPremium: ").Append(CapitalPremium).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcCapital);
        }

        /// <summary>
        /// Returns true if WindeedCipcCapital instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcCapital to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcCapital input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SharesCount == input.SharesCount ||
                    (this.SharesCount != null &&
                    this.SharesCount.Equals(input.SharesCount))
                ) && 
                (
                    this.ParriValue == input.ParriValue ||
                    (this.ParriValue != null &&
                    this.ParriValue.Equals(input.ParriValue))
                ) && 
                (
                    this.AmountPerShare == input.AmountPerShare ||
                    (this.AmountPerShare != null &&
                    this.AmountPerShare.Equals(input.AmountPerShare))
                ) && 
                (
                    this.CapitalPremium == input.CapitalPremium ||
                    (this.CapitalPremium != null &&
                    this.CapitalPremium.Equals(input.CapitalPremium))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SharesCount != null)
                    hashCode = hashCode * 59 + this.SharesCount.GetHashCode();
                if (this.ParriValue != null)
                    hashCode = hashCode * 59 + this.ParriValue.GetHashCode();
                if (this.AmountPerShare != null)
                    hashCode = hashCode * 59 + this.AmountPerShare.GetHashCode();
                if (this.CapitalPremium != null)
                    hashCode = hashCode * 59 + this.CapitalPremium.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
