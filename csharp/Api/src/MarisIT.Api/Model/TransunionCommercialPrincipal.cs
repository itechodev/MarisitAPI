/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialPrincipal
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialPrincipal :  IEquatable<TransunionCommercialPrincipal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialPrincipal" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="surname">surname.</param>
        /// <param name="forename1">forename1.</param>
        /// <param name="forename2">forename2.</param>
        /// <param name="forename3">forename3.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="comment">comment.</param>
        /// <param name="civilCourtRecord">civilCourtRecord.</param>
        /// <param name="defaultData">defaultData.</param>
        /// <param name="noticesOrNotarialBonds">noticesOrNotarialBonds.</param>
        /// <param name="confirmedByRegistrar">confirmedByRegistrar.</param>
        /// <param name="position">position.</param>
        /// <param name="dateStarted">dateStarted.</param>
        /// <param name="dateDisputed">dateDisputed.</param>
        /// <param name="debtCouncilDate">debtCouncilDate.</param>
        /// <param name="debtCouncilDesc">debtCouncilDesc.</param>
        /// <param name="deeds">deeds.</param>
        /// <param name="infoDate">infoDate.</param>
        /// <param name="assetNotarialBond">assetNotarialBond.</param>
        /// <param name="empiricaScore">empiricaScore.</param>
        /// <param name="empiricaReasonCode">empiricaReasonCode.</param>
        /// <param name="empiricaReasonDescription">empiricaReasonDescription.</param>
        /// <param name="empiricaExclusionCode">empiricaExclusionCode.</param>
        /// <param name="empiricaExclusionDescription">empiricaExclusionDescription.</param>
        public TransunionCommercialPrincipal(string majorProduct = default(string), string surname = default(string), string forename1 = default(string), string forename2 = default(string), string forename3 = default(string), string idNumber = default(string), string dateOfBirth = default(string), string comment = default(string), string civilCourtRecord = default(string), string defaultData = default(string), string noticesOrNotarialBonds = default(string), string confirmedByRegistrar = default(string), string position = default(string), string dateStarted = default(string), string dateDisputed = default(string), string debtCouncilDate = default(string), string debtCouncilDesc = default(string), string deeds = default(string), string infoDate = default(string), string assetNotarialBond = default(string), string empiricaScore = default(string), List<string> empiricaReasonCode = default(List<string>), List<string> empiricaReasonDescription = default(List<string>), string empiricaExclusionCode = default(string), string empiricaExclusionDescription = default(string))
        {
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdNumber = idNumber;
            this.DateOfBirth = dateOfBirth;
            this.Comment = comment;
            this.CivilCourtRecord = civilCourtRecord;
            this.DefaultData = defaultData;
            this.NoticesOrNotarialBonds = noticesOrNotarialBonds;
            this.ConfirmedByRegistrar = confirmedByRegistrar;
            this.Position = position;
            this.DateStarted = dateStarted;
            this.DateDisputed = dateDisputed;
            this.DebtCouncilDate = debtCouncilDate;
            this.DebtCouncilDesc = debtCouncilDesc;
            this.Deeds = deeds;
            this.InfoDate = infoDate;
            this.AssetNotarialBond = assetNotarialBond;
            this.EmpiricaScore = empiricaScore;
            this.EmpiricaReasonCode = empiricaReasonCode;
            this.EmpiricaReasonDescription = empiricaReasonDescription;
            this.EmpiricaExclusionCode = empiricaExclusionCode;
            this.EmpiricaExclusionDescription = empiricaExclusionDescription;
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdNumber = idNumber;
            this.DateOfBirth = dateOfBirth;
            this.Comment = comment;
            this.CivilCourtRecord = civilCourtRecord;
            this.DefaultData = defaultData;
            this.NoticesOrNotarialBonds = noticesOrNotarialBonds;
            this.ConfirmedByRegistrar = confirmedByRegistrar;
            this.Position = position;
            this.DateStarted = dateStarted;
            this.DateDisputed = dateDisputed;
            this.DebtCouncilDate = debtCouncilDate;
            this.DebtCouncilDesc = debtCouncilDesc;
            this.Deeds = deeds;
            this.InfoDate = infoDate;
            this.AssetNotarialBond = assetNotarialBond;
            this.EmpiricaScore = empiricaScore;
            this.EmpiricaReasonCode = empiricaReasonCode;
            this.EmpiricaReasonDescription = empiricaReasonDescription;
            this.EmpiricaExclusionCode = empiricaExclusionCode;
            this.EmpiricaExclusionDescription = empiricaExclusionDescription;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Forename1
        /// </summary>
        [DataMember(Name="forename1", EmitDefaultValue=true)]
        public string Forename1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename2
        /// </summary>
        [DataMember(Name="forename2", EmitDefaultValue=true)]
        public string Forename2 { get; set; }

        /// <summary>
        /// Gets or Sets Forename3
        /// </summary>
        [DataMember(Name="forename3", EmitDefaultValue=true)]
        public string Forename3 { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets CivilCourtRecord
        /// </summary>
        [DataMember(Name="civilCourtRecord", EmitDefaultValue=true)]
        public string CivilCourtRecord { get; set; }

        /// <summary>
        /// Gets or Sets DefaultData
        /// </summary>
        [DataMember(Name="defaultData", EmitDefaultValue=true)]
        public string DefaultData { get; set; }

        /// <summary>
        /// Gets or Sets NoticesOrNotarialBonds
        /// </summary>
        [DataMember(Name="noticesOrNotarialBonds", EmitDefaultValue=true)]
        public string NoticesOrNotarialBonds { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmedByRegistrar
        /// </summary>
        [DataMember(Name="confirmedByRegistrar", EmitDefaultValue=true)]
        public string ConfirmedByRegistrar { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets DateStarted
        /// </summary>
        [DataMember(Name="dateStarted", EmitDefaultValue=true)]
        public string DateStarted { get; set; }

        /// <summary>
        /// Gets or Sets DateDisputed
        /// </summary>
        [DataMember(Name="dateDisputed", EmitDefaultValue=true)]
        public string DateDisputed { get; set; }

        /// <summary>
        /// Gets or Sets DebtCouncilDate
        /// </summary>
        [DataMember(Name="debtCouncilDate", EmitDefaultValue=true)]
        public string DebtCouncilDate { get; set; }

        /// <summary>
        /// Gets or Sets DebtCouncilDesc
        /// </summary>
        [DataMember(Name="debtCouncilDesc", EmitDefaultValue=true)]
        public string DebtCouncilDesc { get; set; }

        /// <summary>
        /// Gets or Sets Deeds
        /// </summary>
        [DataMember(Name="deeds", EmitDefaultValue=true)]
        public string Deeds { get; set; }

        /// <summary>
        /// Gets or Sets InfoDate
        /// </summary>
        [DataMember(Name="infoDate", EmitDefaultValue=true)]
        public string InfoDate { get; set; }

        /// <summary>
        /// Gets or Sets AssetNotarialBond
        /// </summary>
        [DataMember(Name="assetNotarialBond", EmitDefaultValue=true)]
        public string AssetNotarialBond { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaScore
        /// </summary>
        [DataMember(Name="empiricaScore", EmitDefaultValue=true)]
        public string EmpiricaScore { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaReasonCode
        /// </summary>
        [DataMember(Name="empiricaReasonCode", EmitDefaultValue=true)]
        public List<string> EmpiricaReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaReasonDescription
        /// </summary>
        [DataMember(Name="empiricaReasonDescription", EmitDefaultValue=true)]
        public List<string> EmpiricaReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaExclusionCode
        /// </summary>
        [DataMember(Name="empiricaExclusionCode", EmitDefaultValue=true)]
        public string EmpiricaExclusionCode { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaExclusionDescription
        /// </summary>
        [DataMember(Name="empiricaExclusionDescription", EmitDefaultValue=true)]
        public string EmpiricaExclusionDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialPrincipal {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Forename1: ").Append(Forename1).Append("\n");
            sb.Append("  Forename2: ").Append(Forename2).Append("\n");
            sb.Append("  Forename3: ").Append(Forename3).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CivilCourtRecord: ").Append(CivilCourtRecord).Append("\n");
            sb.Append("  DefaultData: ").Append(DefaultData).Append("\n");
            sb.Append("  NoticesOrNotarialBonds: ").Append(NoticesOrNotarialBonds).Append("\n");
            sb.Append("  ConfirmedByRegistrar: ").Append(ConfirmedByRegistrar).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  DateStarted: ").Append(DateStarted).Append("\n");
            sb.Append("  DateDisputed: ").Append(DateDisputed).Append("\n");
            sb.Append("  DebtCouncilDate: ").Append(DebtCouncilDate).Append("\n");
            sb.Append("  DebtCouncilDesc: ").Append(DebtCouncilDesc).Append("\n");
            sb.Append("  Deeds: ").Append(Deeds).Append("\n");
            sb.Append("  InfoDate: ").Append(InfoDate).Append("\n");
            sb.Append("  AssetNotarialBond: ").Append(AssetNotarialBond).Append("\n");
            sb.Append("  EmpiricaScore: ").Append(EmpiricaScore).Append("\n");
            sb.Append("  EmpiricaReasonCode: ").Append(EmpiricaReasonCode).Append("\n");
            sb.Append("  EmpiricaReasonDescription: ").Append(EmpiricaReasonDescription).Append("\n");
            sb.Append("  EmpiricaExclusionCode: ").Append(EmpiricaExclusionCode).Append("\n");
            sb.Append("  EmpiricaExclusionDescription: ").Append(EmpiricaExclusionDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialPrincipal);
        }

        /// <summary>
        /// Returns true if TransunionCommercialPrincipal instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialPrincipal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialPrincipal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Forename1 == input.Forename1 ||
                    (this.Forename1 != null &&
                    this.Forename1.Equals(input.Forename1))
                ) && 
                (
                    this.Forename2 == input.Forename2 ||
                    (this.Forename2 != null &&
                    this.Forename2.Equals(input.Forename2))
                ) && 
                (
                    this.Forename3 == input.Forename3 ||
                    (this.Forename3 != null &&
                    this.Forename3.Equals(input.Forename3))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CivilCourtRecord == input.CivilCourtRecord ||
                    (this.CivilCourtRecord != null &&
                    this.CivilCourtRecord.Equals(input.CivilCourtRecord))
                ) && 
                (
                    this.DefaultData == input.DefaultData ||
                    (this.DefaultData != null &&
                    this.DefaultData.Equals(input.DefaultData))
                ) && 
                (
                    this.NoticesOrNotarialBonds == input.NoticesOrNotarialBonds ||
                    (this.NoticesOrNotarialBonds != null &&
                    this.NoticesOrNotarialBonds.Equals(input.NoticesOrNotarialBonds))
                ) && 
                (
                    this.ConfirmedByRegistrar == input.ConfirmedByRegistrar ||
                    (this.ConfirmedByRegistrar != null &&
                    this.ConfirmedByRegistrar.Equals(input.ConfirmedByRegistrar))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.DateStarted == input.DateStarted ||
                    (this.DateStarted != null &&
                    this.DateStarted.Equals(input.DateStarted))
                ) && 
                (
                    this.DateDisputed == input.DateDisputed ||
                    (this.DateDisputed != null &&
                    this.DateDisputed.Equals(input.DateDisputed))
                ) && 
                (
                    this.DebtCouncilDate == input.DebtCouncilDate ||
                    (this.DebtCouncilDate != null &&
                    this.DebtCouncilDate.Equals(input.DebtCouncilDate))
                ) && 
                (
                    this.DebtCouncilDesc == input.DebtCouncilDesc ||
                    (this.DebtCouncilDesc != null &&
                    this.DebtCouncilDesc.Equals(input.DebtCouncilDesc))
                ) && 
                (
                    this.Deeds == input.Deeds ||
                    (this.Deeds != null &&
                    this.Deeds.Equals(input.Deeds))
                ) && 
                (
                    this.InfoDate == input.InfoDate ||
                    (this.InfoDate != null &&
                    this.InfoDate.Equals(input.InfoDate))
                ) && 
                (
                    this.AssetNotarialBond == input.AssetNotarialBond ||
                    (this.AssetNotarialBond != null &&
                    this.AssetNotarialBond.Equals(input.AssetNotarialBond))
                ) && 
                (
                    this.EmpiricaScore == input.EmpiricaScore ||
                    (this.EmpiricaScore != null &&
                    this.EmpiricaScore.Equals(input.EmpiricaScore))
                ) && 
                (
                    this.EmpiricaReasonCode == input.EmpiricaReasonCode ||
                    this.EmpiricaReasonCode != null &&
                    input.EmpiricaReasonCode != null &&
                    this.EmpiricaReasonCode.SequenceEqual(input.EmpiricaReasonCode)
                ) && 
                (
                    this.EmpiricaReasonDescription == input.EmpiricaReasonDescription ||
                    this.EmpiricaReasonDescription != null &&
                    input.EmpiricaReasonDescription != null &&
                    this.EmpiricaReasonDescription.SequenceEqual(input.EmpiricaReasonDescription)
                ) && 
                (
                    this.EmpiricaExclusionCode == input.EmpiricaExclusionCode ||
                    (this.EmpiricaExclusionCode != null &&
                    this.EmpiricaExclusionCode.Equals(input.EmpiricaExclusionCode))
                ) && 
                (
                    this.EmpiricaExclusionDescription == input.EmpiricaExclusionDescription ||
                    (this.EmpiricaExclusionDescription != null &&
                    this.EmpiricaExclusionDescription.Equals(input.EmpiricaExclusionDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Forename1 != null)
                    hashCode = hashCode * 59 + this.Forename1.GetHashCode();
                if (this.Forename2 != null)
                    hashCode = hashCode * 59 + this.Forename2.GetHashCode();
                if (this.Forename3 != null)
                    hashCode = hashCode * 59 + this.Forename3.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CivilCourtRecord != null)
                    hashCode = hashCode * 59 + this.CivilCourtRecord.GetHashCode();
                if (this.DefaultData != null)
                    hashCode = hashCode * 59 + this.DefaultData.GetHashCode();
                if (this.NoticesOrNotarialBonds != null)
                    hashCode = hashCode * 59 + this.NoticesOrNotarialBonds.GetHashCode();
                if (this.ConfirmedByRegistrar != null)
                    hashCode = hashCode * 59 + this.ConfirmedByRegistrar.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.DateStarted != null)
                    hashCode = hashCode * 59 + this.DateStarted.GetHashCode();
                if (this.DateDisputed != null)
                    hashCode = hashCode * 59 + this.DateDisputed.GetHashCode();
                if (this.DebtCouncilDate != null)
                    hashCode = hashCode * 59 + this.DebtCouncilDate.GetHashCode();
                if (this.DebtCouncilDesc != null)
                    hashCode = hashCode * 59 + this.DebtCouncilDesc.GetHashCode();
                if (this.Deeds != null)
                    hashCode = hashCode * 59 + this.Deeds.GetHashCode();
                if (this.InfoDate != null)
                    hashCode = hashCode * 59 + this.InfoDate.GetHashCode();
                if (this.AssetNotarialBond != null)
                    hashCode = hashCode * 59 + this.AssetNotarialBond.GetHashCode();
                if (this.EmpiricaScore != null)
                    hashCode = hashCode * 59 + this.EmpiricaScore.GetHashCode();
                if (this.EmpiricaReasonCode != null)
                    hashCode = hashCode * 59 + this.EmpiricaReasonCode.GetHashCode();
                if (this.EmpiricaReasonDescription != null)
                    hashCode = hashCode * 59 + this.EmpiricaReasonDescription.GetHashCode();
                if (this.EmpiricaExclusionCode != null)
                    hashCode = hashCode * 59 + this.EmpiricaExclusionCode.GetHashCode();
                if (this.EmpiricaExclusionDescription != null)
                    hashCode = hashCode * 59 + this.EmpiricaExclusionDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
