/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsManufacturerSpecification
    /// </summary>
    [DataContract]
    public partial class XdsManufacturerSpecification :  IEquatable<XdsManufacturerSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsManufacturerSpecification" /> class.
        /// </summary>
        /// <param name="bodyStyle">bodyStyle.</param>
        /// <param name="transmissionType">transmissionType.</param>
        /// <param name="engineCapacity">engineCapacity.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="powerOutput">powerOutput.</param>
        /// <param name="torque">torque.</param>
        /// <param name="acceleration0To100">acceleration0To100.</param>
        /// <param name="topSpeed">topSpeed.</param>
        /// <param name="powerSteering">powerSteering.</param>
        /// <param name="airCon">airCon.</param>
        /// <param name="centralLocking">centralLocking.</param>
        /// <param name="leatherDetail">leatherDetail.</param>
        public XdsManufacturerSpecification(string bodyStyle = default(string), string transmissionType = default(string), string engineCapacity = default(string), string fuelType = default(string), string powerOutput = default(string), string torque = default(string), string acceleration0To100 = default(string), string topSpeed = default(string), string powerSteering = default(string), string airCon = default(string), string centralLocking = default(string), string leatherDetail = default(string))
        {
            this.BodyStyle = bodyStyle;
            this.TransmissionType = transmissionType;
            this.EngineCapacity = engineCapacity;
            this.FuelType = fuelType;
            this.PowerOutput = powerOutput;
            this.Torque = torque;
            this.Acceleration0To100 = acceleration0To100;
            this.TopSpeed = topSpeed;
            this.PowerSteering = powerSteering;
            this.AirCon = airCon;
            this.CentralLocking = centralLocking;
            this.LeatherDetail = leatherDetail;
            this.BodyStyle = bodyStyle;
            this.TransmissionType = transmissionType;
            this.EngineCapacity = engineCapacity;
            this.FuelType = fuelType;
            this.PowerOutput = powerOutput;
            this.Torque = torque;
            this.Acceleration0To100 = acceleration0To100;
            this.TopSpeed = topSpeed;
            this.PowerSteering = powerSteering;
            this.AirCon = airCon;
            this.CentralLocking = centralLocking;
            this.LeatherDetail = leatherDetail;
        }

        /// <summary>
        /// Gets or Sets BodyStyle
        /// </summary>
        [DataMember(Name="bodyStyle", EmitDefaultValue=true)]
        public string BodyStyle { get; set; }

        /// <summary>
        /// Gets or Sets TransmissionType
        /// </summary>
        [DataMember(Name="transmissionType", EmitDefaultValue=true)]
        public string TransmissionType { get; set; }

        /// <summary>
        /// Gets or Sets EngineCapacity
        /// </summary>
        [DataMember(Name="engineCapacity", EmitDefaultValue=true)]
        public string EngineCapacity { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name="fuelType", EmitDefaultValue=true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets PowerOutput
        /// </summary>
        [DataMember(Name="powerOutput", EmitDefaultValue=true)]
        public string PowerOutput { get; set; }

        /// <summary>
        /// Gets or Sets Torque
        /// </summary>
        [DataMember(Name="torque", EmitDefaultValue=true)]
        public string Torque { get; set; }

        /// <summary>
        /// Gets or Sets Acceleration0To100
        /// </summary>
        [DataMember(Name="acceleration0To100", EmitDefaultValue=true)]
        public string Acceleration0To100 { get; set; }

        /// <summary>
        /// Gets or Sets TopSpeed
        /// </summary>
        [DataMember(Name="topSpeed", EmitDefaultValue=true)]
        public string TopSpeed { get; set; }

        /// <summary>
        /// Gets or Sets PowerSteering
        /// </summary>
        [DataMember(Name="powerSteering", EmitDefaultValue=true)]
        public string PowerSteering { get; set; }

        /// <summary>
        /// Gets or Sets AirCon
        /// </summary>
        [DataMember(Name="airCon", EmitDefaultValue=true)]
        public string AirCon { get; set; }

        /// <summary>
        /// Gets or Sets CentralLocking
        /// </summary>
        [DataMember(Name="centralLocking", EmitDefaultValue=true)]
        public string CentralLocking { get; set; }

        /// <summary>
        /// Gets or Sets LeatherDetail
        /// </summary>
        [DataMember(Name="leatherDetail", EmitDefaultValue=true)]
        public string LeatherDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsManufacturerSpecification {\n");
            sb.Append("  BodyStyle: ").Append(BodyStyle).Append("\n");
            sb.Append("  TransmissionType: ").Append(TransmissionType).Append("\n");
            sb.Append("  EngineCapacity: ").Append(EngineCapacity).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  PowerOutput: ").Append(PowerOutput).Append("\n");
            sb.Append("  Torque: ").Append(Torque).Append("\n");
            sb.Append("  Acceleration0To100: ").Append(Acceleration0To100).Append("\n");
            sb.Append("  TopSpeed: ").Append(TopSpeed).Append("\n");
            sb.Append("  PowerSteering: ").Append(PowerSteering).Append("\n");
            sb.Append("  AirCon: ").Append(AirCon).Append("\n");
            sb.Append("  CentralLocking: ").Append(CentralLocking).Append("\n");
            sb.Append("  LeatherDetail: ").Append(LeatherDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsManufacturerSpecification);
        }

        /// <summary>
        /// Returns true if XdsManufacturerSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsManufacturerSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsManufacturerSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BodyStyle == input.BodyStyle ||
                    (this.BodyStyle != null &&
                    this.BodyStyle.Equals(input.BodyStyle))
                ) && 
                (
                    this.TransmissionType == input.TransmissionType ||
                    (this.TransmissionType != null &&
                    this.TransmissionType.Equals(input.TransmissionType))
                ) && 
                (
                    this.EngineCapacity == input.EngineCapacity ||
                    (this.EngineCapacity != null &&
                    this.EngineCapacity.Equals(input.EngineCapacity))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.PowerOutput == input.PowerOutput ||
                    (this.PowerOutput != null &&
                    this.PowerOutput.Equals(input.PowerOutput))
                ) && 
                (
                    this.Torque == input.Torque ||
                    (this.Torque != null &&
                    this.Torque.Equals(input.Torque))
                ) && 
                (
                    this.Acceleration0To100 == input.Acceleration0To100 ||
                    (this.Acceleration0To100 != null &&
                    this.Acceleration0To100.Equals(input.Acceleration0To100))
                ) && 
                (
                    this.TopSpeed == input.TopSpeed ||
                    (this.TopSpeed != null &&
                    this.TopSpeed.Equals(input.TopSpeed))
                ) && 
                (
                    this.PowerSteering == input.PowerSteering ||
                    (this.PowerSteering != null &&
                    this.PowerSteering.Equals(input.PowerSteering))
                ) && 
                (
                    this.AirCon == input.AirCon ||
                    (this.AirCon != null &&
                    this.AirCon.Equals(input.AirCon))
                ) && 
                (
                    this.CentralLocking == input.CentralLocking ||
                    (this.CentralLocking != null &&
                    this.CentralLocking.Equals(input.CentralLocking))
                ) && 
                (
                    this.LeatherDetail == input.LeatherDetail ||
                    (this.LeatherDetail != null &&
                    this.LeatherDetail.Equals(input.LeatherDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BodyStyle != null)
                    hashCode = hashCode * 59 + this.BodyStyle.GetHashCode();
                if (this.TransmissionType != null)
                    hashCode = hashCode * 59 + this.TransmissionType.GetHashCode();
                if (this.EngineCapacity != null)
                    hashCode = hashCode * 59 + this.EngineCapacity.GetHashCode();
                if (this.FuelType != null)
                    hashCode = hashCode * 59 + this.FuelType.GetHashCode();
                if (this.PowerOutput != null)
                    hashCode = hashCode * 59 + this.PowerOutput.GetHashCode();
                if (this.Torque != null)
                    hashCode = hashCode * 59 + this.Torque.GetHashCode();
                if (this.Acceleration0To100 != null)
                    hashCode = hashCode * 59 + this.Acceleration0To100.GetHashCode();
                if (this.TopSpeed != null)
                    hashCode = hashCode * 59 + this.TopSpeed.GetHashCode();
                if (this.PowerSteering != null)
                    hashCode = hashCode * 59 + this.PowerSteering.GetHashCode();
                if (this.AirCon != null)
                    hashCode = hashCode * 59 + this.AirCon.GetHashCode();
                if (this.CentralLocking != null)
                    hashCode = hashCode * 59 + this.CentralLocking.GetHashCode();
                if (this.LeatherDetail != null)
                    hashCode = hashCode * 59 + this.LeatherDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
