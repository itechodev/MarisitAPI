/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118NLRAccountInformationM703
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118NLRAccountInformationM703 :  IEquatable<TransunionConsumer118NLRAccountInformationM703>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118NLRAccountInformationM703" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="enquiryReferenceNo">enquiryReferenceNo.</param>
        /// <param name="subscriberCode">subscriberCode.</param>
        /// <param name="subscriberName">subscriberName.</param>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="accountNo">accountNo.</param>
        /// <param name="subAccountNo">subAccountNo.</param>
        /// <param name="accountType">accountType.</param>
        /// <param name="accountOpenDate">accountOpenDate.</param>
        /// <param name="lastUpdateDate">lastUpdateDate.</param>
        /// <param name="loanAmount">loanAmount.</param>
        /// <param name="instalmentAmount">instalmentAmount.</param>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="balanceOverdue">balanceOverdue.</param>
        /// <param name="paymentDuration">paymentDuration.</param>
        /// <param name="worstPaymentHistory">worstPaymentHistory.</param>
        /// <param name="endUseCode">endUseCode.</param>
        /// <param name="loanRegistrationNo">loanRegistrationNo.</param>
        /// <param name="ownershipType">ownershipType.</param>
        /// <param name="noOfParticipantsJointLoan">noOfParticipantsJointLoan.</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="repaymentFrequency">repaymentFrequency.</param>
        /// <param name="deferredPaymentDate">deferredPaymentDate.</param>
        /// <param name="accSoldTo3rdParty">accSoldTo3rdParty.</param>
        /// <param name="thirdPartyName">thirdPartyName.</param>
        /// <param name="paymentHistories">paymentHistories.</param>
        /// <param name="lastPaymentDate">lastPaymentDate.</param>
        public TransunionConsumer118NLRAccountInformationM703(string consumerNo = default(string), string enquiryReferenceNo = default(string), string subscriberCode = default(string), string subscriberName = default(string), string branchCode = default(string), string accountNo = default(string), string subAccountNo = default(string), string accountType = default(string), string accountOpenDate = default(string), string lastUpdateDate = default(string), string loanAmount = default(string), string instalmentAmount = default(string), string currentBalance = default(string), string balanceOverdue = default(string), string paymentDuration = default(string), string worstPaymentHistory = default(string), string endUseCode = default(string), string loanRegistrationNo = default(string), string ownershipType = default(string), string noOfParticipantsJointLoan = default(string), string paymentType = default(string), string repaymentFrequency = default(string), string deferredPaymentDate = default(string), string accSoldTo3rdParty = default(string), string thirdPartyName = default(string), List<TransunionConsumer118PaymentHistory> paymentHistories = default(List<TransunionConsumer118PaymentHistory>), string lastPaymentDate = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.EnquiryReferenceNo = enquiryReferenceNo;
            this.SubscriberCode = subscriberCode;
            this.SubscriberName = subscriberName;
            this.BranchCode = branchCode;
            this.AccountNo = accountNo;
            this.SubAccountNo = subAccountNo;
            this.AccountType = accountType;
            this.AccountOpenDate = accountOpenDate;
            this.LastUpdateDate = lastUpdateDate;
            this.LoanAmount = loanAmount;
            this.InstalmentAmount = instalmentAmount;
            this.CurrentBalance = currentBalance;
            this.BalanceOverdue = balanceOverdue;
            this.PaymentDuration = paymentDuration;
            this.WorstPaymentHistory = worstPaymentHistory;
            this.EndUseCode = endUseCode;
            this.LoanRegistrationNo = loanRegistrationNo;
            this.OwnershipType = ownershipType;
            this.NoOfParticipantsJointLoan = noOfParticipantsJointLoan;
            this.PaymentType = paymentType;
            this.RepaymentFrequency = repaymentFrequency;
            this.DeferredPaymentDate = deferredPaymentDate;
            this.AccSoldTo3rdParty = accSoldTo3rdParty;
            this.ThirdPartyName = thirdPartyName;
            this.PaymentHistories = paymentHistories;
            this.LastPaymentDate = lastPaymentDate;
            this.ConsumerNo = consumerNo;
            this.EnquiryReferenceNo = enquiryReferenceNo;
            this.SubscriberCode = subscriberCode;
            this.SubscriberName = subscriberName;
            this.BranchCode = branchCode;
            this.AccountNo = accountNo;
            this.SubAccountNo = subAccountNo;
            this.AccountType = accountType;
            this.AccountOpenDate = accountOpenDate;
            this.LastUpdateDate = lastUpdateDate;
            this.LoanAmount = loanAmount;
            this.InstalmentAmount = instalmentAmount;
            this.CurrentBalance = currentBalance;
            this.BalanceOverdue = balanceOverdue;
            this.PaymentDuration = paymentDuration;
            this.WorstPaymentHistory = worstPaymentHistory;
            this.EndUseCode = endUseCode;
            this.LoanRegistrationNo = loanRegistrationNo;
            this.OwnershipType = ownershipType;
            this.NoOfParticipantsJointLoan = noOfParticipantsJointLoan;
            this.PaymentType = paymentType;
            this.RepaymentFrequency = repaymentFrequency;
            this.DeferredPaymentDate = deferredPaymentDate;
            this.AccSoldTo3rdParty = accSoldTo3rdParty;
            this.ThirdPartyName = thirdPartyName;
            this.PaymentHistories = paymentHistories;
            this.LastPaymentDate = lastPaymentDate;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryReferenceNo
        /// </summary>
        [DataMember(Name="enquiryReferenceNo", EmitDefaultValue=true)]
        public string EnquiryReferenceNo { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberCode
        /// </summary>
        [DataMember(Name="subscriberCode", EmitDefaultValue=true)]
        public string SubscriberCode { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="subscriberName", EmitDefaultValue=true)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name="branchCode", EmitDefaultValue=true)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="accountNo", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets SubAccountNo
        /// </summary>
        [DataMember(Name="subAccountNo", EmitDefaultValue=true)]
        public string SubAccountNo { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>
        [DataMember(Name="accountType", EmitDefaultValue=true)]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or Sets AccountOpenDate
        /// </summary>
        [DataMember(Name="accountOpenDate", EmitDefaultValue=true)]
        public string AccountOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdateDate
        /// </summary>
        [DataMember(Name="lastUpdateDate", EmitDefaultValue=true)]
        public string LastUpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets LoanAmount
        /// </summary>
        [DataMember(Name="loanAmount", EmitDefaultValue=true)]
        public string LoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets InstalmentAmount
        /// </summary>
        [DataMember(Name="instalmentAmount", EmitDefaultValue=true)]
        public string InstalmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name="currentBalance", EmitDefaultValue=true)]
        public string CurrentBalance { get; set; }

        /// <summary>
        /// Gets or Sets BalanceOverdue
        /// </summary>
        [DataMember(Name="balanceOverdue", EmitDefaultValue=true)]
        public string BalanceOverdue { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDuration
        /// </summary>
        [DataMember(Name="paymentDuration", EmitDefaultValue=true)]
        public string PaymentDuration { get; set; }

        /// <summary>
        /// Gets or Sets WorstPaymentHistory
        /// </summary>
        [DataMember(Name="worstPaymentHistory", EmitDefaultValue=true)]
        public string WorstPaymentHistory { get; set; }

        /// <summary>
        /// Gets or Sets EndUseCode
        /// </summary>
        [DataMember(Name="endUseCode", EmitDefaultValue=true)]
        public string EndUseCode { get; set; }

        /// <summary>
        /// Gets or Sets LoanRegistrationNo
        /// </summary>
        [DataMember(Name="loanRegistrationNo", EmitDefaultValue=true)]
        public string LoanRegistrationNo { get; set; }

        /// <summary>
        /// Gets or Sets OwnershipType
        /// </summary>
        [DataMember(Name="ownershipType", EmitDefaultValue=true)]
        public string OwnershipType { get; set; }

        /// <summary>
        /// Gets or Sets NoOfParticipantsJointLoan
        /// </summary>
        [DataMember(Name="noOfParticipantsJointLoan", EmitDefaultValue=true)]
        public string NoOfParticipantsJointLoan { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=true)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets RepaymentFrequency
        /// </summary>
        [DataMember(Name="repaymentFrequency", EmitDefaultValue=true)]
        public string RepaymentFrequency { get; set; }

        /// <summary>
        /// Gets or Sets DeferredPaymentDate
        /// </summary>
        [DataMember(Name="deferredPaymentDate", EmitDefaultValue=true)]
        public string DeferredPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets AccSoldTo3rdParty
        /// </summary>
        [DataMember(Name="accSoldTo3rdParty", EmitDefaultValue=true)]
        public string AccSoldTo3rdParty { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyName
        /// </summary>
        [DataMember(Name="thirdPartyName", EmitDefaultValue=true)]
        public string ThirdPartyName { get; set; }

        /// <summary>
        /// Gets or Sets PaymentHistories
        /// </summary>
        [DataMember(Name="paymentHistories", EmitDefaultValue=true)]
        public List<TransunionConsumer118PaymentHistory> PaymentHistories { get; set; }

        /// <summary>
        /// Gets or Sets LastPaymentDate
        /// </summary>
        [DataMember(Name="lastPaymentDate", EmitDefaultValue=true)]
        public string LastPaymentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118NLRAccountInformationM703 {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  EnquiryReferenceNo: ").Append(EnquiryReferenceNo).Append("\n");
            sb.Append("  SubscriberCode: ").Append(SubscriberCode).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  SubAccountNo: ").Append(SubAccountNo).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  AccountOpenDate: ").Append(AccountOpenDate).Append("\n");
            sb.Append("  LastUpdateDate: ").Append(LastUpdateDate).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  InstalmentAmount: ").Append(InstalmentAmount).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  BalanceOverdue: ").Append(BalanceOverdue).Append("\n");
            sb.Append("  PaymentDuration: ").Append(PaymentDuration).Append("\n");
            sb.Append("  WorstPaymentHistory: ").Append(WorstPaymentHistory).Append("\n");
            sb.Append("  EndUseCode: ").Append(EndUseCode).Append("\n");
            sb.Append("  LoanRegistrationNo: ").Append(LoanRegistrationNo).Append("\n");
            sb.Append("  OwnershipType: ").Append(OwnershipType).Append("\n");
            sb.Append("  NoOfParticipantsJointLoan: ").Append(NoOfParticipantsJointLoan).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  RepaymentFrequency: ").Append(RepaymentFrequency).Append("\n");
            sb.Append("  DeferredPaymentDate: ").Append(DeferredPaymentDate).Append("\n");
            sb.Append("  AccSoldTo3rdParty: ").Append(AccSoldTo3rdParty).Append("\n");
            sb.Append("  ThirdPartyName: ").Append(ThirdPartyName).Append("\n");
            sb.Append("  PaymentHistories: ").Append(PaymentHistories).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118NLRAccountInformationM703);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118NLRAccountInformationM703 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118NLRAccountInformationM703 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118NLRAccountInformationM703 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.EnquiryReferenceNo == input.EnquiryReferenceNo ||
                    (this.EnquiryReferenceNo != null &&
                    this.EnquiryReferenceNo.Equals(input.EnquiryReferenceNo))
                ) && 
                (
                    this.SubscriberCode == input.SubscriberCode ||
                    (this.SubscriberCode != null &&
                    this.SubscriberCode.Equals(input.SubscriberCode))
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.SubAccountNo == input.SubAccountNo ||
                    (this.SubAccountNo != null &&
                    this.SubAccountNo.Equals(input.SubAccountNo))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.AccountOpenDate == input.AccountOpenDate ||
                    (this.AccountOpenDate != null &&
                    this.AccountOpenDate.Equals(input.AccountOpenDate))
                ) && 
                (
                    this.LastUpdateDate == input.LastUpdateDate ||
                    (this.LastUpdateDate != null &&
                    this.LastUpdateDate.Equals(input.LastUpdateDate))
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.InstalmentAmount == input.InstalmentAmount ||
                    (this.InstalmentAmount != null &&
                    this.InstalmentAmount.Equals(input.InstalmentAmount))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.BalanceOverdue == input.BalanceOverdue ||
                    (this.BalanceOverdue != null &&
                    this.BalanceOverdue.Equals(input.BalanceOverdue))
                ) && 
                (
                    this.PaymentDuration == input.PaymentDuration ||
                    (this.PaymentDuration != null &&
                    this.PaymentDuration.Equals(input.PaymentDuration))
                ) && 
                (
                    this.WorstPaymentHistory == input.WorstPaymentHistory ||
                    (this.WorstPaymentHistory != null &&
                    this.WorstPaymentHistory.Equals(input.WorstPaymentHistory))
                ) && 
                (
                    this.EndUseCode == input.EndUseCode ||
                    (this.EndUseCode != null &&
                    this.EndUseCode.Equals(input.EndUseCode))
                ) && 
                (
                    this.LoanRegistrationNo == input.LoanRegistrationNo ||
                    (this.LoanRegistrationNo != null &&
                    this.LoanRegistrationNo.Equals(input.LoanRegistrationNo))
                ) && 
                (
                    this.OwnershipType == input.OwnershipType ||
                    (this.OwnershipType != null &&
                    this.OwnershipType.Equals(input.OwnershipType))
                ) && 
                (
                    this.NoOfParticipantsJointLoan == input.NoOfParticipantsJointLoan ||
                    (this.NoOfParticipantsJointLoan != null &&
                    this.NoOfParticipantsJointLoan.Equals(input.NoOfParticipantsJointLoan))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.RepaymentFrequency == input.RepaymentFrequency ||
                    (this.RepaymentFrequency != null &&
                    this.RepaymentFrequency.Equals(input.RepaymentFrequency))
                ) && 
                (
                    this.DeferredPaymentDate == input.DeferredPaymentDate ||
                    (this.DeferredPaymentDate != null &&
                    this.DeferredPaymentDate.Equals(input.DeferredPaymentDate))
                ) && 
                (
                    this.AccSoldTo3rdParty == input.AccSoldTo3rdParty ||
                    (this.AccSoldTo3rdParty != null &&
                    this.AccSoldTo3rdParty.Equals(input.AccSoldTo3rdParty))
                ) && 
                (
                    this.ThirdPartyName == input.ThirdPartyName ||
                    (this.ThirdPartyName != null &&
                    this.ThirdPartyName.Equals(input.ThirdPartyName))
                ) && 
                (
                    this.PaymentHistories == input.PaymentHistories ||
                    this.PaymentHistories != null &&
                    input.PaymentHistories != null &&
                    this.PaymentHistories.SequenceEqual(input.PaymentHistories)
                ) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.EnquiryReferenceNo != null)
                    hashCode = hashCode * 59 + this.EnquiryReferenceNo.GetHashCode();
                if (this.SubscriberCode != null)
                    hashCode = hashCode * 59 + this.SubscriberCode.GetHashCode();
                if (this.SubscriberName != null)
                    hashCode = hashCode * 59 + this.SubscriberName.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.SubAccountNo != null)
                    hashCode = hashCode * 59 + this.SubAccountNo.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.AccountOpenDate != null)
                    hashCode = hashCode * 59 + this.AccountOpenDate.GetHashCode();
                if (this.LastUpdateDate != null)
                    hashCode = hashCode * 59 + this.LastUpdateDate.GetHashCode();
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.InstalmentAmount != null)
                    hashCode = hashCode * 59 + this.InstalmentAmount.GetHashCode();
                if (this.CurrentBalance != null)
                    hashCode = hashCode * 59 + this.CurrentBalance.GetHashCode();
                if (this.BalanceOverdue != null)
                    hashCode = hashCode * 59 + this.BalanceOverdue.GetHashCode();
                if (this.PaymentDuration != null)
                    hashCode = hashCode * 59 + this.PaymentDuration.GetHashCode();
                if (this.WorstPaymentHistory != null)
                    hashCode = hashCode * 59 + this.WorstPaymentHistory.GetHashCode();
                if (this.EndUseCode != null)
                    hashCode = hashCode * 59 + this.EndUseCode.GetHashCode();
                if (this.LoanRegistrationNo != null)
                    hashCode = hashCode * 59 + this.LoanRegistrationNo.GetHashCode();
                if (this.OwnershipType != null)
                    hashCode = hashCode * 59 + this.OwnershipType.GetHashCode();
                if (this.NoOfParticipantsJointLoan != null)
                    hashCode = hashCode * 59 + this.NoOfParticipantsJointLoan.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.RepaymentFrequency != null)
                    hashCode = hashCode * 59 + this.RepaymentFrequency.GetHashCode();
                if (this.DeferredPaymentDate != null)
                    hashCode = hashCode * 59 + this.DeferredPaymentDate.GetHashCode();
                if (this.AccSoldTo3rdParty != null)
                    hashCode = hashCode * 59 + this.AccSoldTo3rdParty.GetHashCode();
                if (this.ThirdPartyName != null)
                    hashCode = hashCode * 59 + this.ThirdPartyName.GetHashCode();
                if (this.PaymentHistories != null)
                    hashCode = hashCode * 59 + this.PaymentHistories.GetHashCode();
                if (this.LastPaymentDate != null)
                    hashCode = hashCode * 59 + this.LastPaymentDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
