/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118DefaultD801Part1
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118DefaultD801Part1 :  IEquatable<TransunionConsumer118DefaultD801Part1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118DefaultD801Part1" /> class.
        /// </summary>
        /// <param name="recordSequence">recordSequence.</param>
        /// <param name="part">part.</param>
        /// <param name="partSequence">partSequence.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="telephoneCode">telephoneCode.</param>
        /// <param name="telephoneNumber">telephoneNumber.</param>
        /// <param name="informationDate">informationDate.</param>
        /// <param name="supplierName">supplierName.</param>
        /// <param name="accountNo">accountNo.</param>
        /// <param name="subAccount">subAccount.</param>
        /// <param name="branch">branch.</param>
        /// <param name="defaultTypeCode">defaultTypeCode.</param>
        /// <param name="defaultType">defaultType.</param>
        /// <param name="defaultAmount">defaultAmount.</param>
        /// <param name="writtenOffDate">writtenOffDate.</param>
        /// <param name="surname1">surname1.</param>
        /// <param name="forename1">forename1.</param>
        /// <param name="forename2">forename2.</param>
        /// <param name="forename3">forename3.</param>
        /// <param name="identityNumber">identityNumber.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressLine3">addressLine3.</param>
        /// <param name="addressLine4">addressLine4.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="remarks1">remarks1.</param>
        /// <param name="remarks2">remarks2.</param>
        public TransunionConsumer118DefaultD801Part1(string recordSequence = default(string), string part = default(string), string partSequence = default(string), string consumerNo = default(string), string contactName = default(string), string telephoneCode = default(string), string telephoneNumber = default(string), string informationDate = default(string), string supplierName = default(string), string accountNo = default(string), string subAccount = default(string), string branch = default(string), string defaultTypeCode = default(string), string defaultType = default(string), string defaultAmount = default(string), string writtenOffDate = default(string), string surname1 = default(string), string forename1 = default(string), string forename2 = default(string), string forename3 = default(string), string identityNumber = default(string), string dateOfBirth = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string addressLine4 = default(string), string postcode = default(string), string remarks1 = default(string), string remarks2 = default(string))
        {
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.ContactName = contactName;
            this.TelephoneCode = telephoneCode;
            this.TelephoneNumber = telephoneNumber;
            this.InformationDate = informationDate;
            this.SupplierName = supplierName;
            this.AccountNo = accountNo;
            this.SubAccount = subAccount;
            this.Branch = branch;
            this.DefaultTypeCode = defaultTypeCode;
            this.DefaultType = defaultType;
            this.DefaultAmount = defaultAmount;
            this.WrittenOffDate = writtenOffDate;
            this.Surname1 = surname1;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdentityNumber = identityNumber;
            this.DateOfBirth = dateOfBirth;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.Postcode = postcode;
            this.Remarks1 = remarks1;
            this.Remarks2 = remarks2;
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.ContactName = contactName;
            this.TelephoneCode = telephoneCode;
            this.TelephoneNumber = telephoneNumber;
            this.InformationDate = informationDate;
            this.SupplierName = supplierName;
            this.AccountNo = accountNo;
            this.SubAccount = subAccount;
            this.Branch = branch;
            this.DefaultTypeCode = defaultTypeCode;
            this.DefaultType = defaultType;
            this.DefaultAmount = defaultAmount;
            this.WrittenOffDate = writtenOffDate;
            this.Surname1 = surname1;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdentityNumber = identityNumber;
            this.DateOfBirth = dateOfBirth;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.AddressLine4 = addressLine4;
            this.Postcode = postcode;
            this.Remarks1 = remarks1;
            this.Remarks2 = remarks2;
        }

        /// <summary>
        /// Gets or Sets RecordSequence
        /// </summary>
        [DataMember(Name="recordSequence", EmitDefaultValue=true)]
        public string RecordSequence { get; set; }

        /// <summary>
        /// Gets or Sets Part
        /// </summary>
        [DataMember(Name="part", EmitDefaultValue=true)]
        public string Part { get; set; }

        /// <summary>
        /// Gets or Sets PartSequence
        /// </summary>
        [DataMember(Name="partSequence", EmitDefaultValue=true)]
        public string PartSequence { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneCode
        /// </summary>
        [DataMember(Name="telephoneCode", EmitDefaultValue=true)]
        public string TelephoneCode { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneNumber
        /// </summary>
        [DataMember(Name="telephoneNumber", EmitDefaultValue=true)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets InformationDate
        /// </summary>
        [DataMember(Name="informationDate", EmitDefaultValue=true)]
        public string InformationDate { get; set; }

        /// <summary>
        /// Gets or Sets SupplierName
        /// </summary>
        [DataMember(Name="supplierName", EmitDefaultValue=true)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="accountNo", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets SubAccount
        /// </summary>
        [DataMember(Name="subAccount", EmitDefaultValue=true)]
        public string SubAccount { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTypeCode
        /// </summary>
        [DataMember(Name="defaultTypeCode", EmitDefaultValue=true)]
        public string DefaultTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets DefaultType
        /// </summary>
        [DataMember(Name="defaultType", EmitDefaultValue=true)]
        public string DefaultType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAmount
        /// </summary>
        [DataMember(Name="defaultAmount", EmitDefaultValue=true)]
        public string DefaultAmount { get; set; }

        /// <summary>
        /// Gets or Sets WrittenOffDate
        /// </summary>
        [DataMember(Name="writtenOffDate", EmitDefaultValue=true)]
        public string WrittenOffDate { get; set; }

        /// <summary>
        /// Gets or Sets Surname1
        /// </summary>
        [DataMember(Name="surname1", EmitDefaultValue=true)]
        public string Surname1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename1
        /// </summary>
        [DataMember(Name="forename1", EmitDefaultValue=true)]
        public string Forename1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename2
        /// </summary>
        [DataMember(Name="forename2", EmitDefaultValue=true)]
        public string Forename2 { get; set; }

        /// <summary>
        /// Gets or Sets Forename3
        /// </summary>
        [DataMember(Name="forename3", EmitDefaultValue=true)]
        public string Forename3 { get; set; }

        /// <summary>
        /// Gets or Sets IdentityNumber
        /// </summary>
        [DataMember(Name="identityNumber", EmitDefaultValue=true)]
        public string IdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name="addressLine1", EmitDefaultValue=true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name="addressLine2", EmitDefaultValue=true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine3
        /// </summary>
        [DataMember(Name="addressLine3", EmitDefaultValue=true)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine4
        /// </summary>
        [DataMember(Name="addressLine4", EmitDefaultValue=true)]
        public string AddressLine4 { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name="postcode", EmitDefaultValue=true)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets Remarks1
        /// </summary>
        [DataMember(Name="remarks1", EmitDefaultValue=true)]
        public string Remarks1 { get; set; }

        /// <summary>
        /// Gets or Sets Remarks2
        /// </summary>
        [DataMember(Name="remarks2", EmitDefaultValue=true)]
        public string Remarks2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118DefaultD801Part1 {\n");
            sb.Append("  RecordSequence: ").Append(RecordSequence).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("  PartSequence: ").Append(PartSequence).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  TelephoneCode: ").Append(TelephoneCode).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  InformationDate: ").Append(InformationDate).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  DefaultTypeCode: ").Append(DefaultTypeCode).Append("\n");
            sb.Append("  DefaultType: ").Append(DefaultType).Append("\n");
            sb.Append("  DefaultAmount: ").Append(DefaultAmount).Append("\n");
            sb.Append("  WrittenOffDate: ").Append(WrittenOffDate).Append("\n");
            sb.Append("  Surname1: ").Append(Surname1).Append("\n");
            sb.Append("  Forename1: ").Append(Forename1).Append("\n");
            sb.Append("  Forename2: ").Append(Forename2).Append("\n");
            sb.Append("  Forename3: ").Append(Forename3).Append("\n");
            sb.Append("  IdentityNumber: ").Append(IdentityNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Remarks1: ").Append(Remarks1).Append("\n");
            sb.Append("  Remarks2: ").Append(Remarks2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118DefaultD801Part1);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118DefaultD801Part1 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118DefaultD801Part1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118DefaultD801Part1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordSequence == input.RecordSequence ||
                    (this.RecordSequence != null &&
                    this.RecordSequence.Equals(input.RecordSequence))
                ) && 
                (
                    this.Part == input.Part ||
                    (this.Part != null &&
                    this.Part.Equals(input.Part))
                ) && 
                (
                    this.PartSequence == input.PartSequence ||
                    (this.PartSequence != null &&
                    this.PartSequence.Equals(input.PartSequence))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.TelephoneCode == input.TelephoneCode ||
                    (this.TelephoneCode != null &&
                    this.TelephoneCode.Equals(input.TelephoneCode))
                ) && 
                (
                    this.TelephoneNumber == input.TelephoneNumber ||
                    (this.TelephoneNumber != null &&
                    this.TelephoneNumber.Equals(input.TelephoneNumber))
                ) && 
                (
                    this.InformationDate == input.InformationDate ||
                    (this.InformationDate != null &&
                    this.InformationDate.Equals(input.InformationDate))
                ) && 
                (
                    this.SupplierName == input.SupplierName ||
                    (this.SupplierName != null &&
                    this.SupplierName.Equals(input.SupplierName))
                ) && 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.DefaultTypeCode == input.DefaultTypeCode ||
                    (this.DefaultTypeCode != null &&
                    this.DefaultTypeCode.Equals(input.DefaultTypeCode))
                ) && 
                (
                    this.DefaultType == input.DefaultType ||
                    (this.DefaultType != null &&
                    this.DefaultType.Equals(input.DefaultType))
                ) && 
                (
                    this.DefaultAmount == input.DefaultAmount ||
                    (this.DefaultAmount != null &&
                    this.DefaultAmount.Equals(input.DefaultAmount))
                ) && 
                (
                    this.WrittenOffDate == input.WrittenOffDate ||
                    (this.WrittenOffDate != null &&
                    this.WrittenOffDate.Equals(input.WrittenOffDate))
                ) && 
                (
                    this.Surname1 == input.Surname1 ||
                    (this.Surname1 != null &&
                    this.Surname1.Equals(input.Surname1))
                ) && 
                (
                    this.Forename1 == input.Forename1 ||
                    (this.Forename1 != null &&
                    this.Forename1.Equals(input.Forename1))
                ) && 
                (
                    this.Forename2 == input.Forename2 ||
                    (this.Forename2 != null &&
                    this.Forename2.Equals(input.Forename2))
                ) && 
                (
                    this.Forename3 == input.Forename3 ||
                    (this.Forename3 != null &&
                    this.Forename3.Equals(input.Forename3))
                ) && 
                (
                    this.IdentityNumber == input.IdentityNumber ||
                    (this.IdentityNumber != null &&
                    this.IdentityNumber.Equals(input.IdentityNumber))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.AddressLine4 == input.AddressLine4 ||
                    (this.AddressLine4 != null &&
                    this.AddressLine4.Equals(input.AddressLine4))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Remarks1 == input.Remarks1 ||
                    (this.Remarks1 != null &&
                    this.Remarks1.Equals(input.Remarks1))
                ) && 
                (
                    this.Remarks2 == input.Remarks2 ||
                    (this.Remarks2 != null &&
                    this.Remarks2.Equals(input.Remarks2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordSequence != null)
                    hashCode = hashCode * 59 + this.RecordSequence.GetHashCode();
                if (this.Part != null)
                    hashCode = hashCode * 59 + this.Part.GetHashCode();
                if (this.PartSequence != null)
                    hashCode = hashCode * 59 + this.PartSequence.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.TelephoneCode != null)
                    hashCode = hashCode * 59 + this.TelephoneCode.GetHashCode();
                if (this.TelephoneNumber != null)
                    hashCode = hashCode * 59 + this.TelephoneNumber.GetHashCode();
                if (this.InformationDate != null)
                    hashCode = hashCode * 59 + this.InformationDate.GetHashCode();
                if (this.SupplierName != null)
                    hashCode = hashCode * 59 + this.SupplierName.GetHashCode();
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.DefaultTypeCode != null)
                    hashCode = hashCode * 59 + this.DefaultTypeCode.GetHashCode();
                if (this.DefaultType != null)
                    hashCode = hashCode * 59 + this.DefaultType.GetHashCode();
                if (this.DefaultAmount != null)
                    hashCode = hashCode * 59 + this.DefaultAmount.GetHashCode();
                if (this.WrittenOffDate != null)
                    hashCode = hashCode * 59 + this.WrittenOffDate.GetHashCode();
                if (this.Surname1 != null)
                    hashCode = hashCode * 59 + this.Surname1.GetHashCode();
                if (this.Forename1 != null)
                    hashCode = hashCode * 59 + this.Forename1.GetHashCode();
                if (this.Forename2 != null)
                    hashCode = hashCode * 59 + this.Forename2.GetHashCode();
                if (this.Forename3 != null)
                    hashCode = hashCode * 59 + this.Forename3.GetHashCode();
                if (this.IdentityNumber != null)
                    hashCode = hashCode * 59 + this.IdentityNumber.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.AddressLine4 != null)
                    hashCode = hashCode * 59 + this.AddressLine4.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Remarks1 != null)
                    hashCode = hashCode * 59 + this.Remarks1.GetHashCode();
                if (this.Remarks2 != null)
                    hashCode = hashCode * 59 + this.Remarks2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
