/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118NLRSummaryMY01
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118NLRSummaryMY01 :  IEquatable<TransunionConsumer118NLRSummaryMY01>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118NLRSummaryMY01" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="totalActiveAccounts">totalActiveAccounts.</param>
        /// <param name="totalClosedAccounts24Mths">totalClosedAccounts24Mths.</param>
        /// <param name="totalAdverseAccounts24Mths">totalAdverseAccounts24Mths.</param>
        /// <param name="highestActualMonths24Mths">highestActualMonths24Mths.</param>
        /// <param name="noRevolvingAccounts">noRevolvingAccounts.</param>
        /// <param name="noCurrentInstallmentAccounts">noCurrentInstallmentAccounts.</param>
        /// <param name="noCurrentOpenAccounts">noCurrentOpenAccounts.</param>
        /// <param name="currentBalance">currentBalance.</param>
        /// <param name="currentBalanceInd">currentBalanceInd.</param>
        /// <param name="currentMonthlyInstallment">currentMonthlyInstallment.</param>
        /// <param name="currentMonthlyInstallmentBalInd">currentMonthlyInstallmentBalInd.</param>
        /// <param name="cumulativeArrearsAmount">cumulativeArrearsAmount.</param>
        /// <param name="cumulativeArrearsAmountBalanceInd">cumulativeArrearsAmountBalanceInd.</param>
        public TransunionConsumer118NLRSummaryMY01(string consumerNo = default(string), string totalActiveAccounts = default(string), string totalClosedAccounts24Mths = default(string), string totalAdverseAccounts24Mths = default(string), string highestActualMonths24Mths = default(string), string noRevolvingAccounts = default(string), string noCurrentInstallmentAccounts = default(string), string noCurrentOpenAccounts = default(string), string currentBalance = default(string), string currentBalanceInd = default(string), string currentMonthlyInstallment = default(string), string currentMonthlyInstallmentBalInd = default(string), string cumulativeArrearsAmount = default(string), string cumulativeArrearsAmountBalanceInd = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.TotalActiveAccounts = totalActiveAccounts;
            this.TotalClosedAccounts24Mths = totalClosedAccounts24Mths;
            this.TotalAdverseAccounts24Mths = totalAdverseAccounts24Mths;
            this.HighestActualMonths24Mths = highestActualMonths24Mths;
            this.NoRevolvingAccounts = noRevolvingAccounts;
            this.NoCurrentInstallmentAccounts = noCurrentInstallmentAccounts;
            this.NoCurrentOpenAccounts = noCurrentOpenAccounts;
            this.CurrentBalance = currentBalance;
            this.CurrentBalanceInd = currentBalanceInd;
            this.CurrentMonthlyInstallment = currentMonthlyInstallment;
            this.CurrentMonthlyInstallmentBalInd = currentMonthlyInstallmentBalInd;
            this.CumulativeArrearsAmount = cumulativeArrearsAmount;
            this.CumulativeArrearsAmountBalanceInd = cumulativeArrearsAmountBalanceInd;
            this.ConsumerNo = consumerNo;
            this.TotalActiveAccounts = totalActiveAccounts;
            this.TotalClosedAccounts24Mths = totalClosedAccounts24Mths;
            this.TotalAdverseAccounts24Mths = totalAdverseAccounts24Mths;
            this.HighestActualMonths24Mths = highestActualMonths24Mths;
            this.NoRevolvingAccounts = noRevolvingAccounts;
            this.NoCurrentInstallmentAccounts = noCurrentInstallmentAccounts;
            this.NoCurrentOpenAccounts = noCurrentOpenAccounts;
            this.CurrentBalance = currentBalance;
            this.CurrentBalanceInd = currentBalanceInd;
            this.CurrentMonthlyInstallment = currentMonthlyInstallment;
            this.CurrentMonthlyInstallmentBalInd = currentMonthlyInstallmentBalInd;
            this.CumulativeArrearsAmount = cumulativeArrearsAmount;
            this.CumulativeArrearsAmountBalanceInd = cumulativeArrearsAmountBalanceInd;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets TotalActiveAccounts
        /// </summary>
        [DataMember(Name="totalActiveAccounts", EmitDefaultValue=true)]
        public string TotalActiveAccounts { get; set; }

        /// <summary>
        /// Gets or Sets TotalClosedAccounts24Mths
        /// </summary>
        [DataMember(Name="totalClosedAccounts24Mths", EmitDefaultValue=true)]
        public string TotalClosedAccounts24Mths { get; set; }

        /// <summary>
        /// Gets or Sets TotalAdverseAccounts24Mths
        /// </summary>
        [DataMember(Name="totalAdverseAccounts24Mths", EmitDefaultValue=true)]
        public string TotalAdverseAccounts24Mths { get; set; }

        /// <summary>
        /// Gets or Sets HighestActualMonths24Mths
        /// </summary>
        [DataMember(Name="highestActualMonths24Mths", EmitDefaultValue=true)]
        public string HighestActualMonths24Mths { get; set; }

        /// <summary>
        /// Gets or Sets NoRevolvingAccounts
        /// </summary>
        [DataMember(Name="noRevolvingAccounts", EmitDefaultValue=true)]
        public string NoRevolvingAccounts { get; set; }

        /// <summary>
        /// Gets or Sets NoCurrentInstallmentAccounts
        /// </summary>
        [DataMember(Name="noCurrentInstallmentAccounts", EmitDefaultValue=true)]
        public string NoCurrentInstallmentAccounts { get; set; }

        /// <summary>
        /// Gets or Sets NoCurrentOpenAccounts
        /// </summary>
        [DataMember(Name="noCurrentOpenAccounts", EmitDefaultValue=true)]
        public string NoCurrentOpenAccounts { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalance
        /// </summary>
        [DataMember(Name="currentBalance", EmitDefaultValue=true)]
        public string CurrentBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalanceInd
        /// </summary>
        [DataMember(Name="currentBalanceInd", EmitDefaultValue=true)]
        public string CurrentBalanceInd { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMonthlyInstallment
        /// </summary>
        [DataMember(Name="currentMonthlyInstallment", EmitDefaultValue=true)]
        public string CurrentMonthlyInstallment { get; set; }

        /// <summary>
        /// Gets or Sets CurrentMonthlyInstallmentBalInd
        /// </summary>
        [DataMember(Name="currentMonthlyInstallmentBalInd", EmitDefaultValue=true)]
        public string CurrentMonthlyInstallmentBalInd { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeArrearsAmount
        /// </summary>
        [DataMember(Name="cumulativeArrearsAmount", EmitDefaultValue=true)]
        public string CumulativeArrearsAmount { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeArrearsAmountBalanceInd
        /// </summary>
        [DataMember(Name="cumulativeArrearsAmountBalanceInd", EmitDefaultValue=true)]
        public string CumulativeArrearsAmountBalanceInd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118NLRSummaryMY01 {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  TotalActiveAccounts: ").Append(TotalActiveAccounts).Append("\n");
            sb.Append("  TotalClosedAccounts24Mths: ").Append(TotalClosedAccounts24Mths).Append("\n");
            sb.Append("  TotalAdverseAccounts24Mths: ").Append(TotalAdverseAccounts24Mths).Append("\n");
            sb.Append("  HighestActualMonths24Mths: ").Append(HighestActualMonths24Mths).Append("\n");
            sb.Append("  NoRevolvingAccounts: ").Append(NoRevolvingAccounts).Append("\n");
            sb.Append("  NoCurrentInstallmentAccounts: ").Append(NoCurrentInstallmentAccounts).Append("\n");
            sb.Append("  NoCurrentOpenAccounts: ").Append(NoCurrentOpenAccounts).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  CurrentBalanceInd: ").Append(CurrentBalanceInd).Append("\n");
            sb.Append("  CurrentMonthlyInstallment: ").Append(CurrentMonthlyInstallment).Append("\n");
            sb.Append("  CurrentMonthlyInstallmentBalInd: ").Append(CurrentMonthlyInstallmentBalInd).Append("\n");
            sb.Append("  CumulativeArrearsAmount: ").Append(CumulativeArrearsAmount).Append("\n");
            sb.Append("  CumulativeArrearsAmountBalanceInd: ").Append(CumulativeArrearsAmountBalanceInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118NLRSummaryMY01);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118NLRSummaryMY01 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118NLRSummaryMY01 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118NLRSummaryMY01 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.TotalActiveAccounts == input.TotalActiveAccounts ||
                    (this.TotalActiveAccounts != null &&
                    this.TotalActiveAccounts.Equals(input.TotalActiveAccounts))
                ) && 
                (
                    this.TotalClosedAccounts24Mths == input.TotalClosedAccounts24Mths ||
                    (this.TotalClosedAccounts24Mths != null &&
                    this.TotalClosedAccounts24Mths.Equals(input.TotalClosedAccounts24Mths))
                ) && 
                (
                    this.TotalAdverseAccounts24Mths == input.TotalAdverseAccounts24Mths ||
                    (this.TotalAdverseAccounts24Mths != null &&
                    this.TotalAdverseAccounts24Mths.Equals(input.TotalAdverseAccounts24Mths))
                ) && 
                (
                    this.HighestActualMonths24Mths == input.HighestActualMonths24Mths ||
                    (this.HighestActualMonths24Mths != null &&
                    this.HighestActualMonths24Mths.Equals(input.HighestActualMonths24Mths))
                ) && 
                (
                    this.NoRevolvingAccounts == input.NoRevolvingAccounts ||
                    (this.NoRevolvingAccounts != null &&
                    this.NoRevolvingAccounts.Equals(input.NoRevolvingAccounts))
                ) && 
                (
                    this.NoCurrentInstallmentAccounts == input.NoCurrentInstallmentAccounts ||
                    (this.NoCurrentInstallmentAccounts != null &&
                    this.NoCurrentInstallmentAccounts.Equals(input.NoCurrentInstallmentAccounts))
                ) && 
                (
                    this.NoCurrentOpenAccounts == input.NoCurrentOpenAccounts ||
                    (this.NoCurrentOpenAccounts != null &&
                    this.NoCurrentOpenAccounts.Equals(input.NoCurrentOpenAccounts))
                ) && 
                (
                    this.CurrentBalance == input.CurrentBalance ||
                    (this.CurrentBalance != null &&
                    this.CurrentBalance.Equals(input.CurrentBalance))
                ) && 
                (
                    this.CurrentBalanceInd == input.CurrentBalanceInd ||
                    (this.CurrentBalanceInd != null &&
                    this.CurrentBalanceInd.Equals(input.CurrentBalanceInd))
                ) && 
                (
                    this.CurrentMonthlyInstallment == input.CurrentMonthlyInstallment ||
                    (this.CurrentMonthlyInstallment != null &&
                    this.CurrentMonthlyInstallment.Equals(input.CurrentMonthlyInstallment))
                ) && 
                (
                    this.CurrentMonthlyInstallmentBalInd == input.CurrentMonthlyInstallmentBalInd ||
                    (this.CurrentMonthlyInstallmentBalInd != null &&
                    this.CurrentMonthlyInstallmentBalInd.Equals(input.CurrentMonthlyInstallmentBalInd))
                ) && 
                (
                    this.CumulativeArrearsAmount == input.CumulativeArrearsAmount ||
                    (this.CumulativeArrearsAmount != null &&
                    this.CumulativeArrearsAmount.Equals(input.CumulativeArrearsAmount))
                ) && 
                (
                    this.CumulativeArrearsAmountBalanceInd == input.CumulativeArrearsAmountBalanceInd ||
                    (this.CumulativeArrearsAmountBalanceInd != null &&
                    this.CumulativeArrearsAmountBalanceInd.Equals(input.CumulativeArrearsAmountBalanceInd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.TotalActiveAccounts != null)
                    hashCode = hashCode * 59 + this.TotalActiveAccounts.GetHashCode();
                if (this.TotalClosedAccounts24Mths != null)
                    hashCode = hashCode * 59 + this.TotalClosedAccounts24Mths.GetHashCode();
                if (this.TotalAdverseAccounts24Mths != null)
                    hashCode = hashCode * 59 + this.TotalAdverseAccounts24Mths.GetHashCode();
                if (this.HighestActualMonths24Mths != null)
                    hashCode = hashCode * 59 + this.HighestActualMonths24Mths.GetHashCode();
                if (this.NoRevolvingAccounts != null)
                    hashCode = hashCode * 59 + this.NoRevolvingAccounts.GetHashCode();
                if (this.NoCurrentInstallmentAccounts != null)
                    hashCode = hashCode * 59 + this.NoCurrentInstallmentAccounts.GetHashCode();
                if (this.NoCurrentOpenAccounts != null)
                    hashCode = hashCode * 59 + this.NoCurrentOpenAccounts.GetHashCode();
                if (this.CurrentBalance != null)
                    hashCode = hashCode * 59 + this.CurrentBalance.GetHashCode();
                if (this.CurrentBalanceInd != null)
                    hashCode = hashCode * 59 + this.CurrentBalanceInd.GetHashCode();
                if (this.CurrentMonthlyInstallment != null)
                    hashCode = hashCode * 59 + this.CurrentMonthlyInstallment.GetHashCode();
                if (this.CurrentMonthlyInstallmentBalInd != null)
                    hashCode = hashCode * 59 + this.CurrentMonthlyInstallmentBalInd.GetHashCode();
                if (this.CumulativeArrearsAmount != null)
                    hashCode = hashCode * 59 + this.CumulativeArrearsAmount.GetHashCode();
                if (this.CumulativeArrearsAmountBalanceInd != null)
                    hashCode = hashCode * 59 + this.CumulativeArrearsAmountBalanceInd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
