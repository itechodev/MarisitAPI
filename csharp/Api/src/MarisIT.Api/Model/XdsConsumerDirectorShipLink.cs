/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerDirectorShipLink
    /// </summary>
    [DataContract]
    public partial class XdsConsumerDirectorShipLink :  IEquatable<XdsConsumerDirectorShipLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerDirectorShipLink" /> class.
        /// </summary>
        /// <param name="appointmentDate">appointmentDate.</param>
        /// <param name="commercialName">commercialName.</param>
        /// <param name="directorDesignationDesc">directorDesignationDesc.</param>
        /// <param name="directorStatus">directorStatus.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        /// <param name="registrationNo">registrationNo.</param>
        /// <param name="sicDesc">sicDesc.</param>
        /// <param name="telephoneNo">telephoneNo.</param>
        /// <param name="commercialStatus">commercialStatus.</param>
        /// <param name="postalAddress">postalAddress.</param>
        public XdsConsumerDirectorShipLink(string appointmentDate = default(string), string commercialName = default(string), string directorDesignationDesc = default(string), string directorStatus = default(string), string displayText = default(string), string physicalAddress = default(string), string registrationNo = default(string), string sicDesc = default(string), string telephoneNo = default(string), string commercialStatus = default(string), string postalAddress = default(string))
        {
            this.AppointmentDate = appointmentDate;
            this.CommercialName = commercialName;
            this.DirectorDesignationDesc = directorDesignationDesc;
            this.DirectorStatus = directorStatus;
            this.DisplayText = displayText;
            this.PhysicalAddress = physicalAddress;
            this.RegistrationNo = registrationNo;
            this.SicDesc = sicDesc;
            this.TelephoneNo = telephoneNo;
            this.CommercialStatus = commercialStatus;
            this.PostalAddress = postalAddress;
            this.AppointmentDate = appointmentDate;
            this.CommercialName = commercialName;
            this.DirectorDesignationDesc = directorDesignationDesc;
            this.DirectorStatus = directorStatus;
            this.DisplayText = displayText;
            this.PhysicalAddress = physicalAddress;
            this.RegistrationNo = registrationNo;
            this.SicDesc = sicDesc;
            this.TelephoneNo = telephoneNo;
            this.CommercialStatus = commercialStatus;
            this.PostalAddress = postalAddress;
        }

        /// <summary>
        /// Gets or Sets AppointmentDate
        /// </summary>
        [DataMember(Name="appointmentDate", EmitDefaultValue=true)]
        public string AppointmentDate { get; set; }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="commercialName", EmitDefaultValue=true)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets DirectorDesignationDesc
        /// </summary>
        [DataMember(Name="directorDesignationDesc", EmitDefaultValue=true)]
        public string DirectorDesignationDesc { get; set; }

        /// <summary>
        /// Gets or Sets DirectorStatus
        /// </summary>
        [DataMember(Name="directorStatus", EmitDefaultValue=true)]
        public string DirectorStatus { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name="physicalAddress", EmitDefaultValue=true)]
        public string PhysicalAddress { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNo
        /// </summary>
        [DataMember(Name="registrationNo", EmitDefaultValue=true)]
        public string RegistrationNo { get; set; }

        /// <summary>
        /// Gets or Sets SicDesc
        /// </summary>
        [DataMember(Name="sicDesc", EmitDefaultValue=true)]
        public string SicDesc { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneNo
        /// </summary>
        [DataMember(Name="telephoneNo", EmitDefaultValue=true)]
        public string TelephoneNo { get; set; }

        /// <summary>
        /// Gets or Sets CommercialStatus
        /// </summary>
        [DataMember(Name="commercialStatus", EmitDefaultValue=true)]
        public string CommercialStatus { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="postalAddress", EmitDefaultValue=true)]
        public string PostalAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerDirectorShipLink {\n");
            sb.Append("  AppointmentDate: ").Append(AppointmentDate).Append("\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  DirectorDesignationDesc: ").Append(DirectorDesignationDesc).Append("\n");
            sb.Append("  DirectorStatus: ").Append(DirectorStatus).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("  RegistrationNo: ").Append(RegistrationNo).Append("\n");
            sb.Append("  SicDesc: ").Append(SicDesc).Append("\n");
            sb.Append("  TelephoneNo: ").Append(TelephoneNo).Append("\n");
            sb.Append("  CommercialStatus: ").Append(CommercialStatus).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerDirectorShipLink);
        }

        /// <summary>
        /// Returns true if XdsConsumerDirectorShipLink instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerDirectorShipLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerDirectorShipLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppointmentDate == input.AppointmentDate ||
                    (this.AppointmentDate != null &&
                    this.AppointmentDate.Equals(input.AppointmentDate))
                ) && 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.DirectorDesignationDesc == input.DirectorDesignationDesc ||
                    (this.DirectorDesignationDesc != null &&
                    this.DirectorDesignationDesc.Equals(input.DirectorDesignationDesc))
                ) && 
                (
                    this.DirectorStatus == input.DirectorStatus ||
                    (this.DirectorStatus != null &&
                    this.DirectorStatus.Equals(input.DirectorStatus))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.PhysicalAddress == input.PhysicalAddress ||
                    (this.PhysicalAddress != null &&
                    this.PhysicalAddress.Equals(input.PhysicalAddress))
                ) && 
                (
                    this.RegistrationNo == input.RegistrationNo ||
                    (this.RegistrationNo != null &&
                    this.RegistrationNo.Equals(input.RegistrationNo))
                ) && 
                (
                    this.SicDesc == input.SicDesc ||
                    (this.SicDesc != null &&
                    this.SicDesc.Equals(input.SicDesc))
                ) && 
                (
                    this.TelephoneNo == input.TelephoneNo ||
                    (this.TelephoneNo != null &&
                    this.TelephoneNo.Equals(input.TelephoneNo))
                ) && 
                (
                    this.CommercialStatus == input.CommercialStatus ||
                    (this.CommercialStatus != null &&
                    this.CommercialStatus.Equals(input.CommercialStatus))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppointmentDate != null)
                    hashCode = hashCode * 59 + this.AppointmentDate.GetHashCode();
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.DirectorDesignationDesc != null)
                    hashCode = hashCode * 59 + this.DirectorDesignationDesc.GetHashCode();
                if (this.DirectorStatus != null)
                    hashCode = hashCode * 59 + this.DirectorStatus.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.PhysicalAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalAddress.GetHashCode();
                if (this.RegistrationNo != null)
                    hashCode = hashCode * 59 + this.RegistrationNo.GetHashCode();
                if (this.SicDesc != null)
                    hashCode = hashCode * 59 + this.SicDesc.GetHashCode();
                if (this.TelephoneNo != null)
                    hashCode = hashCode * 59 + this.TelephoneNo.GetHashCode();
                if (this.CommercialStatus != null)
                    hashCode = hashCode * 59 + this.CommercialStatus.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
