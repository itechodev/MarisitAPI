/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// VerifyResultsMatricVerifyView
    /// </summary>
    [DataContract]
    public partial class VerifyResultsMatricVerifyView :  IEquatable<VerifyResultsMatricVerifyView>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name="province", EmitDefaultValue=false)]
        public VerifyResultsProvincesEnum? Province { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyResultsMatricVerifyView" /> class.
        /// </summary>
        /// <param name="reference">reference.</param>
        /// <param name="nameSurname">nameSurname.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="requested">requested.</param>
        /// <param name="completed">completed.</param>
        /// <param name="entries">entries.</param>
        /// <param name="certificateNumber">certificateNumber.</param>
        /// <param name="province">province.</param>
        /// <param name="yearCompleted">yearCompleted.</param>
        /// <param name="town">town.</param>
        /// <param name="school">school.</param>
        public VerifyResultsMatricVerifyView(string reference = default(string), string nameSurname = default(string), string idNumber = default(string), DateTime requested = default(DateTime), DateTime? completed = default(DateTime?), List<VerifyResultsMatricEntry> entries = default(List<VerifyResultsMatricEntry>), string certificateNumber = default(string), VerifyResultsProvincesEnum? province = default(VerifyResultsProvincesEnum?), string yearCompleted = default(string), string town = default(string), string school = default(string))
        {
            this.Reference = reference;
            this.NameSurname = nameSurname;
            this.IdNumber = idNumber;
            this.Completed = completed;
            this.Entries = entries;
            this.CertificateNumber = certificateNumber;
            this.YearCompleted = yearCompleted;
            this.Town = town;
            this.School = school;
            this.Reference = reference;
            this.NameSurname = nameSurname;
            this.IdNumber = idNumber;
            this.Requested = requested;
            this.Completed = completed;
            this.Entries = entries;
            this.CertificateNumber = certificateNumber;
            this.Province = province;
            this.YearCompleted = yearCompleted;
            this.Town = town;
            this.School = school;
        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets NameSurname
        /// </summary>
        [DataMember(Name="nameSurname", EmitDefaultValue=true)]
        public string NameSurname { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets Requested
        /// </summary>
        [DataMember(Name="requested", EmitDefaultValue=false)]
        public DateTime Requested { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="completed", EmitDefaultValue=true)]
        public DateTime? Completed { get; set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=true)]
        public List<VerifyResultsMatricEntry> Entries { get; set; }

        /// <summary>
        /// Gets or Sets CertificateNumber
        /// </summary>
        [DataMember(Name="certificateNumber", EmitDefaultValue=true)]
        public string CertificateNumber { get; set; }


        /// <summary>
        /// Gets or Sets YearCompleted
        /// </summary>
        [DataMember(Name="yearCompleted", EmitDefaultValue=true)]
        public string YearCompleted { get; set; }

        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name="town", EmitDefaultValue=true)]
        public string Town { get; set; }

        /// <summary>
        /// Gets or Sets School
        /// </summary>
        [DataMember(Name="school", EmitDefaultValue=true)]
        public string School { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyResultsMatricVerifyView {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  NameSurname: ").Append(NameSurname).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  Requested: ").Append(Requested).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  YearCompleted: ").Append(YearCompleted).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  School: ").Append(School).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyResultsMatricVerifyView);
        }

        /// <summary>
        /// Returns true if VerifyResultsMatricVerifyView instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyResultsMatricVerifyView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyResultsMatricVerifyView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.NameSurname == input.NameSurname ||
                    (this.NameSurname != null &&
                    this.NameSurname.Equals(input.NameSurname))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.Requested == input.Requested ||
                    (this.Requested != null &&
                    this.Requested.Equals(input.Requested))
                ) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.CertificateNumber == input.CertificateNumber ||
                    (this.CertificateNumber != null &&
                    this.CertificateNumber.Equals(input.CertificateNumber))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.YearCompleted == input.YearCompleted ||
                    (this.YearCompleted != null &&
                    this.YearCompleted.Equals(input.YearCompleted))
                ) && 
                (
                    this.Town == input.Town ||
                    (this.Town != null &&
                    this.Town.Equals(input.Town))
                ) && 
                (
                    this.School == input.School ||
                    (this.School != null &&
                    this.School.Equals(input.School))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.NameSurname != null)
                    hashCode = hashCode * 59 + this.NameSurname.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.Requested != null)
                    hashCode = hashCode * 59 + this.Requested.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                if (this.CertificateNumber != null)
                    hashCode = hashCode * 59 + this.CertificateNumber.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.YearCompleted != null)
                    hashCode = hashCode * 59 + this.YearCompleted.GetHashCode();
                if (this.Town != null)
                    hashCode = hashCode * 59 + this.Town.GetHashCode();
                if (this.School != null)
                    hashCode = hashCode * 59 + this.School.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
