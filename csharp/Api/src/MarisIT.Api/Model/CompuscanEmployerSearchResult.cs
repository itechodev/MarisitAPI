/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanEmployerSearchResult
    /// </summary>
    [DataContract]
    public partial class CompuscanEmployerSearchResult :  IEquatable<CompuscanEmployerSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanEmployerSearchResult" /> class.
        /// </summary>
        /// <param name="employers">employers.</param>
        /// <param name="fraudResults">fraudResults.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="numberOfEmployers">numberOfEmployers.</param>
        public CompuscanEmployerSearchResult(List<CompuscanEmployer> employers = default(List<CompuscanEmployer>), string fraudResults = default(string), string idNumber = default(string), string numberOfEmployers = default(string))
        {
            this.Employers = employers;
            this.FraudResults = fraudResults;
            this.IdNumber = idNumber;
            this.NumberOfEmployers = numberOfEmployers;
            this.Employers = employers;
            this.FraudResults = fraudResults;
            this.IdNumber = idNumber;
            this.NumberOfEmployers = numberOfEmployers;
        }

        /// <summary>
        /// Gets or Sets Employers
        /// </summary>
        [DataMember(Name="employers", EmitDefaultValue=true)]
        public List<CompuscanEmployer> Employers { get; set; }

        /// <summary>
        /// Gets or Sets FraudResults
        /// </summary>
        [DataMember(Name="fraudResults", EmitDefaultValue=true)]
        public string FraudResults { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfEmployers
        /// </summary>
        [DataMember(Name="numberOfEmployers", EmitDefaultValue=true)]
        public string NumberOfEmployers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanEmployerSearchResult {\n");
            sb.Append("  Employers: ").Append(Employers).Append("\n");
            sb.Append("  FraudResults: ").Append(FraudResults).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  NumberOfEmployers: ").Append(NumberOfEmployers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanEmployerSearchResult);
        }

        /// <summary>
        /// Returns true if CompuscanEmployerSearchResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanEmployerSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanEmployerSearchResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Employers == input.Employers ||
                    this.Employers != null &&
                    input.Employers != null &&
                    this.Employers.SequenceEqual(input.Employers)
                ) && 
                (
                    this.FraudResults == input.FraudResults ||
                    (this.FraudResults != null &&
                    this.FraudResults.Equals(input.FraudResults))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.NumberOfEmployers == input.NumberOfEmployers ||
                    (this.NumberOfEmployers != null &&
                    this.NumberOfEmployers.Equals(input.NumberOfEmployers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Employers != null)
                    hashCode = hashCode * 59 + this.Employers.GetHashCode();
                if (this.FraudResults != null)
                    hashCode = hashCode * 59 + this.FraudResults.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.NumberOfEmployers != null)
                    hashCode = hashCode * 59 + this.NumberOfEmployers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
