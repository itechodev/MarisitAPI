/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsResultFile
    /// </summary>
    [DataContract]
    public partial class XdsResultFile :  IEquatable<XdsResultFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsResultFile" /> class.
        /// </summary>
        /// <param name="accountopen">accountopen.</param>
        /// <param name="accountacceptscredits">accountacceptscredits.</param>
        /// <param name="accountacceptsdebits">accountacceptsdebits.</param>
        /// <param name="accountdormant">accountdormant.</param>
        /// <param name="accountfound">accountfound.</param>
        /// <param name="accountissuer">accountissuer.</param>
        /// <param name="accountnumber">accountnumber.</param>
        /// <param name="accountopenforatleastthreemonths">accountopenforatleastthreemonths.</param>
        /// <param name="accounttypereturn">accounttypereturn.</param>
        /// <param name="idnumber">idnumber.</param>
        /// <param name="idnumbermatch">idnumbermatch.</param>
        /// <param name="surname">surname.</param>
        /// <param name="surnamematch">surnamematch.</param>
        /// <param name="taxreferencematch">taxreferencematch.</param>
        /// <param name="taxreferencenumber">taxreferencenumber.</param>
        /// <param name="recordindicator">recordindicator.</param>
        /// <param name="sequencenumber">sequencenumber.</param>
        /// <param name="branchnumber">branchnumber.</param>
        /// <param name="accounttype">accounttype.</param>
        /// <param name="idtype">idtype.</param>
        /// <param name="initials">initials.</param>
        /// <param name="emailaddress">emailaddress.</param>
        /// <param name="contactnumber">contactnumber.</param>
        /// <param name="clientuserreference">clientuserreference.</param>
        /// <param name="subbillingid">subbillingid.</param>
        /// <param name="errorconditionnumber">errorconditionnumber.</param>
        /// <param name="initialsmatch">initialsmatch.</param>
        /// <param name="account">account.</param>
        /// <param name="emailmatch">emailmatch.</param>
        /// <param name="phonematch">phonematch.</param>
        public XdsResultFile(string accountopen = default(string), string accountacceptscredits = default(string), string accountacceptsdebits = default(string), string accountdormant = default(string), string accountfound = default(string), string accountissuer = default(string), string accountnumber = default(string), string accountopenforatleastthreemonths = default(string), string accounttypereturn = default(string), string idnumber = default(string), string idnumbermatch = default(string), string surname = default(string), string surnamematch = default(string), string taxreferencematch = default(string), string taxreferencenumber = default(string), string recordindicator = default(string), string sequencenumber = default(string), string branchnumber = default(string), string accounttype = default(string), string idtype = default(string), string initials = default(string), string emailaddress = default(string), string contactnumber = default(string), string clientuserreference = default(string), string subbillingid = default(string), string errorconditionnumber = default(string), string initialsmatch = default(string), string account = default(string), string emailmatch = default(string), string phonematch = default(string))
        {
            this.Accountopen = accountopen;
            this.Accountacceptscredits = accountacceptscredits;
            this.Accountacceptsdebits = accountacceptsdebits;
            this.Accountdormant = accountdormant;
            this.Accountfound = accountfound;
            this.Accountissuer = accountissuer;
            this.Accountnumber = accountnumber;
            this.Accountopenforatleastthreemonths = accountopenforatleastthreemonths;
            this.Accounttypereturn = accounttypereturn;
            this.Idnumber = idnumber;
            this.Idnumbermatch = idnumbermatch;
            this.Surname = surname;
            this.Surnamematch = surnamematch;
            this.Taxreferencematch = taxreferencematch;
            this.Taxreferencenumber = taxreferencenumber;
            this.Recordindicator = recordindicator;
            this.Sequencenumber = sequencenumber;
            this.Branchnumber = branchnumber;
            this.Accounttype = accounttype;
            this.Idtype = idtype;
            this.Initials = initials;
            this.Emailaddress = emailaddress;
            this.Contactnumber = contactnumber;
            this.Clientuserreference = clientuserreference;
            this.Subbillingid = subbillingid;
            this.Errorconditionnumber = errorconditionnumber;
            this.Initialsmatch = initialsmatch;
            this.Account = account;
            this.Emailmatch = emailmatch;
            this.Phonematch = phonematch;
            this.Accountopen = accountopen;
            this.Accountacceptscredits = accountacceptscredits;
            this.Accountacceptsdebits = accountacceptsdebits;
            this.Accountdormant = accountdormant;
            this.Accountfound = accountfound;
            this.Accountissuer = accountissuer;
            this.Accountnumber = accountnumber;
            this.Accountopenforatleastthreemonths = accountopenforatleastthreemonths;
            this.Accounttypereturn = accounttypereturn;
            this.Idnumber = idnumber;
            this.Idnumbermatch = idnumbermatch;
            this.Surname = surname;
            this.Surnamematch = surnamematch;
            this.Taxreferencematch = taxreferencematch;
            this.Taxreferencenumber = taxreferencenumber;
            this.Recordindicator = recordindicator;
            this.Sequencenumber = sequencenumber;
            this.Branchnumber = branchnumber;
            this.Accounttype = accounttype;
            this.Idtype = idtype;
            this.Initials = initials;
            this.Emailaddress = emailaddress;
            this.Contactnumber = contactnumber;
            this.Clientuserreference = clientuserreference;
            this.Subbillingid = subbillingid;
            this.Errorconditionnumber = errorconditionnumber;
            this.Initialsmatch = initialsmatch;
            this.Account = account;
            this.Emailmatch = emailmatch;
            this.Phonematch = phonematch;
        }

        /// <summary>
        /// Gets or Sets Accountopen
        /// </summary>
        [DataMember(Name="accountopen", EmitDefaultValue=true)]
        public string Accountopen { get; set; }

        /// <summary>
        /// Gets or Sets Accountacceptscredits
        /// </summary>
        [DataMember(Name="accountacceptscredits", EmitDefaultValue=true)]
        public string Accountacceptscredits { get; set; }

        /// <summary>
        /// Gets or Sets Accountacceptsdebits
        /// </summary>
        [DataMember(Name="accountacceptsdebits", EmitDefaultValue=true)]
        public string Accountacceptsdebits { get; set; }

        /// <summary>
        /// Gets or Sets Accountdormant
        /// </summary>
        [DataMember(Name="accountdormant", EmitDefaultValue=true)]
        public string Accountdormant { get; set; }

        /// <summary>
        /// Gets or Sets Accountfound
        /// </summary>
        [DataMember(Name="accountfound", EmitDefaultValue=true)]
        public string Accountfound { get; set; }

        /// <summary>
        /// Gets or Sets Accountissuer
        /// </summary>
        [DataMember(Name="accountissuer", EmitDefaultValue=true)]
        public string Accountissuer { get; set; }

        /// <summary>
        /// Gets or Sets Accountnumber
        /// </summary>
        [DataMember(Name="accountnumber", EmitDefaultValue=true)]
        public string Accountnumber { get; set; }

        /// <summary>
        /// Gets or Sets Accountopenforatleastthreemonths
        /// </summary>
        [DataMember(Name="accountopenforatleastthreemonths", EmitDefaultValue=true)]
        public string Accountopenforatleastthreemonths { get; set; }

        /// <summary>
        /// Gets or Sets Accounttypereturn
        /// </summary>
        [DataMember(Name="accounttypereturn", EmitDefaultValue=true)]
        public string Accounttypereturn { get; set; }

        /// <summary>
        /// Gets or Sets Idnumber
        /// </summary>
        [DataMember(Name="idnumber", EmitDefaultValue=true)]
        public string Idnumber { get; set; }

        /// <summary>
        /// Gets or Sets Idnumbermatch
        /// </summary>
        [DataMember(Name="idnumbermatch", EmitDefaultValue=true)]
        public string Idnumbermatch { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Surnamematch
        /// </summary>
        [DataMember(Name="surnamematch", EmitDefaultValue=true)]
        public string Surnamematch { get; set; }

        /// <summary>
        /// Gets or Sets Taxreferencematch
        /// </summary>
        [DataMember(Name="taxreferencematch", EmitDefaultValue=true)]
        public string Taxreferencematch { get; set; }

        /// <summary>
        /// Gets or Sets Taxreferencenumber
        /// </summary>
        [DataMember(Name="taxreferencenumber", EmitDefaultValue=true)]
        public string Taxreferencenumber { get; set; }

        /// <summary>
        /// Gets or Sets Recordindicator
        /// </summary>
        [DataMember(Name="recordindicator", EmitDefaultValue=true)]
        public string Recordindicator { get; set; }

        /// <summary>
        /// Gets or Sets Sequencenumber
        /// </summary>
        [DataMember(Name="sequencenumber", EmitDefaultValue=true)]
        public string Sequencenumber { get; set; }

        /// <summary>
        /// Gets or Sets Branchnumber
        /// </summary>
        [DataMember(Name="branchnumber", EmitDefaultValue=true)]
        public string Branchnumber { get; set; }

        /// <summary>
        /// Gets or Sets Accounttype
        /// </summary>
        [DataMember(Name="accounttype", EmitDefaultValue=true)]
        public string Accounttype { get; set; }

        /// <summary>
        /// Gets or Sets Idtype
        /// </summary>
        [DataMember(Name="idtype", EmitDefaultValue=true)]
        public string Idtype { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials", EmitDefaultValue=true)]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets Emailaddress
        /// </summary>
        [DataMember(Name="emailaddress", EmitDefaultValue=true)]
        public string Emailaddress { get; set; }

        /// <summary>
        /// Gets or Sets Contactnumber
        /// </summary>
        [DataMember(Name="contactnumber", EmitDefaultValue=true)]
        public string Contactnumber { get; set; }

        /// <summary>
        /// Gets or Sets Clientuserreference
        /// </summary>
        [DataMember(Name="clientuserreference", EmitDefaultValue=true)]
        public string Clientuserreference { get; set; }

        /// <summary>
        /// Gets or Sets Subbillingid
        /// </summary>
        [DataMember(Name="subbillingid", EmitDefaultValue=true)]
        public string Subbillingid { get; set; }

        /// <summary>
        /// Gets or Sets Errorconditionnumber
        /// </summary>
        [DataMember(Name="errorconditionnumber", EmitDefaultValue=true)]
        public string Errorconditionnumber { get; set; }

        /// <summary>
        /// Gets or Sets Initialsmatch
        /// </summary>
        [DataMember(Name="initialsmatch", EmitDefaultValue=true)]
        public string Initialsmatch { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets Emailmatch
        /// </summary>
        [DataMember(Name="emailmatch", EmitDefaultValue=true)]
        public string Emailmatch { get; set; }

        /// <summary>
        /// Gets or Sets Phonematch
        /// </summary>
        [DataMember(Name="phonematch", EmitDefaultValue=true)]
        public string Phonematch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsResultFile {\n");
            sb.Append("  Accountopen: ").Append(Accountopen).Append("\n");
            sb.Append("  Accountacceptscredits: ").Append(Accountacceptscredits).Append("\n");
            sb.Append("  Accountacceptsdebits: ").Append(Accountacceptsdebits).Append("\n");
            sb.Append("  Accountdormant: ").Append(Accountdormant).Append("\n");
            sb.Append("  Accountfound: ").Append(Accountfound).Append("\n");
            sb.Append("  Accountissuer: ").Append(Accountissuer).Append("\n");
            sb.Append("  Accountnumber: ").Append(Accountnumber).Append("\n");
            sb.Append("  Accountopenforatleastthreemonths: ").Append(Accountopenforatleastthreemonths).Append("\n");
            sb.Append("  Accounttypereturn: ").Append(Accounttypereturn).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Idnumbermatch: ").Append(Idnumbermatch).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Surnamematch: ").Append(Surnamematch).Append("\n");
            sb.Append("  Taxreferencematch: ").Append(Taxreferencematch).Append("\n");
            sb.Append("  Taxreferencenumber: ").Append(Taxreferencenumber).Append("\n");
            sb.Append("  Recordindicator: ").Append(Recordindicator).Append("\n");
            sb.Append("  Sequencenumber: ").Append(Sequencenumber).Append("\n");
            sb.Append("  Branchnumber: ").Append(Branchnumber).Append("\n");
            sb.Append("  Accounttype: ").Append(Accounttype).Append("\n");
            sb.Append("  Idtype: ").Append(Idtype).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  Emailaddress: ").Append(Emailaddress).Append("\n");
            sb.Append("  Contactnumber: ").Append(Contactnumber).Append("\n");
            sb.Append("  Clientuserreference: ").Append(Clientuserreference).Append("\n");
            sb.Append("  Subbillingid: ").Append(Subbillingid).Append("\n");
            sb.Append("  Errorconditionnumber: ").Append(Errorconditionnumber).Append("\n");
            sb.Append("  Initialsmatch: ").Append(Initialsmatch).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Emailmatch: ").Append(Emailmatch).Append("\n");
            sb.Append("  Phonematch: ").Append(Phonematch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsResultFile);
        }

        /// <summary>
        /// Returns true if XdsResultFile instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsResultFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsResultFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accountopen == input.Accountopen ||
                    (this.Accountopen != null &&
                    this.Accountopen.Equals(input.Accountopen))
                ) && 
                (
                    this.Accountacceptscredits == input.Accountacceptscredits ||
                    (this.Accountacceptscredits != null &&
                    this.Accountacceptscredits.Equals(input.Accountacceptscredits))
                ) && 
                (
                    this.Accountacceptsdebits == input.Accountacceptsdebits ||
                    (this.Accountacceptsdebits != null &&
                    this.Accountacceptsdebits.Equals(input.Accountacceptsdebits))
                ) && 
                (
                    this.Accountdormant == input.Accountdormant ||
                    (this.Accountdormant != null &&
                    this.Accountdormant.Equals(input.Accountdormant))
                ) && 
                (
                    this.Accountfound == input.Accountfound ||
                    (this.Accountfound != null &&
                    this.Accountfound.Equals(input.Accountfound))
                ) && 
                (
                    this.Accountissuer == input.Accountissuer ||
                    (this.Accountissuer != null &&
                    this.Accountissuer.Equals(input.Accountissuer))
                ) && 
                (
                    this.Accountnumber == input.Accountnumber ||
                    (this.Accountnumber != null &&
                    this.Accountnumber.Equals(input.Accountnumber))
                ) && 
                (
                    this.Accountopenforatleastthreemonths == input.Accountopenforatleastthreemonths ||
                    (this.Accountopenforatleastthreemonths != null &&
                    this.Accountopenforatleastthreemonths.Equals(input.Accountopenforatleastthreemonths))
                ) && 
                (
                    this.Accounttypereturn == input.Accounttypereturn ||
                    (this.Accounttypereturn != null &&
                    this.Accounttypereturn.Equals(input.Accounttypereturn))
                ) && 
                (
                    this.Idnumber == input.Idnumber ||
                    (this.Idnumber != null &&
                    this.Idnumber.Equals(input.Idnumber))
                ) && 
                (
                    this.Idnumbermatch == input.Idnumbermatch ||
                    (this.Idnumbermatch != null &&
                    this.Idnumbermatch.Equals(input.Idnumbermatch))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Surnamematch == input.Surnamematch ||
                    (this.Surnamematch != null &&
                    this.Surnamematch.Equals(input.Surnamematch))
                ) && 
                (
                    this.Taxreferencematch == input.Taxreferencematch ||
                    (this.Taxreferencematch != null &&
                    this.Taxreferencematch.Equals(input.Taxreferencematch))
                ) && 
                (
                    this.Taxreferencenumber == input.Taxreferencenumber ||
                    (this.Taxreferencenumber != null &&
                    this.Taxreferencenumber.Equals(input.Taxreferencenumber))
                ) && 
                (
                    this.Recordindicator == input.Recordindicator ||
                    (this.Recordindicator != null &&
                    this.Recordindicator.Equals(input.Recordindicator))
                ) && 
                (
                    this.Sequencenumber == input.Sequencenumber ||
                    (this.Sequencenumber != null &&
                    this.Sequencenumber.Equals(input.Sequencenumber))
                ) && 
                (
                    this.Branchnumber == input.Branchnumber ||
                    (this.Branchnumber != null &&
                    this.Branchnumber.Equals(input.Branchnumber))
                ) && 
                (
                    this.Accounttype == input.Accounttype ||
                    (this.Accounttype != null &&
                    this.Accounttype.Equals(input.Accounttype))
                ) && 
                (
                    this.Idtype == input.Idtype ||
                    (this.Idtype != null &&
                    this.Idtype.Equals(input.Idtype))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.Emailaddress == input.Emailaddress ||
                    (this.Emailaddress != null &&
                    this.Emailaddress.Equals(input.Emailaddress))
                ) && 
                (
                    this.Contactnumber == input.Contactnumber ||
                    (this.Contactnumber != null &&
                    this.Contactnumber.Equals(input.Contactnumber))
                ) && 
                (
                    this.Clientuserreference == input.Clientuserreference ||
                    (this.Clientuserreference != null &&
                    this.Clientuserreference.Equals(input.Clientuserreference))
                ) && 
                (
                    this.Subbillingid == input.Subbillingid ||
                    (this.Subbillingid != null &&
                    this.Subbillingid.Equals(input.Subbillingid))
                ) && 
                (
                    this.Errorconditionnumber == input.Errorconditionnumber ||
                    (this.Errorconditionnumber != null &&
                    this.Errorconditionnumber.Equals(input.Errorconditionnumber))
                ) && 
                (
                    this.Initialsmatch == input.Initialsmatch ||
                    (this.Initialsmatch != null &&
                    this.Initialsmatch.Equals(input.Initialsmatch))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Emailmatch == input.Emailmatch ||
                    (this.Emailmatch != null &&
                    this.Emailmatch.Equals(input.Emailmatch))
                ) && 
                (
                    this.Phonematch == input.Phonematch ||
                    (this.Phonematch != null &&
                    this.Phonematch.Equals(input.Phonematch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accountopen != null)
                    hashCode = hashCode * 59 + this.Accountopen.GetHashCode();
                if (this.Accountacceptscredits != null)
                    hashCode = hashCode * 59 + this.Accountacceptscredits.GetHashCode();
                if (this.Accountacceptsdebits != null)
                    hashCode = hashCode * 59 + this.Accountacceptsdebits.GetHashCode();
                if (this.Accountdormant != null)
                    hashCode = hashCode * 59 + this.Accountdormant.GetHashCode();
                if (this.Accountfound != null)
                    hashCode = hashCode * 59 + this.Accountfound.GetHashCode();
                if (this.Accountissuer != null)
                    hashCode = hashCode * 59 + this.Accountissuer.GetHashCode();
                if (this.Accountnumber != null)
                    hashCode = hashCode * 59 + this.Accountnumber.GetHashCode();
                if (this.Accountopenforatleastthreemonths != null)
                    hashCode = hashCode * 59 + this.Accountopenforatleastthreemonths.GetHashCode();
                if (this.Accounttypereturn != null)
                    hashCode = hashCode * 59 + this.Accounttypereturn.GetHashCode();
                if (this.Idnumber != null)
                    hashCode = hashCode * 59 + this.Idnumber.GetHashCode();
                if (this.Idnumbermatch != null)
                    hashCode = hashCode * 59 + this.Idnumbermatch.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Surnamematch != null)
                    hashCode = hashCode * 59 + this.Surnamematch.GetHashCode();
                if (this.Taxreferencematch != null)
                    hashCode = hashCode * 59 + this.Taxreferencematch.GetHashCode();
                if (this.Taxreferencenumber != null)
                    hashCode = hashCode * 59 + this.Taxreferencenumber.GetHashCode();
                if (this.Recordindicator != null)
                    hashCode = hashCode * 59 + this.Recordindicator.GetHashCode();
                if (this.Sequencenumber != null)
                    hashCode = hashCode * 59 + this.Sequencenumber.GetHashCode();
                if (this.Branchnumber != null)
                    hashCode = hashCode * 59 + this.Branchnumber.GetHashCode();
                if (this.Accounttype != null)
                    hashCode = hashCode * 59 + this.Accounttype.GetHashCode();
                if (this.Idtype != null)
                    hashCode = hashCode * 59 + this.Idtype.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.Emailaddress != null)
                    hashCode = hashCode * 59 + this.Emailaddress.GetHashCode();
                if (this.Contactnumber != null)
                    hashCode = hashCode * 59 + this.Contactnumber.GetHashCode();
                if (this.Clientuserreference != null)
                    hashCode = hashCode * 59 + this.Clientuserreference.GetHashCode();
                if (this.Subbillingid != null)
                    hashCode = hashCode * 59 + this.Subbillingid.GetHashCode();
                if (this.Errorconditionnumber != null)
                    hashCode = hashCode * 59 + this.Errorconditionnumber.GetHashCode();
                if (this.Initialsmatch != null)
                    hashCode = hashCode * 59 + this.Initialsmatch.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Emailmatch != null)
                    hashCode = hashCode * 59 + this.Emailmatch.GetHashCode();
                if (this.Phonematch != null)
                    hashCode = hashCode * 59 + this.Phonematch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
