/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialOtherOperation
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialOtherOperation :  IEquatable<TransunionCommercialOtherOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialOtherOperation" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="branchNumber">branchNumber.</param>
        /// <param name="branchLocation">branchLocation.</param>
        /// <param name="agentNumber">agentNumber.</param>
        /// <param name="agentLocation">agentLocation.</param>
        /// <param name="agencyName">agencyName.</param>
        /// <param name="agencyProduct">agencyProduct.</param>
        /// <param name="agencyCountry">agencyCountry.</param>
        public TransunionCommercialOtherOperation(string majorProduct = default(string), List<string> branchNumber = default(List<string>), List<string> branchLocation = default(List<string>), List<string> agentNumber = default(List<string>), List<string> agentLocation = default(List<string>), List<string> agencyName = default(List<string>), List<string> agencyProduct = default(List<string>), List<string> agencyCountry = default(List<string>))
        {
            this.MajorProduct = majorProduct;
            this.BranchNumber = branchNumber;
            this.BranchLocation = branchLocation;
            this.AgentNumber = agentNumber;
            this.AgentLocation = agentLocation;
            this.AgencyName = agencyName;
            this.AgencyProduct = agencyProduct;
            this.AgencyCountry = agencyCountry;
            this.MajorProduct = majorProduct;
            this.BranchNumber = branchNumber;
            this.BranchLocation = branchLocation;
            this.AgentNumber = agentNumber;
            this.AgentLocation = agentLocation;
            this.AgencyName = agencyName;
            this.AgencyProduct = agencyProduct;
            this.AgencyCountry = agencyCountry;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets BranchNumber
        /// </summary>
        [DataMember(Name="branchNumber", EmitDefaultValue=true)]
        public List<string> BranchNumber { get; set; }

        /// <summary>
        /// Gets or Sets BranchLocation
        /// </summary>
        [DataMember(Name="branchLocation", EmitDefaultValue=true)]
        public List<string> BranchLocation { get; set; }

        /// <summary>
        /// Gets or Sets AgentNumber
        /// </summary>
        [DataMember(Name="agentNumber", EmitDefaultValue=true)]
        public List<string> AgentNumber { get; set; }

        /// <summary>
        /// Gets or Sets AgentLocation
        /// </summary>
        [DataMember(Name="agentLocation", EmitDefaultValue=true)]
        public List<string> AgentLocation { get; set; }

        /// <summary>
        /// Gets or Sets AgencyName
        /// </summary>
        [DataMember(Name="agencyName", EmitDefaultValue=true)]
        public List<string> AgencyName { get; set; }

        /// <summary>
        /// Gets or Sets AgencyProduct
        /// </summary>
        [DataMember(Name="agencyProduct", EmitDefaultValue=true)]
        public List<string> AgencyProduct { get; set; }

        /// <summary>
        /// Gets or Sets AgencyCountry
        /// </summary>
        [DataMember(Name="agencyCountry", EmitDefaultValue=true)]
        public List<string> AgencyCountry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialOtherOperation {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  BranchNumber: ").Append(BranchNumber).Append("\n");
            sb.Append("  BranchLocation: ").Append(BranchLocation).Append("\n");
            sb.Append("  AgentNumber: ").Append(AgentNumber).Append("\n");
            sb.Append("  AgentLocation: ").Append(AgentLocation).Append("\n");
            sb.Append("  AgencyName: ").Append(AgencyName).Append("\n");
            sb.Append("  AgencyProduct: ").Append(AgencyProduct).Append("\n");
            sb.Append("  AgencyCountry: ").Append(AgencyCountry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialOtherOperation);
        }

        /// <summary>
        /// Returns true if TransunionCommercialOtherOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialOtherOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialOtherOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.BranchNumber == input.BranchNumber ||
                    this.BranchNumber != null &&
                    input.BranchNumber != null &&
                    this.BranchNumber.SequenceEqual(input.BranchNumber)
                ) && 
                (
                    this.BranchLocation == input.BranchLocation ||
                    this.BranchLocation != null &&
                    input.BranchLocation != null &&
                    this.BranchLocation.SequenceEqual(input.BranchLocation)
                ) && 
                (
                    this.AgentNumber == input.AgentNumber ||
                    this.AgentNumber != null &&
                    input.AgentNumber != null &&
                    this.AgentNumber.SequenceEqual(input.AgentNumber)
                ) && 
                (
                    this.AgentLocation == input.AgentLocation ||
                    this.AgentLocation != null &&
                    input.AgentLocation != null &&
                    this.AgentLocation.SequenceEqual(input.AgentLocation)
                ) && 
                (
                    this.AgencyName == input.AgencyName ||
                    this.AgencyName != null &&
                    input.AgencyName != null &&
                    this.AgencyName.SequenceEqual(input.AgencyName)
                ) && 
                (
                    this.AgencyProduct == input.AgencyProduct ||
                    this.AgencyProduct != null &&
                    input.AgencyProduct != null &&
                    this.AgencyProduct.SequenceEqual(input.AgencyProduct)
                ) && 
                (
                    this.AgencyCountry == input.AgencyCountry ||
                    this.AgencyCountry != null &&
                    input.AgencyCountry != null &&
                    this.AgencyCountry.SequenceEqual(input.AgencyCountry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.BranchNumber != null)
                    hashCode = hashCode * 59 + this.BranchNumber.GetHashCode();
                if (this.BranchLocation != null)
                    hashCode = hashCode * 59 + this.BranchLocation.GetHashCode();
                if (this.AgentNumber != null)
                    hashCode = hashCode * 59 + this.AgentNumber.GetHashCode();
                if (this.AgentLocation != null)
                    hashCode = hashCode * 59 + this.AgentLocation.GetHashCode();
                if (this.AgencyName != null)
                    hashCode = hashCode * 59 + this.AgencyName.GetHashCode();
                if (this.AgencyProduct != null)
                    hashCode = hashCode * 59 + this.AgencyProduct.GetHashCode();
                if (this.AgencyCountry != null)
                    hashCode = hashCode * 59 + this.AgencyCountry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
