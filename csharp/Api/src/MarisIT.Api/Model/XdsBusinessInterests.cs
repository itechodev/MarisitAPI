/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsBusinessInterests
    /// </summary>
    [DataContract]
    public partial class XdsBusinessInterests :  IEquatable<XdsBusinessInterests>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsBusinessInterests" /> class.
        /// </summary>
        /// <param name="ageOfBusiness">ageOfBusiness.</param>
        /// <param name="commercialName">commercialName.</param>
        /// <param name="commercialStatus">commercialStatus.</param>
        /// <param name="defaultCount">defaultCount.</param>
        /// <param name="directorID">directorID.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="judgmentStatus">judgmentStatus.</param>
        /// <param name="judgmentsCount">judgmentsCount.</param>
        /// <param name="liquidation">liquidation.</param>
        /// <param name="registrationNo">registrationNo.</param>
        public XdsBusinessInterests(string ageOfBusiness = default(string), string commercialName = default(string), string commercialStatus = default(string), string defaultCount = default(string), string directorID = default(string), string displayText = default(string), string judgmentStatus = default(string), string judgmentsCount = default(string), string liquidation = default(string), string registrationNo = default(string))
        {
            this.AgeOfBusiness = ageOfBusiness;
            this.CommercialName = commercialName;
            this.CommercialStatus = commercialStatus;
            this.DefaultCount = defaultCount;
            this.DirectorID = directorID;
            this.DisplayText = displayText;
            this.JudgmentStatus = judgmentStatus;
            this.JudgmentsCount = judgmentsCount;
            this.Liquidation = liquidation;
            this.RegistrationNo = registrationNo;
            this.AgeOfBusiness = ageOfBusiness;
            this.CommercialName = commercialName;
            this.CommercialStatus = commercialStatus;
            this.DefaultCount = defaultCount;
            this.DirectorID = directorID;
            this.DisplayText = displayText;
            this.JudgmentStatus = judgmentStatus;
            this.JudgmentsCount = judgmentsCount;
            this.Liquidation = liquidation;
            this.RegistrationNo = registrationNo;
        }

        /// <summary>
        /// Gets or Sets AgeOfBusiness
        /// </summary>
        [DataMember(Name="ageOfBusiness", EmitDefaultValue=true)]
        public string AgeOfBusiness { get; set; }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="commercialName", EmitDefaultValue=true)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets CommercialStatus
        /// </summary>
        [DataMember(Name="commercialStatus", EmitDefaultValue=true)]
        public string CommercialStatus { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCount
        /// </summary>
        [DataMember(Name="defaultCount", EmitDefaultValue=true)]
        public string DefaultCount { get; set; }

        /// <summary>
        /// Gets or Sets DirectorID
        /// </summary>
        [DataMember(Name="directorID", EmitDefaultValue=true)]
        public string DirectorID { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets JudgmentStatus
        /// </summary>
        [DataMember(Name="judgmentStatus", EmitDefaultValue=true)]
        public string JudgmentStatus { get; set; }

        /// <summary>
        /// Gets or Sets JudgmentsCount
        /// </summary>
        [DataMember(Name="judgmentsCount", EmitDefaultValue=true)]
        public string JudgmentsCount { get; set; }

        /// <summary>
        /// Gets or Sets Liquidation
        /// </summary>
        [DataMember(Name="liquidation", EmitDefaultValue=true)]
        public string Liquidation { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNo
        /// </summary>
        [DataMember(Name="registrationNo", EmitDefaultValue=true)]
        public string RegistrationNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsBusinessInterests {\n");
            sb.Append("  AgeOfBusiness: ").Append(AgeOfBusiness).Append("\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  CommercialStatus: ").Append(CommercialStatus).Append("\n");
            sb.Append("  DefaultCount: ").Append(DefaultCount).Append("\n");
            sb.Append("  DirectorID: ").Append(DirectorID).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  JudgmentStatus: ").Append(JudgmentStatus).Append("\n");
            sb.Append("  JudgmentsCount: ").Append(JudgmentsCount).Append("\n");
            sb.Append("  Liquidation: ").Append(Liquidation).Append("\n");
            sb.Append("  RegistrationNo: ").Append(RegistrationNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsBusinessInterests);
        }

        /// <summary>
        /// Returns true if XdsBusinessInterests instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsBusinessInterests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsBusinessInterests input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgeOfBusiness == input.AgeOfBusiness ||
                    (this.AgeOfBusiness != null &&
                    this.AgeOfBusiness.Equals(input.AgeOfBusiness))
                ) && 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.CommercialStatus == input.CommercialStatus ||
                    (this.CommercialStatus != null &&
                    this.CommercialStatus.Equals(input.CommercialStatus))
                ) && 
                (
                    this.DefaultCount == input.DefaultCount ||
                    (this.DefaultCount != null &&
                    this.DefaultCount.Equals(input.DefaultCount))
                ) && 
                (
                    this.DirectorID == input.DirectorID ||
                    (this.DirectorID != null &&
                    this.DirectorID.Equals(input.DirectorID))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.JudgmentStatus == input.JudgmentStatus ||
                    (this.JudgmentStatus != null &&
                    this.JudgmentStatus.Equals(input.JudgmentStatus))
                ) && 
                (
                    this.JudgmentsCount == input.JudgmentsCount ||
                    (this.JudgmentsCount != null &&
                    this.JudgmentsCount.Equals(input.JudgmentsCount))
                ) && 
                (
                    this.Liquidation == input.Liquidation ||
                    (this.Liquidation != null &&
                    this.Liquidation.Equals(input.Liquidation))
                ) && 
                (
                    this.RegistrationNo == input.RegistrationNo ||
                    (this.RegistrationNo != null &&
                    this.RegistrationNo.Equals(input.RegistrationNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgeOfBusiness != null)
                    hashCode = hashCode * 59 + this.AgeOfBusiness.GetHashCode();
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.CommercialStatus != null)
                    hashCode = hashCode * 59 + this.CommercialStatus.GetHashCode();
                if (this.DefaultCount != null)
                    hashCode = hashCode * 59 + this.DefaultCount.GetHashCode();
                if (this.DirectorID != null)
                    hashCode = hashCode * 59 + this.DirectorID.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.JudgmentStatus != null)
                    hashCode = hashCode * 59 + this.JudgmentStatus.GetHashCode();
                if (this.JudgmentsCount != null)
                    hashCode = hashCode * 59 + this.JudgmentsCount.GetHashCode();
                if (this.Liquidation != null)
                    hashCode = hashCode * 59 + this.Liquidation.GetHashCode();
                if (this.RegistrationNo != null)
                    hashCode = hashCode * 59 + this.RegistrationNo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
