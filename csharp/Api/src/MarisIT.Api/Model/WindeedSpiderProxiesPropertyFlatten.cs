/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedSpiderProxiesPropertyFlatten
    /// </summary>
    [DataContract]
    public partial class WindeedSpiderProxiesPropertyFlatten :  IEquatable<WindeedSpiderProxiesPropertyFlatten>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedSpiderProxiesPropertyFlatten" /> class.
        /// </summary>
        /// <param name="agriculturalHolding">agriculturalHolding.</param>
        /// <param name="erf">erf.</param>
        /// <param name="exclusiveUseArea">exclusiveUseArea.</param>
        /// <param name="unit">unit.</param>
        /// <param name="farm">farm.</param>
        public WindeedSpiderProxiesPropertyFlatten(WindeedSpiderAgriculturalHolding agriculturalHolding = default(WindeedSpiderAgriculturalHolding), WindeedSpiderErf erf = default(WindeedSpiderErf), WindeedSpiderExclusiveUseArea exclusiveUseArea = default(WindeedSpiderExclusiveUseArea), WindeedSpiderUnit unit = default(WindeedSpiderUnit), WindeedSpiderFarm farm = default(WindeedSpiderFarm))
        {
            this.AgriculturalHolding = agriculturalHolding;
            this.Erf = erf;
            this.ExclusiveUseArea = exclusiveUseArea;
            this.Unit = unit;
            this.Farm = farm;
        }

        /// <summary>
        /// Gets or Sets AgriculturalHolding
        /// </summary>
        [DataMember(Name="agriculturalHolding", EmitDefaultValue=false)]
        public WindeedSpiderAgriculturalHolding AgriculturalHolding { get; set; }

        /// <summary>
        /// Gets or Sets Erf
        /// </summary>
        [DataMember(Name="erf", EmitDefaultValue=false)]
        public WindeedSpiderErf Erf { get; set; }

        /// <summary>
        /// Gets or Sets ExclusiveUseArea
        /// </summary>
        [DataMember(Name="exclusiveUseArea", EmitDefaultValue=false)]
        public WindeedSpiderExclusiveUseArea ExclusiveUseArea { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public WindeedSpiderUnit Unit { get; set; }

        /// <summary>
        /// Gets or Sets Farm
        /// </summary>
        [DataMember(Name="farm", EmitDefaultValue=false)]
        public WindeedSpiderFarm Farm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedSpiderProxiesPropertyFlatten {\n");
            sb.Append("  AgriculturalHolding: ").Append(AgriculturalHolding).Append("\n");
            sb.Append("  Erf: ").Append(Erf).Append("\n");
            sb.Append("  ExclusiveUseArea: ").Append(ExclusiveUseArea).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Farm: ").Append(Farm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedSpiderProxiesPropertyFlatten);
        }

        /// <summary>
        /// Returns true if WindeedSpiderProxiesPropertyFlatten instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedSpiderProxiesPropertyFlatten to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedSpiderProxiesPropertyFlatten input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgriculturalHolding == input.AgriculturalHolding ||
                    (this.AgriculturalHolding != null &&
                    this.AgriculturalHolding.Equals(input.AgriculturalHolding))
                ) && 
                (
                    this.Erf == input.Erf ||
                    (this.Erf != null &&
                    this.Erf.Equals(input.Erf))
                ) && 
                (
                    this.ExclusiveUseArea == input.ExclusiveUseArea ||
                    (this.ExclusiveUseArea != null &&
                    this.ExclusiveUseArea.Equals(input.ExclusiveUseArea))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Farm == input.Farm ||
                    (this.Farm != null &&
                    this.Farm.Equals(input.Farm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgriculturalHolding != null)
                    hashCode = hashCode * 59 + this.AgriculturalHolding.GetHashCode();
                if (this.Erf != null)
                    hashCode = hashCode * 59 + this.Erf.GetHashCode();
                if (this.ExclusiveUseArea != null)
                    hashCode = hashCode * 59 + this.ExclusiveUseArea.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Farm != null)
                    hashCode = hashCode * 59 + this.Farm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
