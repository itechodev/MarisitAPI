/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprGeneralInformation
    /// </summary>
    [DataContract]
    public partial class WindeedWprGeneralInformation :  IEquatable<WindeedWprGeneralInformation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets WallType
        /// </summary>
        [DataMember(Name="wallType", EmitDefaultValue=false)]
        public WindeedWprWallType? WallType { get; set; }
        /// <summary>
        /// Gets or Sets RoofType
        /// </summary>
        [DataMember(Name="roofType", EmitDefaultValue=false)]
        public WindeedWprRoofType? RoofType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprGeneralInformation" /> class.
        /// </summary>
        /// <param name="doorNumber">doorNumber.</param>
        /// <param name="floorSize">floorSize.</param>
        /// <param name="floors">floors.</param>
        /// <param name="constructionYear">constructionYear.</param>
        /// <param name="wallType">wallType.</param>
        /// <param name="roofType">roofType.</param>
        public WindeedWprGeneralInformation(string doorNumber = default(string), int? floorSize = default(int?), int? floors = default(int?), int? constructionYear = default(int?), WindeedWprWallType? wallType = default(WindeedWprWallType?), WindeedWprRoofType? roofType = default(WindeedWprRoofType?))
        {
            this.DoorNumber = doorNumber;
            this.FloorSize = floorSize;
            this.Floors = floors;
            this.ConstructionYear = constructionYear;
            this.DoorNumber = doorNumber;
            this.FloorSize = floorSize;
            this.Floors = floors;
            this.ConstructionYear = constructionYear;
            this.WallType = wallType;
            this.RoofType = roofType;
        }

        /// <summary>
        /// Gets or Sets DoorNumber
        /// </summary>
        [DataMember(Name="doorNumber", EmitDefaultValue=true)]
        public string DoorNumber { get; set; }

        /// <summary>
        /// Gets or Sets FloorSize
        /// </summary>
        [DataMember(Name="floorSize", EmitDefaultValue=true)]
        public int? FloorSize { get; set; }

        /// <summary>
        /// Gets or Sets Floors
        /// </summary>
        [DataMember(Name="floors", EmitDefaultValue=true)]
        public int? Floors { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionYear
        /// </summary>
        [DataMember(Name="constructionYear", EmitDefaultValue=true)]
        public int? ConstructionYear { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprGeneralInformation {\n");
            sb.Append("  DoorNumber: ").Append(DoorNumber).Append("\n");
            sb.Append("  FloorSize: ").Append(FloorSize).Append("\n");
            sb.Append("  Floors: ").Append(Floors).Append("\n");
            sb.Append("  ConstructionYear: ").Append(ConstructionYear).Append("\n");
            sb.Append("  WallType: ").Append(WallType).Append("\n");
            sb.Append("  RoofType: ").Append(RoofType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprGeneralInformation);
        }

        /// <summary>
        /// Returns true if WindeedWprGeneralInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprGeneralInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprGeneralInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DoorNumber == input.DoorNumber ||
                    (this.DoorNumber != null &&
                    this.DoorNumber.Equals(input.DoorNumber))
                ) && 
                (
                    this.FloorSize == input.FloorSize ||
                    (this.FloorSize != null &&
                    this.FloorSize.Equals(input.FloorSize))
                ) && 
                (
                    this.Floors == input.Floors ||
                    (this.Floors != null &&
                    this.Floors.Equals(input.Floors))
                ) && 
                (
                    this.ConstructionYear == input.ConstructionYear ||
                    (this.ConstructionYear != null &&
                    this.ConstructionYear.Equals(input.ConstructionYear))
                ) && 
                (
                    this.WallType == input.WallType ||
                    (this.WallType != null &&
                    this.WallType.Equals(input.WallType))
                ) && 
                (
                    this.RoofType == input.RoofType ||
                    (this.RoofType != null &&
                    this.RoofType.Equals(input.RoofType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DoorNumber != null)
                    hashCode = hashCode * 59 + this.DoorNumber.GetHashCode();
                if (this.FloorSize != null)
                    hashCode = hashCode * 59 + this.FloorSize.GetHashCode();
                if (this.Floors != null)
                    hashCode = hashCode * 59 + this.Floors.GetHashCode();
                if (this.ConstructionYear != null)
                    hashCode = hashCode * 59 + this.ConstructionYear.GetHashCode();
                if (this.WallType != null)
                    hashCode = hashCode * 59 + this.WallType.GetHashCode();
                if (this.RoofType != null)
                    hashCode = hashCode * 59 + this.RoofType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
