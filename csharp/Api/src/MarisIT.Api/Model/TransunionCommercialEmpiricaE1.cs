/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialEmpiricaE1
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialEmpiricaE1 :  IEquatable<TransunionCommercialEmpiricaE1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialEmpiricaE1" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="surname">surname.</param>
        /// <param name="forename1">forename1.</param>
        /// <param name="forename2">forename2.</param>
        /// <param name="forename3">forename3.</param>
        /// <param name="identityNo">identityNo.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="empiricaScore">empiricaScore.</param>
        /// <param name="exclusionCode">exclusionCode.</param>
        /// <param name="exclusionCodeDescription">exclusionCodeDescription.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="reasonDescription">reasonDescription.</param>
        /// <param name="expansionCode">expansionCode.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public TransunionCommercialEmpiricaE1(string majorProduct = default(string), string surname = default(string), string forename1 = default(string), string forename2 = default(string), string forename3 = default(string), string identityNo = default(string), string dateOfBirth = default(string), string consumerNo = default(string), string empiricaScore = default(string), string exclusionCode = default(string), string exclusionCodeDescription = default(string), List<string> reasonCode = default(List<string>), List<string> reasonDescription = default(List<string>), string expansionCode = default(string), string errorMessage = default(string))
        {
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdentityNo = identityNo;
            this.DateOfBirth = dateOfBirth;
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
            this.ExpansionCode = expansionCode;
            this.ErrorMessage = errorMessage;
            this.MajorProduct = majorProduct;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.Forename3 = forename3;
            this.IdentityNo = identityNo;
            this.DateOfBirth = dateOfBirth;
            this.ConsumerNo = consumerNo;
            this.EmpiricaScore = empiricaScore;
            this.ExclusionCode = exclusionCode;
            this.ExclusionCodeDescription = exclusionCodeDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
            this.ExpansionCode = expansionCode;
            this.ErrorMessage = errorMessage;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Forename1
        /// </summary>
        [DataMember(Name="forename1", EmitDefaultValue=true)]
        public string Forename1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename2
        /// </summary>
        [DataMember(Name="forename2", EmitDefaultValue=true)]
        public string Forename2 { get; set; }

        /// <summary>
        /// Gets or Sets Forename3
        /// </summary>
        [DataMember(Name="forename3", EmitDefaultValue=true)]
        public string Forename3 { get; set; }

        /// <summary>
        /// Gets or Sets IdentityNo
        /// </summary>
        [DataMember(Name="identityNo", EmitDefaultValue=true)]
        public string IdentityNo { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets EmpiricaScore
        /// </summary>
        [DataMember(Name="empiricaScore", EmitDefaultValue=true)]
        public string EmpiricaScore { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCode
        /// </summary>
        [DataMember(Name="exclusionCode", EmitDefaultValue=true)]
        public string ExclusionCode { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionCodeDescription
        /// </summary>
        [DataMember(Name="exclusionCodeDescription", EmitDefaultValue=true)]
        public string ExclusionCodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="reasonCode", EmitDefaultValue=true)]
        public List<string> ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonDescription
        /// </summary>
        [DataMember(Name="reasonDescription", EmitDefaultValue=true)]
        public List<string> ReasonDescription { get; set; }

        /// <summary>
        /// Gets or Sets ExpansionCode
        /// </summary>
        [DataMember(Name="expansionCode", EmitDefaultValue=true)]
        public string ExpansionCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialEmpiricaE1 {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Forename1: ").Append(Forename1).Append("\n");
            sb.Append("  Forename2: ").Append(Forename2).Append("\n");
            sb.Append("  Forename3: ").Append(Forename3).Append("\n");
            sb.Append("  IdentityNo: ").Append(IdentityNo).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  EmpiricaScore: ").Append(EmpiricaScore).Append("\n");
            sb.Append("  ExclusionCode: ").Append(ExclusionCode).Append("\n");
            sb.Append("  ExclusionCodeDescription: ").Append(ExclusionCodeDescription).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonDescription: ").Append(ReasonDescription).Append("\n");
            sb.Append("  ExpansionCode: ").Append(ExpansionCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialEmpiricaE1);
        }

        /// <summary>
        /// Returns true if TransunionCommercialEmpiricaE1 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialEmpiricaE1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialEmpiricaE1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Forename1 == input.Forename1 ||
                    (this.Forename1 != null &&
                    this.Forename1.Equals(input.Forename1))
                ) && 
                (
                    this.Forename2 == input.Forename2 ||
                    (this.Forename2 != null &&
                    this.Forename2.Equals(input.Forename2))
                ) && 
                (
                    this.Forename3 == input.Forename3 ||
                    (this.Forename3 != null &&
                    this.Forename3.Equals(input.Forename3))
                ) && 
                (
                    this.IdentityNo == input.IdentityNo ||
                    (this.IdentityNo != null &&
                    this.IdentityNo.Equals(input.IdentityNo))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.EmpiricaScore == input.EmpiricaScore ||
                    (this.EmpiricaScore != null &&
                    this.EmpiricaScore.Equals(input.EmpiricaScore))
                ) && 
                (
                    this.ExclusionCode == input.ExclusionCode ||
                    (this.ExclusionCode != null &&
                    this.ExclusionCode.Equals(input.ExclusionCode))
                ) && 
                (
                    this.ExclusionCodeDescription == input.ExclusionCodeDescription ||
                    (this.ExclusionCodeDescription != null &&
                    this.ExclusionCodeDescription.Equals(input.ExclusionCodeDescription))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    this.ReasonCode != null &&
                    input.ReasonCode != null &&
                    this.ReasonCode.SequenceEqual(input.ReasonCode)
                ) && 
                (
                    this.ReasonDescription == input.ReasonDescription ||
                    this.ReasonDescription != null &&
                    input.ReasonDescription != null &&
                    this.ReasonDescription.SequenceEqual(input.ReasonDescription)
                ) && 
                (
                    this.ExpansionCode == input.ExpansionCode ||
                    (this.ExpansionCode != null &&
                    this.ExpansionCode.Equals(input.ExpansionCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Forename1 != null)
                    hashCode = hashCode * 59 + this.Forename1.GetHashCode();
                if (this.Forename2 != null)
                    hashCode = hashCode * 59 + this.Forename2.GetHashCode();
                if (this.Forename3 != null)
                    hashCode = hashCode * 59 + this.Forename3.GetHashCode();
                if (this.IdentityNo != null)
                    hashCode = hashCode * 59 + this.IdentityNo.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.EmpiricaScore != null)
                    hashCode = hashCode * 59 + this.EmpiricaScore.GetHashCode();
                if (this.ExclusionCode != null)
                    hashCode = hashCode * 59 + this.ExclusionCode.GetHashCode();
                if (this.ExclusionCodeDescription != null)
                    hashCode = hashCode * 59 + this.ExclusionCodeDescription.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.ReasonDescription != null)
                    hashCode = hashCode * 59 + this.ReasonDescription.GetHashCode();
                if (this.ExpansionCode != null)
                    hashCode = hashCode * 59 + this.ExpansionCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
