/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcJuristicDirectorReportResponse
    /// </summary>
    [DataContract]
    public partial class WindeedCipcJuristicDirectorReportResponse :  IEquatable<WindeedCipcJuristicDirectorReportResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcJuristicDirectorReportResponse" /> class.
        /// </summary>
        /// <param name="dbKey">dbKey.</param>
        /// <param name="country">country.</param>
        /// <param name="southAfricanResident">southAfricanResident.</param>
        /// <param name="associatedCompanies">associatedCompanies.</param>
        /// <param name="nationality">nationality.</param>
        /// <param name="name">name.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        public WindeedCipcJuristicDirectorReportResponse(int dbKey = default(int), WindeedCipcCipcLookup country = default(WindeedCipcCipcLookup), bool? southAfricanResident = default(bool?), List<WindeedCipcAssociatedCompany> associatedCompanies = default(List<WindeedCipcAssociatedCompany>), WindeedCipcCipcLookup nationality = default(WindeedCipcCipcLookup), string name = default(string), WindeedCipcRegistrationNumber registrationNumber = default(WindeedCipcRegistrationNumber))
        {
            this.SouthAfricanResident = southAfricanResident;
            this.AssociatedCompanies = associatedCompanies;
            this.Name = name;
            this.DbKey = dbKey;
            this.Country = country;
            this.SouthAfricanResident = southAfricanResident;
            this.AssociatedCompanies = associatedCompanies;
            this.Nationality = nationality;
            this.Name = name;
            this.RegistrationNumber = registrationNumber;
        }

        /// <summary>
        /// Gets or Sets DbKey
        /// </summary>
        [DataMember(Name="dbKey", EmitDefaultValue=false)]
        public int DbKey { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Country { get; set; }

        /// <summary>
        /// Gets or Sets SouthAfricanResident
        /// </summary>
        [DataMember(Name="southAfricanResident", EmitDefaultValue=true)]
        public bool? SouthAfricanResident { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedCompanies
        /// </summary>
        [DataMember(Name="associatedCompanies", EmitDefaultValue=true)]
        public List<WindeedCipcAssociatedCompany> AssociatedCompanies { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Nationality { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=false)]
        public WindeedCipcRegistrationNumber RegistrationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcJuristicDirectorReportResponse {\n");
            sb.Append("  DbKey: ").Append(DbKey).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  SouthAfricanResident: ").Append(SouthAfricanResident).Append("\n");
            sb.Append("  AssociatedCompanies: ").Append(AssociatedCompanies).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcJuristicDirectorReportResponse);
        }

        /// <summary>
        /// Returns true if WindeedCipcJuristicDirectorReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcJuristicDirectorReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcJuristicDirectorReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DbKey == input.DbKey ||
                    (this.DbKey != null &&
                    this.DbKey.Equals(input.DbKey))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.SouthAfricanResident == input.SouthAfricanResident ||
                    (this.SouthAfricanResident != null &&
                    this.SouthAfricanResident.Equals(input.SouthAfricanResident))
                ) && 
                (
                    this.AssociatedCompanies == input.AssociatedCompanies ||
                    this.AssociatedCompanies != null &&
                    input.AssociatedCompanies != null &&
                    this.AssociatedCompanies.SequenceEqual(input.AssociatedCompanies)
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DbKey != null)
                    hashCode = hashCode * 59 + this.DbKey.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.SouthAfricanResident != null)
                    hashCode = hashCode * 59 + this.SouthAfricanResident.GetHashCode();
                if (this.AssociatedCompanies != null)
                    hashCode = hashCode * 59 + this.AssociatedCompanies.GetHashCode();
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
