/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanEmployer
    /// </summary>
    [DataContract]
    public partial class CompuscanEmployer :  IEquatable<CompuscanEmployer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanEmployer" /> class.
        /// </summary>
        /// <param name="confidenceIndex">confidenceIndex.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateRefreshed">dateRefreshed.</param>
        /// <param name="employerName">employerName.</param>
        /// <param name="occupation">occupation.</param>
        /// <param name="totalNumberOfAccounts">totalNumberOfAccounts.</param>
        public CompuscanEmployer(string confidenceIndex = default(string), string dateCreated = default(string), string dateRefreshed = default(string), string employerName = default(string), string occupation = default(string), string totalNumberOfAccounts = default(string))
        {
            this.ConfidenceIndex = confidenceIndex;
            this.DateCreated = dateCreated;
            this.DateRefreshed = dateRefreshed;
            this.EmployerName = employerName;
            this.Occupation = occupation;
            this.TotalNumberOfAccounts = totalNumberOfAccounts;
            this.ConfidenceIndex = confidenceIndex;
            this.DateCreated = dateCreated;
            this.DateRefreshed = dateRefreshed;
            this.EmployerName = employerName;
            this.Occupation = occupation;
            this.TotalNumberOfAccounts = totalNumberOfAccounts;
        }

        /// <summary>
        /// Gets or Sets ConfidenceIndex
        /// </summary>
        [DataMember(Name="confidenceIndex", EmitDefaultValue=true)]
        public string ConfidenceIndex { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="dateCreated", EmitDefaultValue=true)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateRefreshed
        /// </summary>
        [DataMember(Name="dateRefreshed", EmitDefaultValue=true)]
        public string DateRefreshed { get; set; }

        /// <summary>
        /// Gets or Sets EmployerName
        /// </summary>
        [DataMember(Name="employerName", EmitDefaultValue=true)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Gets or Sets Occupation
        /// </summary>
        [DataMember(Name="occupation", EmitDefaultValue=true)]
        public string Occupation { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfAccounts
        /// </summary>
        [DataMember(Name="totalNumberOfAccounts", EmitDefaultValue=true)]
        public string TotalNumberOfAccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanEmployer {\n");
            sb.Append("  ConfidenceIndex: ").Append(ConfidenceIndex).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateRefreshed: ").Append(DateRefreshed).Append("\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  Occupation: ").Append(Occupation).Append("\n");
            sb.Append("  TotalNumberOfAccounts: ").Append(TotalNumberOfAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanEmployer);
        }

        /// <summary>
        /// Returns true if CompuscanEmployer instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanEmployer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanEmployer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfidenceIndex == input.ConfidenceIndex ||
                    (this.ConfidenceIndex != null &&
                    this.ConfidenceIndex.Equals(input.ConfidenceIndex))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateRefreshed == input.DateRefreshed ||
                    (this.DateRefreshed != null &&
                    this.DateRefreshed.Equals(input.DateRefreshed))
                ) && 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.Occupation == input.Occupation ||
                    (this.Occupation != null &&
                    this.Occupation.Equals(input.Occupation))
                ) && 
                (
                    this.TotalNumberOfAccounts == input.TotalNumberOfAccounts ||
                    (this.TotalNumberOfAccounts != null &&
                    this.TotalNumberOfAccounts.Equals(input.TotalNumberOfAccounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfidenceIndex != null)
                    hashCode = hashCode * 59 + this.ConfidenceIndex.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateRefreshed != null)
                    hashCode = hashCode * 59 + this.DateRefreshed.GetHashCode();
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.Occupation != null)
                    hashCode = hashCode * 59 + this.Occupation.GetHashCode();
                if (this.TotalNumberOfAccounts != null)
                    hashCode = hashCode * 59 + this.TotalNumberOfAccounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
