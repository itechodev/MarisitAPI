/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsMarketPrices
    /// </summary>
    [DataContract]
    public partial class XdsMarketPrices :  IEquatable<XdsMarketPrices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsMarketPrices" /> class.
        /// </summary>
        /// <param name="priceNew">priceNew.</param>
        /// <param name="priceTrade">priceTrade.</param>
        /// <param name="priceRetail">priceRetail.</param>
        /// <param name="priceMarket">priceMarket.</param>
        /// <param name="priceHigh">priceHigh.</param>
        /// <param name="priceLow">priceLow.</param>
        /// <param name="marketStats">marketStats.</param>
        public XdsMarketPrices(string priceNew = default(string), string priceTrade = default(string), string priceRetail = default(string), string priceMarket = default(string), string priceHigh = default(string), string priceLow = default(string), XdsMarketStats marketStats = default(XdsMarketStats))
        {
            this.PriceNew = priceNew;
            this.PriceTrade = priceTrade;
            this.PriceRetail = priceRetail;
            this.PriceMarket = priceMarket;
            this.PriceHigh = priceHigh;
            this.PriceLow = priceLow;
            this.PriceNew = priceNew;
            this.PriceTrade = priceTrade;
            this.PriceRetail = priceRetail;
            this.PriceMarket = priceMarket;
            this.PriceHigh = priceHigh;
            this.PriceLow = priceLow;
            this.MarketStats = marketStats;
        }

        /// <summary>
        /// Gets or Sets PriceNew
        /// </summary>
        [DataMember(Name="priceNew", EmitDefaultValue=true)]
        public string PriceNew { get; set; }

        /// <summary>
        /// Gets or Sets PriceTrade
        /// </summary>
        [DataMember(Name="priceTrade", EmitDefaultValue=true)]
        public string PriceTrade { get; set; }

        /// <summary>
        /// Gets or Sets PriceRetail
        /// </summary>
        [DataMember(Name="priceRetail", EmitDefaultValue=true)]
        public string PriceRetail { get; set; }

        /// <summary>
        /// Gets or Sets PriceMarket
        /// </summary>
        [DataMember(Name="priceMarket", EmitDefaultValue=true)]
        public string PriceMarket { get; set; }

        /// <summary>
        /// Gets or Sets PriceHigh
        /// </summary>
        [DataMember(Name="priceHigh", EmitDefaultValue=true)]
        public string PriceHigh { get; set; }

        /// <summary>
        /// Gets or Sets PriceLow
        /// </summary>
        [DataMember(Name="priceLow", EmitDefaultValue=true)]
        public string PriceLow { get; set; }

        /// <summary>
        /// Gets or Sets MarketStats
        /// </summary>
        [DataMember(Name="marketStats", EmitDefaultValue=false)]
        public XdsMarketStats MarketStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsMarketPrices {\n");
            sb.Append("  PriceNew: ").Append(PriceNew).Append("\n");
            sb.Append("  PriceTrade: ").Append(PriceTrade).Append("\n");
            sb.Append("  PriceRetail: ").Append(PriceRetail).Append("\n");
            sb.Append("  PriceMarket: ").Append(PriceMarket).Append("\n");
            sb.Append("  PriceHigh: ").Append(PriceHigh).Append("\n");
            sb.Append("  PriceLow: ").Append(PriceLow).Append("\n");
            sb.Append("  MarketStats: ").Append(MarketStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsMarketPrices);
        }

        /// <summary>
        /// Returns true if XdsMarketPrices instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsMarketPrices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsMarketPrices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceNew == input.PriceNew ||
                    (this.PriceNew != null &&
                    this.PriceNew.Equals(input.PriceNew))
                ) && 
                (
                    this.PriceTrade == input.PriceTrade ||
                    (this.PriceTrade != null &&
                    this.PriceTrade.Equals(input.PriceTrade))
                ) && 
                (
                    this.PriceRetail == input.PriceRetail ||
                    (this.PriceRetail != null &&
                    this.PriceRetail.Equals(input.PriceRetail))
                ) && 
                (
                    this.PriceMarket == input.PriceMarket ||
                    (this.PriceMarket != null &&
                    this.PriceMarket.Equals(input.PriceMarket))
                ) && 
                (
                    this.PriceHigh == input.PriceHigh ||
                    (this.PriceHigh != null &&
                    this.PriceHigh.Equals(input.PriceHigh))
                ) && 
                (
                    this.PriceLow == input.PriceLow ||
                    (this.PriceLow != null &&
                    this.PriceLow.Equals(input.PriceLow))
                ) && 
                (
                    this.MarketStats == input.MarketStats ||
                    (this.MarketStats != null &&
                    this.MarketStats.Equals(input.MarketStats))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceNew != null)
                    hashCode = hashCode * 59 + this.PriceNew.GetHashCode();
                if (this.PriceTrade != null)
                    hashCode = hashCode * 59 + this.PriceTrade.GetHashCode();
                if (this.PriceRetail != null)
                    hashCode = hashCode * 59 + this.PriceRetail.GetHashCode();
                if (this.PriceMarket != null)
                    hashCode = hashCode * 59 + this.PriceMarket.GetHashCode();
                if (this.PriceHigh != null)
                    hashCode = hashCode * 59 + this.PriceHigh.GetHashCode();
                if (this.PriceLow != null)
                    hashCode = hashCode * 59 + this.PriceLow.GetHashCode();
                if (this.MarketStats != null)
                    hashCode = hashCode * 59 + this.MarketStats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
