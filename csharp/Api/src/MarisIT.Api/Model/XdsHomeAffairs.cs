/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsHomeAffairs
    /// </summary>
    [DataContract]
    public partial class XdsHomeAffairs :  IEquatable<XdsHomeAffairs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsHomeAffairs" /> class.
        /// </summary>
        /// <param name="bioMetricVerificationResult">bioMetricVerificationResult.</param>
        /// <param name="consumerDetail">consumerDetail.</param>
        /// <param name="consumerIdentityVerification">consumerIdentityVerification.</param>
        /// <param name="realTimeIDV">realTimeIDV.</param>
        /// <param name="reportInformation">reportInformation.</param>
        /// <param name="subscriberInputDetails">subscriberInputDetails.</param>
        /// <param name="consumerEnquiryHistory">consumerEnquiryHistory.</param>
        /// <param name="hanis1BioMetricVerificationResult">hanis1BioMetricVerificationResult.</param>
        /// <param name="realTimeMaritalCheck">realTimeMaritalCheck.</param>
        public XdsHomeAffairs(XdsBioMetricVerificationResult bioMetricVerificationResult = default(XdsBioMetricVerificationResult), XdsConsumerDetail consumerDetail = default(XdsConsumerDetail), XdsConsumerIdentityVerification consumerIdentityVerification = default(XdsConsumerIdentityVerification), XdsRealTimeIDV realTimeIDV = default(XdsRealTimeIDV), XdsReportInformation reportInformation = default(XdsReportInformation), XdsSubscriberInputDetails subscriberInputDetails = default(XdsSubscriberInputDetails), List<XdsConsumerEnquiryHistory> consumerEnquiryHistory = default(List<XdsConsumerEnquiryHistory>), XdsHanis1BioMetricVerificationResult hanis1BioMetricVerificationResult = default(XdsHanis1BioMetricVerificationResult), XdsRealTimeMaritalCheck realTimeMaritalCheck = default(XdsRealTimeMaritalCheck))
        {
            this.ConsumerEnquiryHistory = consumerEnquiryHistory;
            this.BioMetricVerificationResult = bioMetricVerificationResult;
            this.ConsumerDetail = consumerDetail;
            this.ConsumerIdentityVerification = consumerIdentityVerification;
            this.RealTimeIDV = realTimeIDV;
            this.ReportInformation = reportInformation;
            this.SubscriberInputDetails = subscriberInputDetails;
            this.ConsumerEnquiryHistory = consumerEnquiryHistory;
            this.Hanis1BioMetricVerificationResult = hanis1BioMetricVerificationResult;
            this.RealTimeMaritalCheck = realTimeMaritalCheck;
        }

        /// <summary>
        /// Gets or Sets BioMetricVerificationResult
        /// </summary>
        [DataMember(Name="bioMetricVerificationResult", EmitDefaultValue=false)]
        public XdsBioMetricVerificationResult BioMetricVerificationResult { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerDetail
        /// </summary>
        [DataMember(Name="consumerDetail", EmitDefaultValue=false)]
        public XdsConsumerDetail ConsumerDetail { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerIdentityVerification
        /// </summary>
        [DataMember(Name="consumerIdentityVerification", EmitDefaultValue=false)]
        public XdsConsumerIdentityVerification ConsumerIdentityVerification { get; set; }

        /// <summary>
        /// Gets or Sets RealTimeIDV
        /// </summary>
        [DataMember(Name="realTimeIDV", EmitDefaultValue=false)]
        public XdsRealTimeIDV RealTimeIDV { get; set; }

        /// <summary>
        /// Gets or Sets ReportInformation
        /// </summary>
        [DataMember(Name="reportInformation", EmitDefaultValue=false)]
        public XdsReportInformation ReportInformation { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberInputDetails
        /// </summary>
        [DataMember(Name="subscriberInputDetails", EmitDefaultValue=false)]
        public XdsSubscriberInputDetails SubscriberInputDetails { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerEnquiryHistory
        /// </summary>
        [DataMember(Name="consumerEnquiryHistory", EmitDefaultValue=true)]
        public List<XdsConsumerEnquiryHistory> ConsumerEnquiryHistory { get; set; }

        /// <summary>
        /// Gets or Sets Hanis1BioMetricVerificationResult
        /// </summary>
        [DataMember(Name="hanis1BioMetricVerificationResult", EmitDefaultValue=false)]
        public XdsHanis1BioMetricVerificationResult Hanis1BioMetricVerificationResult { get; set; }

        /// <summary>
        /// Gets or Sets RealTimeMaritalCheck
        /// </summary>
        [DataMember(Name="realTimeMaritalCheck", EmitDefaultValue=false)]
        public XdsRealTimeMaritalCheck RealTimeMaritalCheck { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsHomeAffairs {\n");
            sb.Append("  BioMetricVerificationResult: ").Append(BioMetricVerificationResult).Append("\n");
            sb.Append("  ConsumerDetail: ").Append(ConsumerDetail).Append("\n");
            sb.Append("  ConsumerIdentityVerification: ").Append(ConsumerIdentityVerification).Append("\n");
            sb.Append("  RealTimeIDV: ").Append(RealTimeIDV).Append("\n");
            sb.Append("  ReportInformation: ").Append(ReportInformation).Append("\n");
            sb.Append("  SubscriberInputDetails: ").Append(SubscriberInputDetails).Append("\n");
            sb.Append("  ConsumerEnquiryHistory: ").Append(ConsumerEnquiryHistory).Append("\n");
            sb.Append("  Hanis1BioMetricVerificationResult: ").Append(Hanis1BioMetricVerificationResult).Append("\n");
            sb.Append("  RealTimeMaritalCheck: ").Append(RealTimeMaritalCheck).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsHomeAffairs);
        }

        /// <summary>
        /// Returns true if XdsHomeAffairs instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsHomeAffairs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsHomeAffairs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BioMetricVerificationResult == input.BioMetricVerificationResult ||
                    (this.BioMetricVerificationResult != null &&
                    this.BioMetricVerificationResult.Equals(input.BioMetricVerificationResult))
                ) && 
                (
                    this.ConsumerDetail == input.ConsumerDetail ||
                    (this.ConsumerDetail != null &&
                    this.ConsumerDetail.Equals(input.ConsumerDetail))
                ) && 
                (
                    this.ConsumerIdentityVerification == input.ConsumerIdentityVerification ||
                    (this.ConsumerIdentityVerification != null &&
                    this.ConsumerIdentityVerification.Equals(input.ConsumerIdentityVerification))
                ) && 
                (
                    this.RealTimeIDV == input.RealTimeIDV ||
                    (this.RealTimeIDV != null &&
                    this.RealTimeIDV.Equals(input.RealTimeIDV))
                ) && 
                (
                    this.ReportInformation == input.ReportInformation ||
                    (this.ReportInformation != null &&
                    this.ReportInformation.Equals(input.ReportInformation))
                ) && 
                (
                    this.SubscriberInputDetails == input.SubscriberInputDetails ||
                    (this.SubscriberInputDetails != null &&
                    this.SubscriberInputDetails.Equals(input.SubscriberInputDetails))
                ) && 
                (
                    this.ConsumerEnquiryHistory == input.ConsumerEnquiryHistory ||
                    this.ConsumerEnquiryHistory != null &&
                    input.ConsumerEnquiryHistory != null &&
                    this.ConsumerEnquiryHistory.SequenceEqual(input.ConsumerEnquiryHistory)
                ) && 
                (
                    this.Hanis1BioMetricVerificationResult == input.Hanis1BioMetricVerificationResult ||
                    (this.Hanis1BioMetricVerificationResult != null &&
                    this.Hanis1BioMetricVerificationResult.Equals(input.Hanis1BioMetricVerificationResult))
                ) && 
                (
                    this.RealTimeMaritalCheck == input.RealTimeMaritalCheck ||
                    (this.RealTimeMaritalCheck != null &&
                    this.RealTimeMaritalCheck.Equals(input.RealTimeMaritalCheck))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BioMetricVerificationResult != null)
                    hashCode = hashCode * 59 + this.BioMetricVerificationResult.GetHashCode();
                if (this.ConsumerDetail != null)
                    hashCode = hashCode * 59 + this.ConsumerDetail.GetHashCode();
                if (this.ConsumerIdentityVerification != null)
                    hashCode = hashCode * 59 + this.ConsumerIdentityVerification.GetHashCode();
                if (this.RealTimeIDV != null)
                    hashCode = hashCode * 59 + this.RealTimeIDV.GetHashCode();
                if (this.ReportInformation != null)
                    hashCode = hashCode * 59 + this.ReportInformation.GetHashCode();
                if (this.SubscriberInputDetails != null)
                    hashCode = hashCode * 59 + this.SubscriberInputDetails.GetHashCode();
                if (this.ConsumerEnquiryHistory != null)
                    hashCode = hashCode * 59 + this.ConsumerEnquiryHistory.GetHashCode();
                if (this.Hanis1BioMetricVerificationResult != null)
                    hashCode = hashCode * 59 + this.Hanis1BioMetricVerificationResult.GetHashCode();
                if (this.RealTimeMaritalCheck != null)
                    hashCode = hashCode * 59 + this.RealTimeMaritalCheck.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
