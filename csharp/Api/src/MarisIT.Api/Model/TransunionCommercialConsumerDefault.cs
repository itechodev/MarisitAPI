/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialConsumerDefault
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialConsumerDefault :  IEquatable<TransunionCommercialConsumerDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialConsumerDefault" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="name">name.</param>
        /// <param name="fnDefault">fnDefault.</param>
        /// <param name="defaultDate">defaultDate.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactPhoneCode">contactPhoneCode.</param>
        /// <param name="contactPhoneNo">contactPhoneNo.</param>
        /// <param name="subscriberName">subscriberName.</param>
        /// <param name="address">address.</param>
        /// <param name="account">account.</param>
        /// <param name="subAccount">subAccount.</param>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="idNo">idNo.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="debtCode">debtCode.</param>
        /// <param name="debtDesc">debtDesc.</param>
        /// <param name="remarks">remarks.</param>
        /// <param name="remarksX">remarksX.</param>
        /// <param name="remarksY">remarksY.</param>
        /// <param name="transType">transType.</param>
        /// <param name="message">message.</param>
        /// <param name="amountF700">amountF700.</param>
        /// <param name="accountF700">accountF700.</param>
        public TransunionCommercialConsumerDefault(string majorProduct = default(string), string consumerNo = default(string), string name = default(string), string fnDefault = default(string), string defaultDate = default(string), string contactName = default(string), string contactPhoneCode = default(string), string contactPhoneNo = default(string), string subscriberName = default(string), string address = default(string), string account = default(string), string subAccount = default(string), string branchCode = default(string), string amount = default(string), string idNo = default(string), string dateOfBirth = default(string), string debtCode = default(string), string debtDesc = default(string), string remarks = default(string), string remarksX = default(string), string remarksY = default(string), string transType = default(string), string message = default(string), string amountF700 = default(string), string accountF700 = default(string))
        {
            this.MajorProduct = majorProduct;
            this.ConsumerNo = consumerNo;
            this.Name = name;
            this.FnDefault = fnDefault;
            this.DefaultDate = defaultDate;
            this.ContactName = contactName;
            this.ContactPhoneCode = contactPhoneCode;
            this.ContactPhoneNo = contactPhoneNo;
            this.SubscriberName = subscriberName;
            this.Address = address;
            this.Account = account;
            this.SubAccount = subAccount;
            this.BranchCode = branchCode;
            this.Amount = amount;
            this.IdNo = idNo;
            this.DateOfBirth = dateOfBirth;
            this.DebtCode = debtCode;
            this.DebtDesc = debtDesc;
            this.Remarks = remarks;
            this.RemarksX = remarksX;
            this.RemarksY = remarksY;
            this.TransType = transType;
            this.Message = message;
            this.AmountF700 = amountF700;
            this.AccountF700 = accountF700;
            this.MajorProduct = majorProduct;
            this.ConsumerNo = consumerNo;
            this.Name = name;
            this.FnDefault = fnDefault;
            this.DefaultDate = defaultDate;
            this.ContactName = contactName;
            this.ContactPhoneCode = contactPhoneCode;
            this.ContactPhoneNo = contactPhoneNo;
            this.SubscriberName = subscriberName;
            this.Address = address;
            this.Account = account;
            this.SubAccount = subAccount;
            this.BranchCode = branchCode;
            this.Amount = amount;
            this.IdNo = idNo;
            this.DateOfBirth = dateOfBirth;
            this.DebtCode = debtCode;
            this.DebtDesc = debtDesc;
            this.Remarks = remarks;
            this.RemarksX = remarksX;
            this.RemarksY = remarksY;
            this.TransType = transType;
            this.Message = message;
            this.AmountF700 = amountF700;
            this.AccountF700 = accountF700;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FnDefault
        /// </summary>
        [DataMember(Name="fnDefault", EmitDefaultValue=true)]
        public string FnDefault { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDate
        /// </summary>
        [DataMember(Name="defaultDate", EmitDefaultValue=true)]
        public string DefaultDate { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhoneCode
        /// </summary>
        [DataMember(Name="contactPhoneCode", EmitDefaultValue=true)]
        public string ContactPhoneCode { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhoneNo
        /// </summary>
        [DataMember(Name="contactPhoneNo", EmitDefaultValue=true)]
        public string ContactPhoneNo { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="subscriberName", EmitDefaultValue=true)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets SubAccount
        /// </summary>
        [DataMember(Name="subAccount", EmitDefaultValue=true)]
        public string SubAccount { get; set; }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name="branchCode", EmitDefaultValue=true)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets IdNo
        /// </summary>
        [DataMember(Name="idNo", EmitDefaultValue=true)]
        public string IdNo { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DebtCode
        /// </summary>
        [DataMember(Name="debtCode", EmitDefaultValue=true)]
        public string DebtCode { get; set; }

        /// <summary>
        /// Gets or Sets DebtDesc
        /// </summary>
        [DataMember(Name="debtDesc", EmitDefaultValue=true)]
        public string DebtDesc { get; set; }

        /// <summary>
        /// Gets or Sets Remarks
        /// </summary>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// Gets or Sets RemarksX
        /// </summary>
        [DataMember(Name="remarksX", EmitDefaultValue=true)]
        public string RemarksX { get; set; }

        /// <summary>
        /// Gets or Sets RemarksY
        /// </summary>
        [DataMember(Name="remarksY", EmitDefaultValue=true)]
        public string RemarksY { get; set; }

        /// <summary>
        /// Gets or Sets TransType
        /// </summary>
        [DataMember(Name="transType", EmitDefaultValue=true)]
        public string TransType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets AmountF700
        /// </summary>
        [DataMember(Name="amountF700", EmitDefaultValue=true)]
        public string AmountF700 { get; set; }

        /// <summary>
        /// Gets or Sets AccountF700
        /// </summary>
        [DataMember(Name="accountF700", EmitDefaultValue=true)]
        public string AccountF700 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialConsumerDefault {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FnDefault: ").Append(FnDefault).Append("\n");
            sb.Append("  DefaultDate: ").Append(DefaultDate).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactPhoneCode: ").Append(ContactPhoneCode).Append("\n");
            sb.Append("  ContactPhoneNo: ").Append(ContactPhoneNo).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  IdNo: ").Append(IdNo).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DebtCode: ").Append(DebtCode).Append("\n");
            sb.Append("  DebtDesc: ").Append(DebtDesc).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  RemarksX: ").Append(RemarksX).Append("\n");
            sb.Append("  RemarksY: ").Append(RemarksY).Append("\n");
            sb.Append("  TransType: ").Append(TransType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  AmountF700: ").Append(AmountF700).Append("\n");
            sb.Append("  AccountF700: ").Append(AccountF700).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialConsumerDefault);
        }

        /// <summary>
        /// Returns true if TransunionCommercialConsumerDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialConsumerDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialConsumerDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.FnDefault == input.FnDefault ||
                    (this.FnDefault != null &&
                    this.FnDefault.Equals(input.FnDefault))
                ) && 
                (
                    this.DefaultDate == input.DefaultDate ||
                    (this.DefaultDate != null &&
                    this.DefaultDate.Equals(input.DefaultDate))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactPhoneCode == input.ContactPhoneCode ||
                    (this.ContactPhoneCode != null &&
                    this.ContactPhoneCode.Equals(input.ContactPhoneCode))
                ) && 
                (
                    this.ContactPhoneNo == input.ContactPhoneNo ||
                    (this.ContactPhoneNo != null &&
                    this.ContactPhoneNo.Equals(input.ContactPhoneNo))
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.IdNo == input.IdNo ||
                    (this.IdNo != null &&
                    this.IdNo.Equals(input.IdNo))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.DebtCode == input.DebtCode ||
                    (this.DebtCode != null &&
                    this.DebtCode.Equals(input.DebtCode))
                ) && 
                (
                    this.DebtDesc == input.DebtDesc ||
                    (this.DebtDesc != null &&
                    this.DebtDesc.Equals(input.DebtDesc))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.RemarksX == input.RemarksX ||
                    (this.RemarksX != null &&
                    this.RemarksX.Equals(input.RemarksX))
                ) && 
                (
                    this.RemarksY == input.RemarksY ||
                    (this.RemarksY != null &&
                    this.RemarksY.Equals(input.RemarksY))
                ) && 
                (
                    this.TransType == input.TransType ||
                    (this.TransType != null &&
                    this.TransType.Equals(input.TransType))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.AmountF700 == input.AmountF700 ||
                    (this.AmountF700 != null &&
                    this.AmountF700.Equals(input.AmountF700))
                ) && 
                (
                    this.AccountF700 == input.AccountF700 ||
                    (this.AccountF700 != null &&
                    this.AccountF700.Equals(input.AccountF700))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FnDefault != null)
                    hashCode = hashCode * 59 + this.FnDefault.GetHashCode();
                if (this.DefaultDate != null)
                    hashCode = hashCode * 59 + this.DefaultDate.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactPhoneCode != null)
                    hashCode = hashCode * 59 + this.ContactPhoneCode.GetHashCode();
                if (this.ContactPhoneNo != null)
                    hashCode = hashCode * 59 + this.ContactPhoneNo.GetHashCode();
                if (this.SubscriberName != null)
                    hashCode = hashCode * 59 + this.SubscriberName.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.IdNo != null)
                    hashCode = hashCode * 59 + this.IdNo.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.DebtCode != null)
                    hashCode = hashCode * 59 + this.DebtCode.GetHashCode();
                if (this.DebtDesc != null)
                    hashCode = hashCode * 59 + this.DebtDesc.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.RemarksX != null)
                    hashCode = hashCode * 59 + this.RemarksX.GetHashCode();
                if (this.RemarksY != null)
                    hashCode = hashCode * 59 + this.RemarksY.GetHashCode();
                if (this.TransType != null)
                    hashCode = hashCode * 59 + this.TransType.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.AmountF700 != null)
                    hashCode = hashCode * 59 + this.AmountF700.GetHashCode();
                if (this.AccountF700 != null)
                    hashCode = hashCode * 59 + this.AccountF700.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
