/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialVehicle
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialVehicle :  IEquatable<TransunionCommercialVehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialVehicle" /> class.
        /// </summary>
        /// <param name="quantity">quantity.</param>
        /// <param name="description">description.</param>
        /// <param name="noLeased">noLeased.</param>
        /// <param name="noOwned">noOwned.</param>
        /// <param name="noHP">noHP.</param>
        /// <param name="infoDate">infoDate.</param>
        public TransunionCommercialVehicle(string quantity = default(string), string description = default(string), string noLeased = default(string), string noOwned = default(string), string noHP = default(string), string infoDate = default(string))
        {
            this.Quantity = quantity;
            this.Description = description;
            this.NoLeased = noLeased;
            this.NoOwned = noOwned;
            this.NoHP = noHP;
            this.InfoDate = infoDate;
            this.Quantity = quantity;
            this.Description = description;
            this.NoLeased = noLeased;
            this.NoOwned = noOwned;
            this.NoHP = noHP;
            this.InfoDate = infoDate;
        }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public string Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NoLeased
        /// </summary>
        [DataMember(Name="noLeased", EmitDefaultValue=true)]
        public string NoLeased { get; set; }

        /// <summary>
        /// Gets or Sets NoOwned
        /// </summary>
        [DataMember(Name="noOwned", EmitDefaultValue=true)]
        public string NoOwned { get; set; }

        /// <summary>
        /// Gets or Sets NoHP
        /// </summary>
        [DataMember(Name="noHP", EmitDefaultValue=true)]
        public string NoHP { get; set; }

        /// <summary>
        /// Gets or Sets InfoDate
        /// </summary>
        [DataMember(Name="infoDate", EmitDefaultValue=true)]
        public string InfoDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialVehicle {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NoLeased: ").Append(NoLeased).Append("\n");
            sb.Append("  NoOwned: ").Append(NoOwned).Append("\n");
            sb.Append("  NoHP: ").Append(NoHP).Append("\n");
            sb.Append("  InfoDate: ").Append(InfoDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialVehicle);
        }

        /// <summary>
        /// Returns true if TransunionCommercialVehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialVehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialVehicle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.NoLeased == input.NoLeased ||
                    (this.NoLeased != null &&
                    this.NoLeased.Equals(input.NoLeased))
                ) && 
                (
                    this.NoOwned == input.NoOwned ||
                    (this.NoOwned != null &&
                    this.NoOwned.Equals(input.NoOwned))
                ) && 
                (
                    this.NoHP == input.NoHP ||
                    (this.NoHP != null &&
                    this.NoHP.Equals(input.NoHP))
                ) && 
                (
                    this.InfoDate == input.InfoDate ||
                    (this.InfoDate != null &&
                    this.InfoDate.Equals(input.InfoDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.NoLeased != null)
                    hashCode = hashCode * 59 + this.NoLeased.GetHashCode();
                if (this.NoOwned != null)
                    hashCode = hashCode * 59 + this.NoOwned.GetHashCode();
                if (this.NoHP != null)
                    hashCode = hashCode * 59 + this.NoHP.GetHashCode();
                if (this.InfoDate != null)
                    hashCode = hashCode * 59 + this.InfoDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
