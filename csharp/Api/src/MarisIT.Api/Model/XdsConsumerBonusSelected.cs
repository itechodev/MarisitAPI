/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerBonusSelected
    /// </summary>
    [DataContract]
    public partial class XdsConsumerBonusSelected :  IEquatable<XdsConsumerBonusSelected>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerBonusSelected" /> class.
        /// </summary>
        /// <param name="dataSegmentDisplayText">dataSegmentDisplayText.</param>
        /// <param name="dataSegmentID">dataSegmentID.</param>
        /// <param name="dataSegmentName">dataSegmentName.</param>
        public XdsConsumerBonusSelected(string dataSegmentDisplayText = default(string), string dataSegmentID = default(string), string dataSegmentName = default(string))
        {
            this.DataSegmentDisplayText = dataSegmentDisplayText;
            this.DataSegmentID = dataSegmentID;
            this.DataSegmentName = dataSegmentName;
            this.DataSegmentDisplayText = dataSegmentDisplayText;
            this.DataSegmentID = dataSegmentID;
            this.DataSegmentName = dataSegmentName;
        }

        /// <summary>
        /// Gets or Sets DataSegmentDisplayText
        /// </summary>
        [DataMember(Name="dataSegmentDisplayText", EmitDefaultValue=true)]
        public string DataSegmentDisplayText { get; set; }

        /// <summary>
        /// Gets or Sets DataSegmentID
        /// </summary>
        [DataMember(Name="dataSegmentID", EmitDefaultValue=true)]
        public string DataSegmentID { get; set; }

        /// <summary>
        /// Gets or Sets DataSegmentName
        /// </summary>
        [DataMember(Name="dataSegmentName", EmitDefaultValue=true)]
        public string DataSegmentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerBonusSelected {\n");
            sb.Append("  DataSegmentDisplayText: ").Append(DataSegmentDisplayText).Append("\n");
            sb.Append("  DataSegmentID: ").Append(DataSegmentID).Append("\n");
            sb.Append("  DataSegmentName: ").Append(DataSegmentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerBonusSelected);
        }

        /// <summary>
        /// Returns true if XdsConsumerBonusSelected instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerBonusSelected to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerBonusSelected input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataSegmentDisplayText == input.DataSegmentDisplayText ||
                    (this.DataSegmentDisplayText != null &&
                    this.DataSegmentDisplayText.Equals(input.DataSegmentDisplayText))
                ) && 
                (
                    this.DataSegmentID == input.DataSegmentID ||
                    (this.DataSegmentID != null &&
                    this.DataSegmentID.Equals(input.DataSegmentID))
                ) && 
                (
                    this.DataSegmentName == input.DataSegmentName ||
                    (this.DataSegmentName != null &&
                    this.DataSegmentName.Equals(input.DataSegmentName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSegmentDisplayText != null)
                    hashCode = hashCode * 59 + this.DataSegmentDisplayText.GetHashCode();
                if (this.DataSegmentID != null)
                    hashCode = hashCode * 59 + this.DataSegmentID.GetHashCode();
                if (this.DataSegmentName != null)
                    hashCode = hashCode * 59 + this.DataSegmentName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
