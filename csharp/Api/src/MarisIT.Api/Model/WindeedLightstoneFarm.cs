/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedLightstoneFarm
    /// </summary>
    [DataContract]
    public partial class WindeedLightstoneFarm :  IEquatable<WindeedLightstoneFarm>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedLightstoneRegistrar? DeedsOffice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedLightstoneFarm" /> class.
        /// </summary>
        /// <param name="lpiCode">lpiCode.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="portionNumber">portionNumber.</param>
        /// <param name="cadastralExtent">cadastralExtent.</param>
        /// <param name="registeredExtent">registeredExtent.</param>
        /// <param name="zoningUsage">zoningUsage.</param>
        /// <param name="registrationDivision">registrationDivision.</param>
        /// <param name="farmName">farmName.</param>
        /// <param name="farmNumber">farmNumber.</param>
        public WindeedLightstoneFarm(string lpiCode = default(string), WindeedLightstoneRegistrar? deedsOffice = default(WindeedLightstoneRegistrar?), double latitude = default(double), double longitude = default(double), int portionNumber = default(int), int? cadastralExtent = default(int?), int registeredExtent = default(int), string zoningUsage = default(string), string registrationDivision = default(string), string farmName = default(string), int farmNumber = default(int))
        {
            this.LpiCode = lpiCode;
            this.CadastralExtent = cadastralExtent;
            this.ZoningUsage = zoningUsage;
            this.RegistrationDivision = registrationDivision;
            this.FarmName = farmName;
            this.LpiCode = lpiCode;
            this.DeedsOffice = deedsOffice;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.PortionNumber = portionNumber;
            this.CadastralExtent = cadastralExtent;
            this.RegisteredExtent = registeredExtent;
            this.ZoningUsage = zoningUsage;
            this.RegistrationDivision = registrationDivision;
            this.FarmName = farmName;
            this.FarmNumber = farmNumber;
        }

        /// <summary>
        /// Gets or Sets LpiCode
        /// </summary>
        [DataMember(Name="lpiCode", EmitDefaultValue=true)]
        public string LpiCode { get; set; }


        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double Longitude { get; set; }

        /// <summary>
        /// Gets or Sets PortionNumber
        /// </summary>
        [DataMember(Name="portionNumber", EmitDefaultValue=false)]
        public int PortionNumber { get; set; }

        /// <summary>
        /// Gets or Sets CadastralExtent
        /// </summary>
        [DataMember(Name="cadastralExtent", EmitDefaultValue=true)]
        public int? CadastralExtent { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredExtent
        /// </summary>
        [DataMember(Name="registeredExtent", EmitDefaultValue=false)]
        public int RegisteredExtent { get; set; }

        /// <summary>
        /// Gets or Sets ZoningUsage
        /// </summary>
        [DataMember(Name="zoningUsage", EmitDefaultValue=true)]
        public string ZoningUsage { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDivision
        /// </summary>
        [DataMember(Name="registrationDivision", EmitDefaultValue=true)]
        public string RegistrationDivision { get; set; }

        /// <summary>
        /// Gets or Sets FarmName
        /// </summary>
        [DataMember(Name="farmName", EmitDefaultValue=true)]
        public string FarmName { get; set; }

        /// <summary>
        /// Gets or Sets FarmNumber
        /// </summary>
        [DataMember(Name="farmNumber", EmitDefaultValue=false)]
        public int FarmNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedLightstoneFarm {\n");
            sb.Append("  LpiCode: ").Append(LpiCode).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  PortionNumber: ").Append(PortionNumber).Append("\n");
            sb.Append("  CadastralExtent: ").Append(CadastralExtent).Append("\n");
            sb.Append("  RegisteredExtent: ").Append(RegisteredExtent).Append("\n");
            sb.Append("  ZoningUsage: ").Append(ZoningUsage).Append("\n");
            sb.Append("  RegistrationDivision: ").Append(RegistrationDivision).Append("\n");
            sb.Append("  FarmName: ").Append(FarmName).Append("\n");
            sb.Append("  FarmNumber: ").Append(FarmNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedLightstoneFarm);
        }

        /// <summary>
        /// Returns true if WindeedLightstoneFarm instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedLightstoneFarm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedLightstoneFarm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LpiCode == input.LpiCode ||
                    (this.LpiCode != null &&
                    this.LpiCode.Equals(input.LpiCode))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.PortionNumber == input.PortionNumber ||
                    (this.PortionNumber != null &&
                    this.PortionNumber.Equals(input.PortionNumber))
                ) && 
                (
                    this.CadastralExtent == input.CadastralExtent ||
                    (this.CadastralExtent != null &&
                    this.CadastralExtent.Equals(input.CadastralExtent))
                ) && 
                (
                    this.RegisteredExtent == input.RegisteredExtent ||
                    (this.RegisteredExtent != null &&
                    this.RegisteredExtent.Equals(input.RegisteredExtent))
                ) && 
                (
                    this.ZoningUsage == input.ZoningUsage ||
                    (this.ZoningUsage != null &&
                    this.ZoningUsage.Equals(input.ZoningUsage))
                ) && 
                (
                    this.RegistrationDivision == input.RegistrationDivision ||
                    (this.RegistrationDivision != null &&
                    this.RegistrationDivision.Equals(input.RegistrationDivision))
                ) && 
                (
                    this.FarmName == input.FarmName ||
                    (this.FarmName != null &&
                    this.FarmName.Equals(input.FarmName))
                ) && 
                (
                    this.FarmNumber == input.FarmNumber ||
                    (this.FarmNumber != null &&
                    this.FarmNumber.Equals(input.FarmNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LpiCode != null)
                    hashCode = hashCode * 59 + this.LpiCode.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.PortionNumber != null)
                    hashCode = hashCode * 59 + this.PortionNumber.GetHashCode();
                if (this.CadastralExtent != null)
                    hashCode = hashCode * 59 + this.CadastralExtent.GetHashCode();
                if (this.RegisteredExtent != null)
                    hashCode = hashCode * 59 + this.RegisteredExtent.GetHashCode();
                if (this.ZoningUsage != null)
                    hashCode = hashCode * 59 + this.ZoningUsage.GetHashCode();
                if (this.RegistrationDivision != null)
                    hashCode = hashCode * 59 + this.RegistrationDivision.GetHashCode();
                if (this.FarmName != null)
                    hashCode = hashCode * 59 + this.FarmName.GetHashCode();
                if (this.FarmNumber != null)
                    hashCode = hashCode * 59 + this.FarmNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
