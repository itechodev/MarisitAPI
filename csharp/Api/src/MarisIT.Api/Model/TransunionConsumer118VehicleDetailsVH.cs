/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118VehicleDetailsVH
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118VehicleDetailsVH :  IEquatable<TransunionConsumer118VehicleDetailsVH>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118VehicleDetailsVH" /> class.
        /// </summary>
        /// <param name="vinChassisNumber">vinChassisNumber.</param>
        /// <param name="engineNumber">engineNumber.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        /// <param name="yearOfManufacture">yearOfManufacture.</param>
        /// <param name="make">make.</param>
        /// <param name="model">model.</param>
        /// <param name="natisRegistrationNumber">natisRegistrationNumber.</param>
        /// <param name="meadMcGroutherDealersNumber">meadMcGroutherDealersNumber.</param>
        /// <param name="classOfClaim">classOfClaim.</param>
        /// <param name="updateDate">updateDate.</param>
        public TransunionConsumer118VehicleDetailsVH(string vinChassisNumber = default(string), string engineNumber = default(string), string registrationNumber = default(string), string yearOfManufacture = default(string), string make = default(string), string model = default(string), string natisRegistrationNumber = default(string), string meadMcGroutherDealersNumber = default(string), string classOfClaim = default(string), string updateDate = default(string))
        {
            this.VinChassisNumber = vinChassisNumber;
            this.EngineNumber = engineNumber;
            this.RegistrationNumber = registrationNumber;
            this.YearOfManufacture = yearOfManufacture;
            this.Make = make;
            this.Model = model;
            this.NatisRegistrationNumber = natisRegistrationNumber;
            this.MeadMcGroutherDealersNumber = meadMcGroutherDealersNumber;
            this.ClassOfClaim = classOfClaim;
            this.UpdateDate = updateDate;
            this.VinChassisNumber = vinChassisNumber;
            this.EngineNumber = engineNumber;
            this.RegistrationNumber = registrationNumber;
            this.YearOfManufacture = yearOfManufacture;
            this.Make = make;
            this.Model = model;
            this.NatisRegistrationNumber = natisRegistrationNumber;
            this.MeadMcGroutherDealersNumber = meadMcGroutherDealersNumber;
            this.ClassOfClaim = classOfClaim;
            this.UpdateDate = updateDate;
        }

        /// <summary>
        /// Gets or Sets VinChassisNumber
        /// </summary>
        [DataMember(Name="vinChassisNumber", EmitDefaultValue=true)]
        public string VinChassisNumber { get; set; }

        /// <summary>
        /// Gets or Sets EngineNumber
        /// </summary>
        [DataMember(Name="engineNumber", EmitDefaultValue=true)]
        public string EngineNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=true)]
        public string RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets YearOfManufacture
        /// </summary>
        [DataMember(Name="yearOfManufacture", EmitDefaultValue=true)]
        public string YearOfManufacture { get; set; }

        /// <summary>
        /// Gets or Sets Make
        /// </summary>
        [DataMember(Name="make", EmitDefaultValue=true)]
        public string Make { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=true)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets NatisRegistrationNumber
        /// </summary>
        [DataMember(Name="natisRegistrationNumber", EmitDefaultValue=true)]
        public string NatisRegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets MeadMcGroutherDealersNumber
        /// </summary>
        [DataMember(Name="meadMcGroutherDealersNumber", EmitDefaultValue=true)]
        public string MeadMcGroutherDealersNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClassOfClaim
        /// </summary>
        [DataMember(Name="classOfClaim", EmitDefaultValue=true)]
        public string ClassOfClaim { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="updateDate", EmitDefaultValue=true)]
        public string UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118VehicleDetailsVH {\n");
            sb.Append("  VinChassisNumber: ").Append(VinChassisNumber).Append("\n");
            sb.Append("  EngineNumber: ").Append(EngineNumber).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  YearOfManufacture: ").Append(YearOfManufacture).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  NatisRegistrationNumber: ").Append(NatisRegistrationNumber).Append("\n");
            sb.Append("  MeadMcGroutherDealersNumber: ").Append(MeadMcGroutherDealersNumber).Append("\n");
            sb.Append("  ClassOfClaim: ").Append(ClassOfClaim).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118VehicleDetailsVH);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118VehicleDetailsVH instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118VehicleDetailsVH to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118VehicleDetailsVH input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VinChassisNumber == input.VinChassisNumber ||
                    (this.VinChassisNumber != null &&
                    this.VinChassisNumber.Equals(input.VinChassisNumber))
                ) && 
                (
                    this.EngineNumber == input.EngineNumber ||
                    (this.EngineNumber != null &&
                    this.EngineNumber.Equals(input.EngineNumber))
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    (this.RegistrationNumber != null &&
                    this.RegistrationNumber.Equals(input.RegistrationNumber))
                ) && 
                (
                    this.YearOfManufacture == input.YearOfManufacture ||
                    (this.YearOfManufacture != null &&
                    this.YearOfManufacture.Equals(input.YearOfManufacture))
                ) && 
                (
                    this.Make == input.Make ||
                    (this.Make != null &&
                    this.Make.Equals(input.Make))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.NatisRegistrationNumber == input.NatisRegistrationNumber ||
                    (this.NatisRegistrationNumber != null &&
                    this.NatisRegistrationNumber.Equals(input.NatisRegistrationNumber))
                ) && 
                (
                    this.MeadMcGroutherDealersNumber == input.MeadMcGroutherDealersNumber ||
                    (this.MeadMcGroutherDealersNumber != null &&
                    this.MeadMcGroutherDealersNumber.Equals(input.MeadMcGroutherDealersNumber))
                ) && 
                (
                    this.ClassOfClaim == input.ClassOfClaim ||
                    (this.ClassOfClaim != null &&
                    this.ClassOfClaim.Equals(input.ClassOfClaim))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VinChassisNumber != null)
                    hashCode = hashCode * 59 + this.VinChassisNumber.GetHashCode();
                if (this.EngineNumber != null)
                    hashCode = hashCode * 59 + this.EngineNumber.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.YearOfManufacture != null)
                    hashCode = hashCode * 59 + this.YearOfManufacture.GetHashCode();
                if (this.Make != null)
                    hashCode = hashCode * 59 + this.Make.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.NatisRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.NatisRegistrationNumber.GetHashCode();
                if (this.MeadMcGroutherDealersNumber != null)
                    hashCode = hashCode * 59 + this.MeadMcGroutherDealersNumber.GetHashCode();
                if (this.ClassOfClaim != null)
                    hashCode = hashCode * 59 + this.ClassOfClaim.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
