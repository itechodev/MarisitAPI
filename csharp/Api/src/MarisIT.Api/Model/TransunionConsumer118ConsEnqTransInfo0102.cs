/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118ConsEnqTransInfo0102
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118ConsEnqTransInfo0102 :  IEquatable<TransunionConsumer118ConsEnqTransInfo0102>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118ConsEnqTransInfo0102" /> class.
        /// </summary>
        /// <param name="definiteMatchCount">definiteMatchCount.</param>
        /// <param name="possibleMatchCount">possibleMatchCount.</param>
        /// <param name="matchedConsumerNo">matchedConsumerNo.</param>
        /// <param name="possibleConsumerNo">possibleConsumerNo.</param>
        /// <param name="possibleAdverseIndicator">possibleAdverseIndicator.</param>
        public TransunionConsumer118ConsEnqTransInfo0102(string definiteMatchCount = default(string), string possibleMatchCount = default(string), string matchedConsumerNo = default(string), List<string> possibleConsumerNo = default(List<string>), List<string> possibleAdverseIndicator = default(List<string>))
        {
            this.DefiniteMatchCount = definiteMatchCount;
            this.PossibleMatchCount = possibleMatchCount;
            this.MatchedConsumerNo = matchedConsumerNo;
            this.PossibleConsumerNo = possibleConsumerNo;
            this.PossibleAdverseIndicator = possibleAdverseIndicator;
            this.DefiniteMatchCount = definiteMatchCount;
            this.PossibleMatchCount = possibleMatchCount;
            this.MatchedConsumerNo = matchedConsumerNo;
            this.PossibleConsumerNo = possibleConsumerNo;
            this.PossibleAdverseIndicator = possibleAdverseIndicator;
        }

        /// <summary>
        /// Gets or Sets DefiniteMatchCount
        /// </summary>
        [DataMember(Name="definiteMatchCount", EmitDefaultValue=true)]
        public string DefiniteMatchCount { get; set; }

        /// <summary>
        /// Gets or Sets PossibleMatchCount
        /// </summary>
        [DataMember(Name="possibleMatchCount", EmitDefaultValue=true)]
        public string PossibleMatchCount { get; set; }

        /// <summary>
        /// Gets or Sets MatchedConsumerNo
        /// </summary>
        [DataMember(Name="matchedConsumerNo", EmitDefaultValue=true)]
        public string MatchedConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets PossibleConsumerNo
        /// </summary>
        [DataMember(Name="possibleConsumerNo", EmitDefaultValue=true)]
        public List<string> PossibleConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets PossibleAdverseIndicator
        /// </summary>
        [DataMember(Name="possibleAdverseIndicator", EmitDefaultValue=true)]
        public List<string> PossibleAdverseIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118ConsEnqTransInfo0102 {\n");
            sb.Append("  DefiniteMatchCount: ").Append(DefiniteMatchCount).Append("\n");
            sb.Append("  PossibleMatchCount: ").Append(PossibleMatchCount).Append("\n");
            sb.Append("  MatchedConsumerNo: ").Append(MatchedConsumerNo).Append("\n");
            sb.Append("  PossibleConsumerNo: ").Append(PossibleConsumerNo).Append("\n");
            sb.Append("  PossibleAdverseIndicator: ").Append(PossibleAdverseIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118ConsEnqTransInfo0102);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118ConsEnqTransInfo0102 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118ConsEnqTransInfo0102 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118ConsEnqTransInfo0102 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefiniteMatchCount == input.DefiniteMatchCount ||
                    (this.DefiniteMatchCount != null &&
                    this.DefiniteMatchCount.Equals(input.DefiniteMatchCount))
                ) && 
                (
                    this.PossibleMatchCount == input.PossibleMatchCount ||
                    (this.PossibleMatchCount != null &&
                    this.PossibleMatchCount.Equals(input.PossibleMatchCount))
                ) && 
                (
                    this.MatchedConsumerNo == input.MatchedConsumerNo ||
                    (this.MatchedConsumerNo != null &&
                    this.MatchedConsumerNo.Equals(input.MatchedConsumerNo))
                ) && 
                (
                    this.PossibleConsumerNo == input.PossibleConsumerNo ||
                    this.PossibleConsumerNo != null &&
                    input.PossibleConsumerNo != null &&
                    this.PossibleConsumerNo.SequenceEqual(input.PossibleConsumerNo)
                ) && 
                (
                    this.PossibleAdverseIndicator == input.PossibleAdverseIndicator ||
                    this.PossibleAdverseIndicator != null &&
                    input.PossibleAdverseIndicator != null &&
                    this.PossibleAdverseIndicator.SequenceEqual(input.PossibleAdverseIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefiniteMatchCount != null)
                    hashCode = hashCode * 59 + this.DefiniteMatchCount.GetHashCode();
                if (this.PossibleMatchCount != null)
                    hashCode = hashCode * 59 + this.PossibleMatchCount.GetHashCode();
                if (this.MatchedConsumerNo != null)
                    hashCode = hashCode * 59 + this.MatchedConsumerNo.GetHashCode();
                if (this.PossibleConsumerNo != null)
                    hashCode = hashCode * 59 + this.PossibleConsumerNo.GetHashCode();
                if (this.PossibleAdverseIndicator != null)
                    hashCode = hashCode * 59 + this.PossibleAdverseIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
