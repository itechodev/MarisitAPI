/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118InsuranceEnquirySE
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118InsuranceEnquirySE :  IEquatable<TransunionConsumer118InsuranceEnquirySE>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118InsuranceEnquirySE" /> class.
        /// </summary>
        /// <param name="dateOfEnquiry">dateOfEnquiry.</param>
        /// <param name="subscriber">subscriber.</param>
        /// <param name="contact">contact.</param>
        /// <param name="claimAmount">claimAmount.</param>
        /// <param name="enquiryTypeCode">enquiryTypeCode.</param>
        /// <param name="enquiryTypeDescription">enquiryTypeDescription.</param>
        public TransunionConsumer118InsuranceEnquirySE(string dateOfEnquiry = default(string), string subscriber = default(string), string contact = default(string), string claimAmount = default(string), string enquiryTypeCode = default(string), string enquiryTypeDescription = default(string))
        {
            this.DateOfEnquiry = dateOfEnquiry;
            this.Subscriber = subscriber;
            this.Contact = contact;
            this.ClaimAmount = claimAmount;
            this.EnquiryTypeCode = enquiryTypeCode;
            this.EnquiryTypeDescription = enquiryTypeDescription;
            this.DateOfEnquiry = dateOfEnquiry;
            this.Subscriber = subscriber;
            this.Contact = contact;
            this.ClaimAmount = claimAmount;
            this.EnquiryTypeCode = enquiryTypeCode;
            this.EnquiryTypeDescription = enquiryTypeDescription;
        }

        /// <summary>
        /// Gets or Sets DateOfEnquiry
        /// </summary>
        [DataMember(Name="dateOfEnquiry", EmitDefaultValue=true)]
        public string DateOfEnquiry { get; set; }

        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name="subscriber", EmitDefaultValue=true)]
        public string Subscriber { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=true)]
        public string Contact { get; set; }

        /// <summary>
        /// Gets or Sets ClaimAmount
        /// </summary>
        [DataMember(Name="claimAmount", EmitDefaultValue=true)]
        public string ClaimAmount { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryTypeCode
        /// </summary>
        [DataMember(Name="enquiryTypeCode", EmitDefaultValue=true)]
        public string EnquiryTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets EnquiryTypeDescription
        /// </summary>
        [DataMember(Name="enquiryTypeDescription", EmitDefaultValue=true)]
        public string EnquiryTypeDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118InsuranceEnquirySE {\n");
            sb.Append("  DateOfEnquiry: ").Append(DateOfEnquiry).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ClaimAmount: ").Append(ClaimAmount).Append("\n");
            sb.Append("  EnquiryTypeCode: ").Append(EnquiryTypeCode).Append("\n");
            sb.Append("  EnquiryTypeDescription: ").Append(EnquiryTypeDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118InsuranceEnquirySE);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118InsuranceEnquirySE instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118InsuranceEnquirySE to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118InsuranceEnquirySE input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateOfEnquiry == input.DateOfEnquiry ||
                    (this.DateOfEnquiry != null &&
                    this.DateOfEnquiry.Equals(input.DateOfEnquiry))
                ) && 
                (
                    this.Subscriber == input.Subscriber ||
                    (this.Subscriber != null &&
                    this.Subscriber.Equals(input.Subscriber))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ClaimAmount == input.ClaimAmount ||
                    (this.ClaimAmount != null &&
                    this.ClaimAmount.Equals(input.ClaimAmount))
                ) && 
                (
                    this.EnquiryTypeCode == input.EnquiryTypeCode ||
                    (this.EnquiryTypeCode != null &&
                    this.EnquiryTypeCode.Equals(input.EnquiryTypeCode))
                ) && 
                (
                    this.EnquiryTypeDescription == input.EnquiryTypeDescription ||
                    (this.EnquiryTypeDescription != null &&
                    this.EnquiryTypeDescription.Equals(input.EnquiryTypeDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateOfEnquiry != null)
                    hashCode = hashCode * 59 + this.DateOfEnquiry.GetHashCode();
                if (this.Subscriber != null)
                    hashCode = hashCode * 59 + this.Subscriber.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.ClaimAmount != null)
                    hashCode = hashCode * 59 + this.ClaimAmount.GetHashCode();
                if (this.EnquiryTypeCode != null)
                    hashCode = hashCode * 59 + this.EnquiryTypeCode.GetHashCode();
                if (this.EnquiryTypeDescription != null)
                    hashCode = hashCode * 59 + this.EnquiryTypeDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
