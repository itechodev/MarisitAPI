/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// SafpsDetailedSearchResponse
    /// </summary>
    [DataContract]
    public partial class SafpsDetailedSearchResponse :  IEquatable<SafpsDetailedSearchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SafpsDetailedSearchResponse" /> class.
        /// </summary>
        /// <param name="subjectTitle">subjectTitle.</param>
        /// <param name="subjectSurname">subjectSurname.</param>
        /// <param name="subjectName">subjectName.</param>
        /// <param name="subjectDateOfBirth">subjectDateOfBirth.</param>
        /// <param name="subjectGender">subjectGender.</param>
        /// <param name="incidents">incidents.</param>
        public SafpsDetailedSearchResponse(string subjectTitle = default(string), string subjectSurname = default(string), string subjectName = default(string), string subjectDateOfBirth = default(string), string subjectGender = default(string), List<SafpsIncident> incidents = default(List<SafpsIncident>))
        {
            this.SubjectTitle = subjectTitle;
            this.SubjectSurname = subjectSurname;
            this.SubjectName = subjectName;
            this.SubjectDateOfBirth = subjectDateOfBirth;
            this.SubjectGender = subjectGender;
            this.Incidents = incidents;
            this.SubjectTitle = subjectTitle;
            this.SubjectSurname = subjectSurname;
            this.SubjectName = subjectName;
            this.SubjectDateOfBirth = subjectDateOfBirth;
            this.SubjectGender = subjectGender;
            this.Incidents = incidents;
        }

        /// <summary>
        /// Gets or Sets SubjectTitle
        /// </summary>
        [DataMember(Name="subjectTitle", EmitDefaultValue=true)]
        public string SubjectTitle { get; set; }

        /// <summary>
        /// Gets or Sets SubjectSurname
        /// </summary>
        [DataMember(Name="subjectSurname", EmitDefaultValue=true)]
        public string SubjectSurname { get; set; }

        /// <summary>
        /// Gets or Sets SubjectName
        /// </summary>
        [DataMember(Name="subjectName", EmitDefaultValue=true)]
        public string SubjectName { get; set; }

        /// <summary>
        /// Gets or Sets SubjectDateOfBirth
        /// </summary>
        [DataMember(Name="subjectDateOfBirth", EmitDefaultValue=true)]
        public string SubjectDateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets SubjectGender
        /// </summary>
        [DataMember(Name="subjectGender", EmitDefaultValue=true)]
        public string SubjectGender { get; set; }

        /// <summary>
        /// Gets or Sets Incidents
        /// </summary>
        [DataMember(Name="incidents", EmitDefaultValue=true)]
        public List<SafpsIncident> Incidents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SafpsDetailedSearchResponse {\n");
            sb.Append("  SubjectTitle: ").Append(SubjectTitle).Append("\n");
            sb.Append("  SubjectSurname: ").Append(SubjectSurname).Append("\n");
            sb.Append("  SubjectName: ").Append(SubjectName).Append("\n");
            sb.Append("  SubjectDateOfBirth: ").Append(SubjectDateOfBirth).Append("\n");
            sb.Append("  SubjectGender: ").Append(SubjectGender).Append("\n");
            sb.Append("  Incidents: ").Append(Incidents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SafpsDetailedSearchResponse);
        }

        /// <summary>
        /// Returns true if SafpsDetailedSearchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SafpsDetailedSearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SafpsDetailedSearchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubjectTitle == input.SubjectTitle ||
                    (this.SubjectTitle != null &&
                    this.SubjectTitle.Equals(input.SubjectTitle))
                ) && 
                (
                    this.SubjectSurname == input.SubjectSurname ||
                    (this.SubjectSurname != null &&
                    this.SubjectSurname.Equals(input.SubjectSurname))
                ) && 
                (
                    this.SubjectName == input.SubjectName ||
                    (this.SubjectName != null &&
                    this.SubjectName.Equals(input.SubjectName))
                ) && 
                (
                    this.SubjectDateOfBirth == input.SubjectDateOfBirth ||
                    (this.SubjectDateOfBirth != null &&
                    this.SubjectDateOfBirth.Equals(input.SubjectDateOfBirth))
                ) && 
                (
                    this.SubjectGender == input.SubjectGender ||
                    (this.SubjectGender != null &&
                    this.SubjectGender.Equals(input.SubjectGender))
                ) && 
                (
                    this.Incidents == input.Incidents ||
                    this.Incidents != null &&
                    input.Incidents != null &&
                    this.Incidents.SequenceEqual(input.Incidents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubjectTitle != null)
                    hashCode = hashCode * 59 + this.SubjectTitle.GetHashCode();
                if (this.SubjectSurname != null)
                    hashCode = hashCode * 59 + this.SubjectSurname.GetHashCode();
                if (this.SubjectName != null)
                    hashCode = hashCode * 59 + this.SubjectName.GetHashCode();
                if (this.SubjectDateOfBirth != null)
                    hashCode = hashCode * 59 + this.SubjectDateOfBirth.GetHashCode();
                if (this.SubjectGender != null)
                    hashCode = hashCode * 59 + this.SubjectGender.GetHashCode();
                if (this.Incidents != null)
                    hashCode = hashCode * 59 + this.Incidents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
