/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerAdverseInfo
    /// </summary>
    [DataContract]
    public partial class XdsConsumerAdverseInfo :  IEquatable<XdsConsumerAdverseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerAdverseInfo" /> class.
        /// </summary>
        /// <param name="accountNo">accountNo.</param>
        /// <param name="actionDate">actionDate.</param>
        /// <param name="comments">comments.</param>
        /// <param name="consumerID">consumerID.</param>
        /// <param name="currentBalanceAmt">currentBalanceAmt.</param>
        /// <param name="dataStatus">dataStatus.</param>
        /// <param name="displayText">displayText.</param>
        /// <param name="periodNum">periodNum.</param>
        /// <param name="subAccountNo">subAccountNo.</param>
        /// <param name="subscriberID">subscriberID.</param>
        /// <param name="subscriberName">subscriberName.</param>
        public XdsConsumerAdverseInfo(string accountNo = default(string), string actionDate = default(string), string comments = default(string), string consumerID = default(string), string currentBalanceAmt = default(string), string dataStatus = default(string), string displayText = default(string), string periodNum = default(string), string subAccountNo = default(string), string subscriberID = default(string), string subscriberName = default(string))
        {
            this.AccountNo = accountNo;
            this.ActionDate = actionDate;
            this.Comments = comments;
            this.ConsumerID = consumerID;
            this.CurrentBalanceAmt = currentBalanceAmt;
            this.DataStatus = dataStatus;
            this.DisplayText = displayText;
            this.PeriodNum = periodNum;
            this.SubAccountNo = subAccountNo;
            this.SubscriberID = subscriberID;
            this.SubscriberName = subscriberName;
            this.AccountNo = accountNo;
            this.ActionDate = actionDate;
            this.Comments = comments;
            this.ConsumerID = consumerID;
            this.CurrentBalanceAmt = currentBalanceAmt;
            this.DataStatus = dataStatus;
            this.DisplayText = displayText;
            this.PeriodNum = periodNum;
            this.SubAccountNo = subAccountNo;
            this.SubscriberID = subscriberID;
            this.SubscriberName = subscriberName;
        }

        /// <summary>
        /// Gets or Sets AccountNo
        /// </summary>
        [DataMember(Name="accountNo", EmitDefaultValue=true)]
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or Sets ActionDate
        /// </summary>
        [DataMember(Name="actionDate", EmitDefaultValue=true)]
        public string ActionDate { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerID
        /// </summary>
        [DataMember(Name="consumerID", EmitDefaultValue=true)]
        public string ConsumerID { get; set; }

        /// <summary>
        /// Gets or Sets CurrentBalanceAmt
        /// </summary>
        [DataMember(Name="currentBalanceAmt", EmitDefaultValue=true)]
        public string CurrentBalanceAmt { get; set; }

        /// <summary>
        /// Gets or Sets DataStatus
        /// </summary>
        [DataMember(Name="dataStatus", EmitDefaultValue=true)]
        public string DataStatus { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets PeriodNum
        /// </summary>
        [DataMember(Name="periodNum", EmitDefaultValue=true)]
        public string PeriodNum { get; set; }

        /// <summary>
        /// Gets or Sets SubAccountNo
        /// </summary>
        [DataMember(Name="subAccountNo", EmitDefaultValue=true)]
        public string SubAccountNo { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberID
        /// </summary>
        [DataMember(Name="subscriberID", EmitDefaultValue=true)]
        public string SubscriberID { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberName
        /// </summary>
        [DataMember(Name="subscriberName", EmitDefaultValue=true)]
        public string SubscriberName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerAdverseInfo {\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  ActionDate: ").Append(ActionDate).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ConsumerID: ").Append(ConsumerID).Append("\n");
            sb.Append("  CurrentBalanceAmt: ").Append(CurrentBalanceAmt).Append("\n");
            sb.Append("  DataStatus: ").Append(DataStatus).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  PeriodNum: ").Append(PeriodNum).Append("\n");
            sb.Append("  SubAccountNo: ").Append(SubAccountNo).Append("\n");
            sb.Append("  SubscriberID: ").Append(SubscriberID).Append("\n");
            sb.Append("  SubscriberName: ").Append(SubscriberName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerAdverseInfo);
        }

        /// <summary>
        /// Returns true if XdsConsumerAdverseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerAdverseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerAdverseInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNo == input.AccountNo ||
                    (this.AccountNo != null &&
                    this.AccountNo.Equals(input.AccountNo))
                ) && 
                (
                    this.ActionDate == input.ActionDate ||
                    (this.ActionDate != null &&
                    this.ActionDate.Equals(input.ActionDate))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ConsumerID == input.ConsumerID ||
                    (this.ConsumerID != null &&
                    this.ConsumerID.Equals(input.ConsumerID))
                ) && 
                (
                    this.CurrentBalanceAmt == input.CurrentBalanceAmt ||
                    (this.CurrentBalanceAmt != null &&
                    this.CurrentBalanceAmt.Equals(input.CurrentBalanceAmt))
                ) && 
                (
                    this.DataStatus == input.DataStatus ||
                    (this.DataStatus != null &&
                    this.DataStatus.Equals(input.DataStatus))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.PeriodNum == input.PeriodNum ||
                    (this.PeriodNum != null &&
                    this.PeriodNum.Equals(input.PeriodNum))
                ) && 
                (
                    this.SubAccountNo == input.SubAccountNo ||
                    (this.SubAccountNo != null &&
                    this.SubAccountNo.Equals(input.SubAccountNo))
                ) && 
                (
                    this.SubscriberID == input.SubscriberID ||
                    (this.SubscriberID != null &&
                    this.SubscriberID.Equals(input.SubscriberID))
                ) && 
                (
                    this.SubscriberName == input.SubscriberName ||
                    (this.SubscriberName != null &&
                    this.SubscriberName.Equals(input.SubscriberName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNo != null)
                    hashCode = hashCode * 59 + this.AccountNo.GetHashCode();
                if (this.ActionDate != null)
                    hashCode = hashCode * 59 + this.ActionDate.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ConsumerID != null)
                    hashCode = hashCode * 59 + this.ConsumerID.GetHashCode();
                if (this.CurrentBalanceAmt != null)
                    hashCode = hashCode * 59 + this.CurrentBalanceAmt.GetHashCode();
                if (this.DataStatus != null)
                    hashCode = hashCode * 59 + this.DataStatus.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.PeriodNum != null)
                    hashCode = hashCode * 59 + this.PeriodNum.GetHashCode();
                if (this.SubAccountNo != null)
                    hashCode = hashCode * 59 + this.SubAccountNo.GetHashCode();
                if (this.SubscriberID != null)
                    hashCode = hashCode * 59 + this.SubscriberID.GetHashCode();
                if (this.SubscriberName != null)
                    hashCode = hashCode * 59 + this.SubscriberName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
