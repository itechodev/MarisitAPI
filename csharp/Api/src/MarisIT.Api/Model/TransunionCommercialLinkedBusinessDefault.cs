/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialLinkedBusinessDefault
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialLinkedBusinessDefault :  IEquatable<TransunionCommercialLinkedBusinessDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialLinkedBusinessDefault" /> class.
        /// </summary>
        /// <param name="moduleProduct">moduleProduct.</param>
        /// <param name="itNumber">itNumber.</param>
        /// <param name="registrationNumber">registrationNumber.</param>
        /// <param name="judgementCount">judgementCount.</param>
        /// <param name="adverseCount">adverseCount.</param>
        public TransunionCommercialLinkedBusinessDefault(string moduleProduct = default(string), List<string> itNumber = default(List<string>), List<string> registrationNumber = default(List<string>), List<string> judgementCount = default(List<string>), List<string> adverseCount = default(List<string>))
        {
            this.ModuleProduct = moduleProduct;
            this.ItNumber = itNumber;
            this.RegistrationNumber = registrationNumber;
            this.JudgementCount = judgementCount;
            this.AdverseCount = adverseCount;
            this.ModuleProduct = moduleProduct;
            this.ItNumber = itNumber;
            this.RegistrationNumber = registrationNumber;
            this.JudgementCount = judgementCount;
            this.AdverseCount = adverseCount;
        }

        /// <summary>
        /// Gets or Sets ModuleProduct
        /// </summary>
        [DataMember(Name="moduleProduct", EmitDefaultValue=true)]
        public string ModuleProduct { get; set; }

        /// <summary>
        /// Gets or Sets ItNumber
        /// </summary>
        [DataMember(Name="itNumber", EmitDefaultValue=true)]
        public List<string> ItNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationNumber
        /// </summary>
        [DataMember(Name="registrationNumber", EmitDefaultValue=true)]
        public List<string> RegistrationNumber { get; set; }

        /// <summary>
        /// Gets or Sets JudgementCount
        /// </summary>
        [DataMember(Name="judgementCount", EmitDefaultValue=true)]
        public List<string> JudgementCount { get; set; }

        /// <summary>
        /// Gets or Sets AdverseCount
        /// </summary>
        [DataMember(Name="adverseCount", EmitDefaultValue=true)]
        public List<string> AdverseCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialLinkedBusinessDefault {\n");
            sb.Append("  ModuleProduct: ").Append(ModuleProduct).Append("\n");
            sb.Append("  ItNumber: ").Append(ItNumber).Append("\n");
            sb.Append("  RegistrationNumber: ").Append(RegistrationNumber).Append("\n");
            sb.Append("  JudgementCount: ").Append(JudgementCount).Append("\n");
            sb.Append("  AdverseCount: ").Append(AdverseCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialLinkedBusinessDefault);
        }

        /// <summary>
        /// Returns true if TransunionCommercialLinkedBusinessDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialLinkedBusinessDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialLinkedBusinessDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModuleProduct == input.ModuleProduct ||
                    (this.ModuleProduct != null &&
                    this.ModuleProduct.Equals(input.ModuleProduct))
                ) && 
                (
                    this.ItNumber == input.ItNumber ||
                    this.ItNumber != null &&
                    input.ItNumber != null &&
                    this.ItNumber.SequenceEqual(input.ItNumber)
                ) && 
                (
                    this.RegistrationNumber == input.RegistrationNumber ||
                    this.RegistrationNumber != null &&
                    input.RegistrationNumber != null &&
                    this.RegistrationNumber.SequenceEqual(input.RegistrationNumber)
                ) && 
                (
                    this.JudgementCount == input.JudgementCount ||
                    this.JudgementCount != null &&
                    input.JudgementCount != null &&
                    this.JudgementCount.SequenceEqual(input.JudgementCount)
                ) && 
                (
                    this.AdverseCount == input.AdverseCount ||
                    this.AdverseCount != null &&
                    input.AdverseCount != null &&
                    this.AdverseCount.SequenceEqual(input.AdverseCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModuleProduct != null)
                    hashCode = hashCode * 59 + this.ModuleProduct.GetHashCode();
                if (this.ItNumber != null)
                    hashCode = hashCode * 59 + this.ItNumber.GetHashCode();
                if (this.RegistrationNumber != null)
                    hashCode = hashCode * 59 + this.RegistrationNumber.GetHashCode();
                if (this.JudgementCount != null)
                    hashCode = hashCode * 59 + this.JudgementCount.GetHashCode();
                if (this.AdverseCount != null)
                    hashCode = hashCode * 59 + this.AdverseCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
