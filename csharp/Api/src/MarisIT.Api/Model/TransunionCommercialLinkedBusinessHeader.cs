/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialLinkedBusinessHeader
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialLinkedBusinessHeader :  IEquatable<TransunionCommercialLinkedBusinessHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialLinkedBusinessHeader" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="itNumber">itNumber.</param>
        /// <param name="registeredNumber">registeredNumber.</param>
        /// <param name="registeredStatus">registeredStatus.</param>
        /// <param name="businessName">businessName.</param>
        /// <param name="registeredDate">registeredDate.</param>
        /// <param name="judgementCounter">judgementCounter.</param>
        /// <param name="defaultCounter">defaultCounter.</param>
        public TransunionCommercialLinkedBusinessHeader(string majorProduct = default(string), string consumerNo = default(string), string itNumber = default(string), string registeredNumber = default(string), string registeredStatus = default(string), string businessName = default(string), string registeredDate = default(string), string judgementCounter = default(string), string defaultCounter = default(string))
        {
            this.MajorProduct = majorProduct;
            this.ConsumerNo = consumerNo;
            this.ItNumber = itNumber;
            this.RegisteredNumber = registeredNumber;
            this.RegisteredStatus = registeredStatus;
            this.BusinessName = businessName;
            this.RegisteredDate = registeredDate;
            this.JudgementCounter = judgementCounter;
            this.DefaultCounter = defaultCounter;
            this.MajorProduct = majorProduct;
            this.ConsumerNo = consumerNo;
            this.ItNumber = itNumber;
            this.RegisteredNumber = registeredNumber;
            this.RegisteredStatus = registeredStatus;
            this.BusinessName = businessName;
            this.RegisteredDate = registeredDate;
            this.JudgementCounter = judgementCounter;
            this.DefaultCounter = defaultCounter;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets ItNumber
        /// </summary>
        [DataMember(Name="itNumber", EmitDefaultValue=true)]
        public string ItNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredNumber
        /// </summary>
        [DataMember(Name="registeredNumber", EmitDefaultValue=true)]
        public string RegisteredNumber { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredStatus
        /// </summary>
        [DataMember(Name="registeredStatus", EmitDefaultValue=true)]
        public string RegisteredStatus { get; set; }

        /// <summary>
        /// Gets or Sets BusinessName
        /// </summary>
        [DataMember(Name="businessName", EmitDefaultValue=true)]
        public string BusinessName { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredDate
        /// </summary>
        [DataMember(Name="registeredDate", EmitDefaultValue=true)]
        public string RegisteredDate { get; set; }

        /// <summary>
        /// Gets or Sets JudgementCounter
        /// </summary>
        [DataMember(Name="judgementCounter", EmitDefaultValue=true)]
        public string JudgementCounter { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCounter
        /// </summary>
        [DataMember(Name="defaultCounter", EmitDefaultValue=true)]
        public string DefaultCounter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialLinkedBusinessHeader {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  ItNumber: ").Append(ItNumber).Append("\n");
            sb.Append("  RegisteredNumber: ").Append(RegisteredNumber).Append("\n");
            sb.Append("  RegisteredStatus: ").Append(RegisteredStatus).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  RegisteredDate: ").Append(RegisteredDate).Append("\n");
            sb.Append("  JudgementCounter: ").Append(JudgementCounter).Append("\n");
            sb.Append("  DefaultCounter: ").Append(DefaultCounter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialLinkedBusinessHeader);
        }

        /// <summary>
        /// Returns true if TransunionCommercialLinkedBusinessHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialLinkedBusinessHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialLinkedBusinessHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.ItNumber == input.ItNumber ||
                    (this.ItNumber != null &&
                    this.ItNumber.Equals(input.ItNumber))
                ) && 
                (
                    this.RegisteredNumber == input.RegisteredNumber ||
                    (this.RegisteredNumber != null &&
                    this.RegisteredNumber.Equals(input.RegisteredNumber))
                ) && 
                (
                    this.RegisteredStatus == input.RegisteredStatus ||
                    (this.RegisteredStatus != null &&
                    this.RegisteredStatus.Equals(input.RegisteredStatus))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.RegisteredDate == input.RegisteredDate ||
                    (this.RegisteredDate != null &&
                    this.RegisteredDate.Equals(input.RegisteredDate))
                ) && 
                (
                    this.JudgementCounter == input.JudgementCounter ||
                    (this.JudgementCounter != null &&
                    this.JudgementCounter.Equals(input.JudgementCounter))
                ) && 
                (
                    this.DefaultCounter == input.DefaultCounter ||
                    (this.DefaultCounter != null &&
                    this.DefaultCounter.Equals(input.DefaultCounter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.ItNumber != null)
                    hashCode = hashCode * 59 + this.ItNumber.GetHashCode();
                if (this.RegisteredNumber != null)
                    hashCode = hashCode * 59 + this.RegisteredNumber.GetHashCode();
                if (this.RegisteredStatus != null)
                    hashCode = hashCode * 59 + this.RegisteredStatus.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.RegisteredDate != null)
                    hashCode = hashCode * 59 + this.RegisteredDate.GetHashCode();
                if (this.JudgementCounter != null)
                    hashCode = hashCode * 59 + this.JudgementCounter.GetHashCode();
                if (this.DefaultCounter != null)
                    hashCode = hashCode * 59 + this.DefaultCounter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
