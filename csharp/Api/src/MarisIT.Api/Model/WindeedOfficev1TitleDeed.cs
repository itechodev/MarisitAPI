/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedOfficev1TitleDeed
    /// </summary>
    [DataContract]
    public partial class WindeedOfficev1TitleDeed :  IEquatable<WindeedOfficev1TitleDeed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficev1TitleDeed" /> class.
        /// </summary>
        /// <param name="typeCode">typeCode.</param>
        /// <param name="typeDescription">typeDescription.</param>
        /// <param name="documentNumber">documentNumber.</param>
        /// <param name="microfilmNumber">microfilmNumber.</param>
        /// <param name="imageScannedReference">imageScannedReference.</param>
        /// <param name="purchasePrice">purchasePrice.</param>
        /// <param name="multipleOwners">multipleOwners.</param>
        /// <param name="multipleProperties">multipleProperties.</param>
        /// <param name="purchaseDate">purchaseDate.</param>
        /// <param name="registrationDate">registrationDate.</param>
        /// <param name="owners">owners.</param>
        public WindeedOfficev1TitleDeed(string typeCode = default(string), string typeDescription = default(string), string documentNumber = default(string), string microfilmNumber = default(string), DateTime? imageScannedReference = default(DateTime?), string purchasePrice = default(string), bool? multipleOwners = default(bool?), bool? multipleProperties = default(bool?), DateTime? purchaseDate = default(DateTime?), DateTime? registrationDate = default(DateTime?), List<WindeedOfficev1TitleDeedOwner> owners = default(List<WindeedOfficev1TitleDeedOwner>))
        {
            this.TypeCode = typeCode;
            this.TypeDescription = typeDescription;
            this.DocumentNumber = documentNumber;
            this.MicrofilmNumber = microfilmNumber;
            this.ImageScannedReference = imageScannedReference;
            this.PurchasePrice = purchasePrice;
            this.MultipleOwners = multipleOwners;
            this.MultipleProperties = multipleProperties;
            this.PurchaseDate = purchaseDate;
            this.RegistrationDate = registrationDate;
            this.Owners = owners;
            this.TypeCode = typeCode;
            this.TypeDescription = typeDescription;
            this.DocumentNumber = documentNumber;
            this.MicrofilmNumber = microfilmNumber;
            this.ImageScannedReference = imageScannedReference;
            this.PurchasePrice = purchasePrice;
            this.MultipleOwners = multipleOwners;
            this.MultipleProperties = multipleProperties;
            this.PurchaseDate = purchaseDate;
            this.RegistrationDate = registrationDate;
            this.Owners = owners;
        }

        /// <summary>
        /// Gets or Sets TypeCode
        /// </summary>
        [DataMember(Name="typeCode", EmitDefaultValue=true)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Gets or Sets TypeDescription
        /// </summary>
        [DataMember(Name="typeDescription", EmitDefaultValue=true)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets DocumentNumber
        /// </summary>
        [DataMember(Name="documentNumber", EmitDefaultValue=true)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets MicrofilmNumber
        /// </summary>
        [DataMember(Name="microfilmNumber", EmitDefaultValue=true)]
        public string MicrofilmNumber { get; set; }

        /// <summary>
        /// Gets or Sets ImageScannedReference
        /// </summary>
        [DataMember(Name="imageScannedReference", EmitDefaultValue=true)]
        public DateTime? ImageScannedReference { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="purchasePrice", EmitDefaultValue=true)]
        public string PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets MultipleOwners
        /// </summary>
        [DataMember(Name="multipleOwners", EmitDefaultValue=true)]
        public bool? MultipleOwners { get; set; }

        /// <summary>
        /// Gets or Sets MultipleProperties
        /// </summary>
        [DataMember(Name="multipleProperties", EmitDefaultValue=true)]
        public bool? MultipleProperties { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseDate
        /// </summary>
        [DataMember(Name="purchaseDate", EmitDefaultValue=true)]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationDate
        /// </summary>
        [DataMember(Name="registrationDate", EmitDefaultValue=true)]
        public DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=true)]
        public List<WindeedOfficev1TitleDeedOwner> Owners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedOfficev1TitleDeed {\n");
            sb.Append("  TypeCode: ").Append(TypeCode).Append("\n");
            sb.Append("  TypeDescription: ").Append(TypeDescription).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  MicrofilmNumber: ").Append(MicrofilmNumber).Append("\n");
            sb.Append("  ImageScannedReference: ").Append(ImageScannedReference).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  MultipleOwners: ").Append(MultipleOwners).Append("\n");
            sb.Append("  MultipleProperties: ").Append(MultipleProperties).Append("\n");
            sb.Append("  PurchaseDate: ").Append(PurchaseDate).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedOfficev1TitleDeed);
        }

        /// <summary>
        /// Returns true if WindeedOfficev1TitleDeed instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedOfficev1TitleDeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedOfficev1TitleDeed input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeCode == input.TypeCode ||
                    (this.TypeCode != null &&
                    this.TypeCode.Equals(input.TypeCode))
                ) && 
                (
                    this.TypeDescription == input.TypeDescription ||
                    (this.TypeDescription != null &&
                    this.TypeDescription.Equals(input.TypeDescription))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.MicrofilmNumber == input.MicrofilmNumber ||
                    (this.MicrofilmNumber != null &&
                    this.MicrofilmNumber.Equals(input.MicrofilmNumber))
                ) && 
                (
                    this.ImageScannedReference == input.ImageScannedReference ||
                    (this.ImageScannedReference != null &&
                    this.ImageScannedReference.Equals(input.ImageScannedReference))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.MultipleOwners == input.MultipleOwners ||
                    (this.MultipleOwners != null &&
                    this.MultipleOwners.Equals(input.MultipleOwners))
                ) && 
                (
                    this.MultipleProperties == input.MultipleProperties ||
                    (this.MultipleProperties != null &&
                    this.MultipleProperties.Equals(input.MultipleProperties))
                ) && 
                (
                    this.PurchaseDate == input.PurchaseDate ||
                    (this.PurchaseDate != null &&
                    this.PurchaseDate.Equals(input.PurchaseDate))
                ) && 
                (
                    this.RegistrationDate == input.RegistrationDate ||
                    (this.RegistrationDate != null &&
                    this.RegistrationDate.Equals(input.RegistrationDate))
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeCode != null)
                    hashCode = hashCode * 59 + this.TypeCode.GetHashCode();
                if (this.TypeDescription != null)
                    hashCode = hashCode * 59 + this.TypeDescription.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.MicrofilmNumber != null)
                    hashCode = hashCode * 59 + this.MicrofilmNumber.GetHashCode();
                if (this.ImageScannedReference != null)
                    hashCode = hashCode * 59 + this.ImageScannedReference.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.MultipleOwners != null)
                    hashCode = hashCode * 59 + this.MultipleOwners.GetHashCode();
                if (this.MultipleProperties != null)
                    hashCode = hashCode * 59 + this.MultipleProperties.GetHashCode();
                if (this.PurchaseDate != null)
                    hashCode = hashCode * 59 + this.PurchaseDate.GetHashCode();
                if (this.RegistrationDate != null)
                    hashCode = hashCode * 59 + this.RegistrationDate.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
