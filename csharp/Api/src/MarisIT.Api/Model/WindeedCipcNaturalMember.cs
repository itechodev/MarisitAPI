/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcNaturalMember
    /// </summary>
    [DataContract]
    public partial class WindeedCipcNaturalMember :  IEquatable<WindeedCipcNaturalMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcNaturalMember" /> class.
        /// </summary>
        /// <param name="uniqueDirectorId">uniqueDirectorId.</param>
        /// <param name="countryOfOrigin">countryOfOrigin.</param>
        /// <param name="appointmentDate">appointmentDate.</param>
        /// <param name="resignationDate">resignationDate.</param>
        /// <param name="memberSizePercentage">memberSizePercentage.</param>
        /// <param name="memberContribution">memberContribution.</param>
        /// <param name="status">status.</param>
        /// <param name="postalAddress">postalAddress.</param>
        /// <param name="residentialAddress">residentialAddress.</param>
        /// <param name="directorType">directorType.</param>
        /// <param name="countryOfResidence">countryOfResidence.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="surname">surname.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="profession">profession.</param>
        /// <param name="initials">initials.</param>
        /// <param name="nationality">nationality.</param>
        /// <param name="uberLinks">uberLinks.</param>
        public WindeedCipcNaturalMember(int uniqueDirectorId = default(int), WindeedCipcCipcLookup countryOfOrigin = default(WindeedCipcCipcLookup), DateTime? appointmentDate = default(DateTime?), DateTime? resignationDate = default(DateTime?), double? memberSizePercentage = default(double?), double? memberContribution = default(double?), WindeedCipcCipcLookup status = default(WindeedCipcCipcLookup), WindeedCipcBasicAddress postalAddress = default(WindeedCipcBasicAddress), WindeedCipcBasicAddress residentialAddress = default(WindeedCipcBasicAddress), WindeedCipcCipcLookup directorType = default(WindeedCipcCipcLookup), WindeedCipcCipcLookup countryOfResidence = default(WindeedCipcCipcLookup), DateTime? dateOfBirth = default(DateTime?), string firstName = default(string), string surname = default(string), string idNumber = default(string), string profession = default(string), string initials = default(string), WindeedCipcCipcLookup nationality = default(WindeedCipcCipcLookup), List<WindeedCipcNaturalUberLink> uberLinks = default(List<WindeedCipcNaturalUberLink>))
        {
            this.AppointmentDate = appointmentDate;
            this.ResignationDate = resignationDate;
            this.MemberSizePercentage = memberSizePercentage;
            this.MemberContribution = memberContribution;
            this.DateOfBirth = dateOfBirth;
            this.FirstName = firstName;
            this.Surname = surname;
            this.IdNumber = idNumber;
            this.Profession = profession;
            this.Initials = initials;
            this.UberLinks = uberLinks;
            this.UniqueDirectorId = uniqueDirectorId;
            this.CountryOfOrigin = countryOfOrigin;
            this.AppointmentDate = appointmentDate;
            this.ResignationDate = resignationDate;
            this.MemberSizePercentage = memberSizePercentage;
            this.MemberContribution = memberContribution;
            this.Status = status;
            this.PostalAddress = postalAddress;
            this.ResidentialAddress = residentialAddress;
            this.DirectorType = directorType;
            this.CountryOfResidence = countryOfResidence;
            this.DateOfBirth = dateOfBirth;
            this.FirstName = firstName;
            this.Surname = surname;
            this.IdNumber = idNumber;
            this.Profession = profession;
            this.Initials = initials;
            this.Nationality = nationality;
            this.UberLinks = uberLinks;
        }

        /// <summary>
        /// Gets or Sets UniqueDirectorId
        /// </summary>
        [DataMember(Name="uniqueDirectorId", EmitDefaultValue=false)]
        public int UniqueDirectorId { get; set; }

        /// <summary>
        /// Gets or Sets CountryOfOrigin
        /// </summary>
        [DataMember(Name="countryOfOrigin", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup CountryOfOrigin { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentDate
        /// </summary>
        [DataMember(Name="appointmentDate", EmitDefaultValue=true)]
        public DateTime? AppointmentDate { get; set; }

        /// <summary>
        /// Gets or Sets ResignationDate
        /// </summary>
        [DataMember(Name="resignationDate", EmitDefaultValue=true)]
        public DateTime? ResignationDate { get; set; }

        /// <summary>
        /// Gets or Sets MemberSizePercentage
        /// </summary>
        [DataMember(Name="memberSizePercentage", EmitDefaultValue=true)]
        public double? MemberSizePercentage { get; set; }

        /// <summary>
        /// Gets or Sets MemberContribution
        /// </summary>
        [DataMember(Name="memberContribution", EmitDefaultValue=true)]
        public double? MemberContribution { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Status { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="postalAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress PostalAddress { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialAddress
        /// </summary>
        [DataMember(Name="residentialAddress", EmitDefaultValue=false)]
        public WindeedCipcBasicAddress ResidentialAddress { get; set; }

        /// <summary>
        /// Gets or Sets DirectorType
        /// </summary>
        [DataMember(Name="directorType", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup DirectorType { get; set; }

        /// <summary>
        /// Gets or Sets CountryOfResidence
        /// </summary>
        [DataMember(Name="countryOfResidence", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup CountryOfResidence { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Gets or Sets Profession
        /// </summary>
        [DataMember(Name="profession", EmitDefaultValue=true)]
        public string Profession { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials", EmitDefaultValue=true)]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public WindeedCipcCipcLookup Nationality { get; set; }

        /// <summary>
        /// Gets or Sets UberLinks
        /// </summary>
        [DataMember(Name="uberLinks", EmitDefaultValue=true)]
        public List<WindeedCipcNaturalUberLink> UberLinks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcNaturalMember {\n");
            sb.Append("  UniqueDirectorId: ").Append(UniqueDirectorId).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  AppointmentDate: ").Append(AppointmentDate).Append("\n");
            sb.Append("  ResignationDate: ").Append(ResignationDate).Append("\n");
            sb.Append("  MemberSizePercentage: ").Append(MemberSizePercentage).Append("\n");
            sb.Append("  MemberContribution: ").Append(MemberContribution).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("  ResidentialAddress: ").Append(ResidentialAddress).Append("\n");
            sb.Append("  DirectorType: ").Append(DirectorType).Append("\n");
            sb.Append("  CountryOfResidence: ").Append(CountryOfResidence).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  Profession: ").Append(Profession).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  UberLinks: ").Append(UberLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcNaturalMember);
        }

        /// <summary>
        /// Returns true if WindeedCipcNaturalMember instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcNaturalMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcNaturalMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UniqueDirectorId == input.UniqueDirectorId ||
                    (this.UniqueDirectorId != null &&
                    this.UniqueDirectorId.Equals(input.UniqueDirectorId))
                ) && 
                (
                    this.CountryOfOrigin == input.CountryOfOrigin ||
                    (this.CountryOfOrigin != null &&
                    this.CountryOfOrigin.Equals(input.CountryOfOrigin))
                ) && 
                (
                    this.AppointmentDate == input.AppointmentDate ||
                    (this.AppointmentDate != null &&
                    this.AppointmentDate.Equals(input.AppointmentDate))
                ) && 
                (
                    this.ResignationDate == input.ResignationDate ||
                    (this.ResignationDate != null &&
                    this.ResignationDate.Equals(input.ResignationDate))
                ) && 
                (
                    this.MemberSizePercentage == input.MemberSizePercentage ||
                    (this.MemberSizePercentage != null &&
                    this.MemberSizePercentage.Equals(input.MemberSizePercentage))
                ) && 
                (
                    this.MemberContribution == input.MemberContribution ||
                    (this.MemberContribution != null &&
                    this.MemberContribution.Equals(input.MemberContribution))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                ) && 
                (
                    this.ResidentialAddress == input.ResidentialAddress ||
                    (this.ResidentialAddress != null &&
                    this.ResidentialAddress.Equals(input.ResidentialAddress))
                ) && 
                (
                    this.DirectorType == input.DirectorType ||
                    (this.DirectorType != null &&
                    this.DirectorType.Equals(input.DirectorType))
                ) && 
                (
                    this.CountryOfResidence == input.CountryOfResidence ||
                    (this.CountryOfResidence != null &&
                    this.CountryOfResidence.Equals(input.CountryOfResidence))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.Profession == input.Profession ||
                    (this.Profession != null &&
                    this.Profession.Equals(input.Profession))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.UberLinks == input.UberLinks ||
                    this.UberLinks != null &&
                    input.UberLinks != null &&
                    this.UberLinks.SequenceEqual(input.UberLinks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UniqueDirectorId != null)
                    hashCode = hashCode * 59 + this.UniqueDirectorId.GetHashCode();
                if (this.CountryOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryOfOrigin.GetHashCode();
                if (this.AppointmentDate != null)
                    hashCode = hashCode * 59 + this.AppointmentDate.GetHashCode();
                if (this.ResignationDate != null)
                    hashCode = hashCode * 59 + this.ResignationDate.GetHashCode();
                if (this.MemberSizePercentage != null)
                    hashCode = hashCode * 59 + this.MemberSizePercentage.GetHashCode();
                if (this.MemberContribution != null)
                    hashCode = hashCode * 59 + this.MemberContribution.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                if (this.ResidentialAddress != null)
                    hashCode = hashCode * 59 + this.ResidentialAddress.GetHashCode();
                if (this.DirectorType != null)
                    hashCode = hashCode * 59 + this.DirectorType.GetHashCode();
                if (this.CountryOfResidence != null)
                    hashCode = hashCode * 59 + this.CountryOfResidence.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.Profession != null)
                    hashCode = hashCode * 59 + this.Profession.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.UberLinks != null)
                    hashCode = hashCode * 59 + this.UberLinks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
