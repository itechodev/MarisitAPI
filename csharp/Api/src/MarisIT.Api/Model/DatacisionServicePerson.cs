/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// DatacisionServicePerson
    /// </summary>
    [DataContract]
    public partial class DatacisionServicePerson :  IEquatable<DatacisionServicePerson>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public DatacisionServiceGender? Gender { get; set; }
        /// <summary>
        /// Gets or Sets MaritalStatus
        /// </summary>
        [DataMember(Name="maritalStatus", EmitDefaultValue=false)]
        public DatacisionServiceMaritalStatus? MaritalStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatacisionServicePerson" /> class.
        /// </summary>
        /// <param name="addresses">addresses.</param>
        /// <param name="age">age.</param>
        /// <param name="birthDate">birthDate.</param>
        /// <param name="context">context.</param>
        /// <param name="deceasedDate">deceasedDate.</param>
        /// <param name="emails">emails.</param>
        /// <param name="employments">employments.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="idNumber">idNumber.</param>
        /// <param name="maritalStatus">maritalStatus.</param>
        /// <param name="optOut">optOut.</param>
        /// <param name="phones">phones.</param>
        /// <param name="publicDomainIndicators">publicDomainIndicators.</param>
        /// <param name="publicScore">publicScore.</param>
        /// <param name="reports">reports.</param>
        /// <param name="search">search.</param>
        /// <param name="surname">surname.</param>
        /// <param name="title">title.</param>
        public DatacisionServicePerson(List<DatacisionServiceAddress> addresses = default(List<DatacisionServiceAddress>), int? age = default(int?), DateTime? birthDate = default(DateTime?), DatacisionServiceRequestContext context = default(DatacisionServiceRequestContext), DateTime? deceasedDate = default(DateTime?), List<DatacisionServiceEmail> emails = default(List<DatacisionServiceEmail>), List<DatacisionServiceEmployment> employments = default(List<DatacisionServiceEmployment>), string firstName = default(string), DatacisionServiceGender? gender = default(DatacisionServiceGender?), string idNumber = default(string), DatacisionServiceMaritalStatus? maritalStatus = default(DatacisionServiceMaritalStatus?), int? optOut = default(int?), List<DatacisionServicePhone> phones = default(List<DatacisionServicePhone>), List<DatacisionServicePublicDomainIndicator> publicDomainIndicators = default(List<DatacisionServicePublicDomainIndicator>), int? publicScore = default(int?), List<DatacisionServiceReport> reports = default(List<DatacisionServiceReport>), DatacisionServicePersonSearch search = default(DatacisionServicePersonSearch), string surname = default(string), string title = default(string))
        {
            this.Addresses = addresses;
            this.Age = age;
            this.BirthDate = birthDate;
            this.DeceasedDate = deceasedDate;
            this.Emails = emails;
            this.Employments = employments;
            this.FirstName = firstName;
            this.IdNumber = idNumber;
            this.OptOut = optOut;
            this.Phones = phones;
            this.PublicDomainIndicators = publicDomainIndicators;
            this.PublicScore = publicScore;
            this.Reports = reports;
            this.Surname = surname;
            this.Title = title;
            this.Addresses = addresses;
            this.Age = age;
            this.BirthDate = birthDate;
            this.Context = context;
            this.DeceasedDate = deceasedDate;
            this.Emails = emails;
            this.Employments = employments;
            this.FirstName = firstName;
            this.Gender = gender;
            this.IdNumber = idNumber;
            this.MaritalStatus = maritalStatus;
            this.OptOut = optOut;
            this.Phones = phones;
            this.PublicDomainIndicators = publicDomainIndicators;
            this.PublicScore = publicScore;
            this.Reports = reports;
            this.Search = search;
            this.Surname = surname;
            this.Title = title;
        }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=true)]
        public List<DatacisionServiceAddress> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=true)]
        public int? Age { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate", EmitDefaultValue=true)]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public DatacisionServiceRequestContext Context { get; set; }

        /// <summary>
        /// Gets or Sets DeceasedDate
        /// </summary>
        [DataMember(Name="deceasedDate", EmitDefaultValue=true)]
        public DateTime? DeceasedDate { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [DataMember(Name="emails", EmitDefaultValue=true)]
        public List<DatacisionServiceEmail> Emails { get; set; }

        /// <summary>
        /// Gets or Sets Employments
        /// </summary>
        [DataMember(Name="employments", EmitDefaultValue=true)]
        public List<DatacisionServiceEmployment> Employments { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }


        /// <summary>
        /// Gets or Sets IdNumber
        /// </summary>
        [DataMember(Name="idNumber", EmitDefaultValue=true)]
        public string IdNumber { get; set; }


        /// <summary>
        /// Gets or Sets OptOut
        /// </summary>
        [DataMember(Name="optOut", EmitDefaultValue=true)]
        public int? OptOut { get; set; }

        /// <summary>
        /// Gets or Sets Phones
        /// </summary>
        [DataMember(Name="phones", EmitDefaultValue=true)]
        public List<DatacisionServicePhone> Phones { get; set; }

        /// <summary>
        /// Gets or Sets PublicDomainIndicators
        /// </summary>
        [DataMember(Name="publicDomainIndicators", EmitDefaultValue=true)]
        public List<DatacisionServicePublicDomainIndicator> PublicDomainIndicators { get; set; }

        /// <summary>
        /// Gets or Sets PublicScore
        /// </summary>
        [DataMember(Name="publicScore", EmitDefaultValue=true)]
        public int? PublicScore { get; set; }

        /// <summary>
        /// Gets or Sets Reports
        /// </summary>
        [DataMember(Name="reports", EmitDefaultValue=true)]
        public List<DatacisionServiceReport> Reports { get; set; }

        /// <summary>
        /// Gets or Sets Search
        /// </summary>
        [DataMember(Name="search", EmitDefaultValue=false)]
        public DatacisionServicePersonSearch Search { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatacisionServicePerson {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  DeceasedDate: ").Append(DeceasedDate).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  Employments: ").Append(Employments).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  PublicDomainIndicators: ").Append(PublicDomainIndicators).Append("\n");
            sb.Append("  PublicScore: ").Append(PublicScore).Append("\n");
            sb.Append("  Reports: ").Append(Reports).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DatacisionServicePerson);
        }

        /// <summary>
        /// Returns true if DatacisionServicePerson instances are equal
        /// </summary>
        /// <param name="input">Instance of DatacisionServicePerson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatacisionServicePerson input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.DeceasedDate == input.DeceasedDate ||
                    (this.DeceasedDate != null &&
                    this.DeceasedDate.Equals(input.DeceasedDate))
                ) && 
                (
                    this.Emails == input.Emails ||
                    this.Emails != null &&
                    input.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails)
                ) && 
                (
                    this.Employments == input.Employments ||
                    this.Employments != null &&
                    input.Employments != null &&
                    this.Employments.SequenceEqual(input.Employments)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    (this.MaritalStatus != null &&
                    this.MaritalStatus.Equals(input.MaritalStatus))
                ) && 
                (
                    this.OptOut == input.OptOut ||
                    (this.OptOut != null &&
                    this.OptOut.Equals(input.OptOut))
                ) && 
                (
                    this.Phones == input.Phones ||
                    this.Phones != null &&
                    input.Phones != null &&
                    this.Phones.SequenceEqual(input.Phones)
                ) && 
                (
                    this.PublicDomainIndicators == input.PublicDomainIndicators ||
                    this.PublicDomainIndicators != null &&
                    input.PublicDomainIndicators != null &&
                    this.PublicDomainIndicators.SequenceEqual(input.PublicDomainIndicators)
                ) && 
                (
                    this.PublicScore == input.PublicScore ||
                    (this.PublicScore != null &&
                    this.PublicScore.Equals(input.PublicScore))
                ) && 
                (
                    this.Reports == input.Reports ||
                    this.Reports != null &&
                    input.Reports != null &&
                    this.Reports.SequenceEqual(input.Reports)
                ) && 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.DeceasedDate != null)
                    hashCode = hashCode * 59 + this.DeceasedDate.GetHashCode();
                if (this.Emails != null)
                    hashCode = hashCode * 59 + this.Emails.GetHashCode();
                if (this.Employments != null)
                    hashCode = hashCode * 59 + this.Employments.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.MaritalStatus != null)
                    hashCode = hashCode * 59 + this.MaritalStatus.GetHashCode();
                if (this.OptOut != null)
                    hashCode = hashCode * 59 + this.OptOut.GetHashCode();
                if (this.Phones != null)
                    hashCode = hashCode * 59 + this.Phones.GetHashCode();
                if (this.PublicDomainIndicators != null)
                    hashCode = hashCode * 59 + this.PublicDomainIndicators.GetHashCode();
                if (this.PublicScore != null)
                    hashCode = hashCode * 59 + this.PublicScore.GetHashCode();
                if (this.Reports != null)
                    hashCode = hashCode * 59 + this.Reports.GetHashCode();
                if (this.Search != null)
                    hashCode = hashCode * 59 + this.Search.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
