/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialEmpOfCapital
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialEmpOfCapital :  IEquatable<TransunionCommercialEmpOfCapital>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialEmpOfCapital" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="empOfCapTotal">empOfCapTotal.</param>
        /// <param name="empOfCapItem">empOfCapItem.</param>
        /// <param name="empOfCapAmt">empOfCapAmt.</param>
        public TransunionCommercialEmpOfCapital(string majorProduct = default(string), string empOfCapTotal = default(string), List<string> empOfCapItem = default(List<string>), List<string> empOfCapAmt = default(List<string>))
        {
            this.MajorProduct = majorProduct;
            this.EmpOfCapTotal = empOfCapTotal;
            this.EmpOfCapItem = empOfCapItem;
            this.EmpOfCapAmt = empOfCapAmt;
            this.MajorProduct = majorProduct;
            this.EmpOfCapTotal = empOfCapTotal;
            this.EmpOfCapItem = empOfCapItem;
            this.EmpOfCapAmt = empOfCapAmt;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets EmpOfCapTotal
        /// </summary>
        [DataMember(Name="empOfCapTotal", EmitDefaultValue=true)]
        public string EmpOfCapTotal { get; set; }

        /// <summary>
        /// Gets or Sets EmpOfCapItem
        /// </summary>
        [DataMember(Name="empOfCapItem", EmitDefaultValue=true)]
        public List<string> EmpOfCapItem { get; set; }

        /// <summary>
        /// Gets or Sets EmpOfCapAmt
        /// </summary>
        [DataMember(Name="empOfCapAmt", EmitDefaultValue=true)]
        public List<string> EmpOfCapAmt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialEmpOfCapital {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  EmpOfCapTotal: ").Append(EmpOfCapTotal).Append("\n");
            sb.Append("  EmpOfCapItem: ").Append(EmpOfCapItem).Append("\n");
            sb.Append("  EmpOfCapAmt: ").Append(EmpOfCapAmt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialEmpOfCapital);
        }

        /// <summary>
        /// Returns true if TransunionCommercialEmpOfCapital instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialEmpOfCapital to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialEmpOfCapital input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.EmpOfCapTotal == input.EmpOfCapTotal ||
                    (this.EmpOfCapTotal != null &&
                    this.EmpOfCapTotal.Equals(input.EmpOfCapTotal))
                ) && 
                (
                    this.EmpOfCapItem == input.EmpOfCapItem ||
                    this.EmpOfCapItem != null &&
                    input.EmpOfCapItem != null &&
                    this.EmpOfCapItem.SequenceEqual(input.EmpOfCapItem)
                ) && 
                (
                    this.EmpOfCapAmt == input.EmpOfCapAmt ||
                    this.EmpOfCapAmt != null &&
                    input.EmpOfCapAmt != null &&
                    this.EmpOfCapAmt.SequenceEqual(input.EmpOfCapAmt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.EmpOfCapTotal != null)
                    hashCode = hashCode * 59 + this.EmpOfCapTotal.GetHashCode();
                if (this.EmpOfCapItem != null)
                    hashCode = hashCode * 59 + this.EmpOfCapItem.GetHashCode();
                if (this.EmpOfCapAmt != null)
                    hashCode = hashCode * 59 + this.EmpOfCapAmt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
