/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialBusinessBenchmarkBB
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialBusinessBenchmarkBB :  IEquatable<TransunionCommercialBusinessBenchmarkBB>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialBusinessBenchmarkBB" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="rpTDate">rpTDate.</param>
        /// <param name="status">status.</param>
        /// <param name="smEScore">smEScore.</param>
        /// <param name="avgScore">avgScore.</param>
        /// <param name="rating">rating.</param>
        /// <param name="usSicCode">usSicCode.</param>
        /// <param name="saSicCode">saSicCode.</param>
        /// <param name="sicDesc">sicDesc.</param>
        /// <param name="businessBenchmarkDetail">businessBenchmarkDetail.</param>
        /// <param name="sicAvailable">sicAvailable.</param>
        public TransunionCommercialBusinessBenchmarkBB(string majorProduct = default(string), string rpTDate = default(string), string status = default(string), string smEScore = default(string), string avgScore = default(string), string rating = default(string), string usSicCode = default(string), string saSicCode = default(string), string sicDesc = default(string), List<TransunionCommercialBusinessBenchmarkDetail> businessBenchmarkDetail = default(List<TransunionCommercialBusinessBenchmarkDetail>), string sicAvailable = default(string))
        {
            this.MajorProduct = majorProduct;
            this.RpTDate = rpTDate;
            this.Status = status;
            this.SmEScore = smEScore;
            this.AvgScore = avgScore;
            this.Rating = rating;
            this.UsSicCode = usSicCode;
            this.SaSicCode = saSicCode;
            this.SicDesc = sicDesc;
            this.BusinessBenchmarkDetail = businessBenchmarkDetail;
            this.SicAvailable = sicAvailable;
            this.MajorProduct = majorProduct;
            this.RpTDate = rpTDate;
            this.Status = status;
            this.SmEScore = smEScore;
            this.AvgScore = avgScore;
            this.Rating = rating;
            this.UsSicCode = usSicCode;
            this.SaSicCode = saSicCode;
            this.SicDesc = sicDesc;
            this.BusinessBenchmarkDetail = businessBenchmarkDetail;
            this.SicAvailable = sicAvailable;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets RpTDate
        /// </summary>
        [DataMember(Name="rpT_Date", EmitDefaultValue=true)]
        public string RpTDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SmEScore
        /// </summary>
        [DataMember(Name="smE_Score", EmitDefaultValue=true)]
        public string SmEScore { get; set; }

        /// <summary>
        /// Gets or Sets AvgScore
        /// </summary>
        [DataMember(Name="avg_Score", EmitDefaultValue=true)]
        public string AvgScore { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public string Rating { get; set; }

        /// <summary>
        /// Gets or Sets UsSicCode
        /// </summary>
        [DataMember(Name="usSicCode", EmitDefaultValue=true)]
        public string UsSicCode { get; set; }

        /// <summary>
        /// Gets or Sets SaSicCode
        /// </summary>
        [DataMember(Name="saSicCode", EmitDefaultValue=true)]
        public string SaSicCode { get; set; }

        /// <summary>
        /// Gets or Sets SicDesc
        /// </summary>
        [DataMember(Name="sicDesc", EmitDefaultValue=true)]
        public string SicDesc { get; set; }

        /// <summary>
        /// Gets or Sets BusinessBenchmarkDetail
        /// </summary>
        [DataMember(Name="businessBenchmarkDetail", EmitDefaultValue=true)]
        public List<TransunionCommercialBusinessBenchmarkDetail> BusinessBenchmarkDetail { get; set; }

        /// <summary>
        /// Gets or Sets SicAvailable
        /// </summary>
        [DataMember(Name="sicAvailable", EmitDefaultValue=true)]
        public string SicAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialBusinessBenchmarkBB {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  RpTDate: ").Append(RpTDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SmEScore: ").Append(SmEScore).Append("\n");
            sb.Append("  AvgScore: ").Append(AvgScore).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  UsSicCode: ").Append(UsSicCode).Append("\n");
            sb.Append("  SaSicCode: ").Append(SaSicCode).Append("\n");
            sb.Append("  SicDesc: ").Append(SicDesc).Append("\n");
            sb.Append("  BusinessBenchmarkDetail: ").Append(BusinessBenchmarkDetail).Append("\n");
            sb.Append("  SicAvailable: ").Append(SicAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialBusinessBenchmarkBB);
        }

        /// <summary>
        /// Returns true if TransunionCommercialBusinessBenchmarkBB instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialBusinessBenchmarkBB to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialBusinessBenchmarkBB input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.RpTDate == input.RpTDate ||
                    (this.RpTDate != null &&
                    this.RpTDate.Equals(input.RpTDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SmEScore == input.SmEScore ||
                    (this.SmEScore != null &&
                    this.SmEScore.Equals(input.SmEScore))
                ) && 
                (
                    this.AvgScore == input.AvgScore ||
                    (this.AvgScore != null &&
                    this.AvgScore.Equals(input.AvgScore))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.UsSicCode == input.UsSicCode ||
                    (this.UsSicCode != null &&
                    this.UsSicCode.Equals(input.UsSicCode))
                ) && 
                (
                    this.SaSicCode == input.SaSicCode ||
                    (this.SaSicCode != null &&
                    this.SaSicCode.Equals(input.SaSicCode))
                ) && 
                (
                    this.SicDesc == input.SicDesc ||
                    (this.SicDesc != null &&
                    this.SicDesc.Equals(input.SicDesc))
                ) && 
                (
                    this.BusinessBenchmarkDetail == input.BusinessBenchmarkDetail ||
                    this.BusinessBenchmarkDetail != null &&
                    input.BusinessBenchmarkDetail != null &&
                    this.BusinessBenchmarkDetail.SequenceEqual(input.BusinessBenchmarkDetail)
                ) && 
                (
                    this.SicAvailable == input.SicAvailable ||
                    (this.SicAvailable != null &&
                    this.SicAvailable.Equals(input.SicAvailable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.RpTDate != null)
                    hashCode = hashCode * 59 + this.RpTDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SmEScore != null)
                    hashCode = hashCode * 59 + this.SmEScore.GetHashCode();
                if (this.AvgScore != null)
                    hashCode = hashCode * 59 + this.AvgScore.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.UsSicCode != null)
                    hashCode = hashCode * 59 + this.UsSicCode.GetHashCode();
                if (this.SaSicCode != null)
                    hashCode = hashCode * 59 + this.SaSicCode.GetHashCode();
                if (this.SicDesc != null)
                    hashCode = hashCode * 59 + this.SicDesc.GetHashCode();
                if (this.BusinessBenchmarkDetail != null)
                    hashCode = hashCode * 59 + this.BusinessBenchmarkDetail.GetHashCode();
                if (this.SicAvailable != null)
                    hashCode = hashCode * 59 + this.SicAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
