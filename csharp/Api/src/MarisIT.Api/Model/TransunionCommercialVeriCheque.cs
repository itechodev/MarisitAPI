/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialVeriCheque
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialVeriCheque :  IEquatable<TransunionCommercialVeriCheque>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialVeriCheque" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="numberFound">numberFound.</param>
        /// <param name="veriRegisterName">veriRegisterName.</param>
        /// <param name="address">address.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="reason">reason.</param>
        /// <param name="veriDate">veriDate.</param>
        /// <param name="veriAmount">veriAmount.</param>
        /// <param name="message">message.</param>
        public TransunionCommercialVeriCheque(string majorProduct = default(string), string numberFound = default(string), string veriRegisterName = default(string), string address = default(string), string suburb = default(string), string city = default(string), string country = default(string), string postCode = default(string), string reason = default(string), string veriDate = default(string), string veriAmount = default(string), string message = default(string))
        {
            this.MajorProduct = majorProduct;
            this.NumberFound = numberFound;
            this.VeriRegisterName = veriRegisterName;
            this.Address = address;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.Reason = reason;
            this.VeriDate = veriDate;
            this.VeriAmount = veriAmount;
            this.Message = message;
            this.MajorProduct = majorProduct;
            this.NumberFound = numberFound;
            this.VeriRegisterName = veriRegisterName;
            this.Address = address;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.Reason = reason;
            this.VeriDate = veriDate;
            this.VeriAmount = veriAmount;
            this.Message = message;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets NumberFound
        /// </summary>
        [DataMember(Name="numberFound", EmitDefaultValue=true)]
        public string NumberFound { get; set; }

        /// <summary>
        /// Gets or Sets VeriRegisterName
        /// </summary>
        [DataMember(Name="veriRegisterName", EmitDefaultValue=true)]
        public string VeriRegisterName { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=true)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets VeriDate
        /// </summary>
        [DataMember(Name="veriDate", EmitDefaultValue=true)]
        public string VeriDate { get; set; }

        /// <summary>
        /// Gets or Sets VeriAmount
        /// </summary>
        [DataMember(Name="veriAmount", EmitDefaultValue=true)]
        public string VeriAmount { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialVeriCheque {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  NumberFound: ").Append(NumberFound).Append("\n");
            sb.Append("  VeriRegisterName: ").Append(VeriRegisterName).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  VeriDate: ").Append(VeriDate).Append("\n");
            sb.Append("  VeriAmount: ").Append(VeriAmount).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialVeriCheque);
        }

        /// <summary>
        /// Returns true if TransunionCommercialVeriCheque instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialVeriCheque to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialVeriCheque input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.NumberFound == input.NumberFound ||
                    (this.NumberFound != null &&
                    this.NumberFound.Equals(input.NumberFound))
                ) && 
                (
                    this.VeriRegisterName == input.VeriRegisterName ||
                    (this.VeriRegisterName != null &&
                    this.VeriRegisterName.Equals(input.VeriRegisterName))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.VeriDate == input.VeriDate ||
                    (this.VeriDate != null &&
                    this.VeriDate.Equals(input.VeriDate))
                ) && 
                (
                    this.VeriAmount == input.VeriAmount ||
                    (this.VeriAmount != null &&
                    this.VeriAmount.Equals(input.VeriAmount))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.NumberFound != null)
                    hashCode = hashCode * 59 + this.NumberFound.GetHashCode();
                if (this.VeriRegisterName != null)
                    hashCode = hashCode * 59 + this.VeriRegisterName.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.VeriDate != null)
                    hashCode = hashCode * 59 + this.VeriDate.GetHashCode();
                if (this.VeriAmount != null)
                    hashCode = hashCode * 59 + this.VeriAmount.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
