/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// VerifyResultsCriminalEntry
    /// </summary>
    [DataContract]
    public partial class VerifyResultsCriminalEntry :  IEquatable<VerifyResultsCriminalEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyResultsCriminalEntry" /> class.
        /// </summary>
        /// <param name="caseNumber">caseNumber.</param>
        /// <param name="date">date.</param>
        /// <param name="id">id.</param>
        /// <param name="note">note.</param>
        /// <param name="offence">offence.</param>
        /// <param name="station">station.</param>
        /// <param name="stepId">stepId.</param>
        public VerifyResultsCriminalEntry(string caseNumber = default(string), string date = default(string), int? id = default(int?), string note = default(string), string offence = default(string), string station = default(string), int stepId = default(int))
        {
            this.CaseNumber = caseNumber;
            this.Date = date;
            this.Id = id;
            this.Note = note;
            this.Offence = offence;
            this.Station = station;
            this.CaseNumber = caseNumber;
            this.Date = date;
            this.Id = id;
            this.Note = note;
            this.Offence = offence;
            this.Station = station;
            this.StepId = stepId;
        }

        /// <summary>
        /// Gets or Sets CaseNumber
        /// </summary>
        [DataMember(Name="caseNumber", EmitDefaultValue=true)]
        public string CaseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=true)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Offence
        /// </summary>
        [DataMember(Name="offence", EmitDefaultValue=true)]
        public string Offence { get; set; }

        /// <summary>
        /// Gets or Sets Station
        /// </summary>
        [DataMember(Name="station", EmitDefaultValue=true)]
        public string Station { get; set; }

        /// <summary>
        /// Gets or Sets StepId
        /// </summary>
        [DataMember(Name="stepId", EmitDefaultValue=false)]
        public int StepId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyResultsCriminalEntry {\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Offence: ").Append(Offence).Append("\n");
            sb.Append("  Station: ").Append(Station).Append("\n");
            sb.Append("  StepId: ").Append(StepId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyResultsCriminalEntry);
        }

        /// <summary>
        /// Returns true if VerifyResultsCriminalEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyResultsCriminalEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyResultsCriminalEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CaseNumber == input.CaseNumber ||
                    (this.CaseNumber != null &&
                    this.CaseNumber.Equals(input.CaseNumber))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Offence == input.Offence ||
                    (this.Offence != null &&
                    this.Offence.Equals(input.Offence))
                ) && 
                (
                    this.Station == input.Station ||
                    (this.Station != null &&
                    this.Station.Equals(input.Station))
                ) && 
                (
                    this.StepId == input.StepId ||
                    (this.StepId != null &&
                    this.StepId.Equals(input.StepId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaseNumber != null)
                    hashCode = hashCode * 59 + this.CaseNumber.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Offence != null)
                    hashCode = hashCode * 59 + this.Offence.GetHashCode();
                if (this.Station != null)
                    hashCode = hashCode * 59 + this.Station.GetHashCode();
                if (this.StepId != null)
                    hashCode = hashCode * 59 + this.StepId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
