/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsPaymentGAP
    /// </summary>
    [DataContract]
    public partial class XdsPaymentGAP :  IEquatable<XdsPaymentGAP>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsPaymentGAP" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="day1">day1.</param>
        /// <param name="day2">day2.</param>
        /// <param name="day3">day3.</param>
        /// <param name="day4">day4.</param>
        /// <param name="day5">day5.</param>
        /// <param name="day1Percent">day1Percent.</param>
        /// <param name="day2Percent">day2Percent.</param>
        /// <param name="day3Percent">day3Percent.</param>
        /// <param name="day4Percent">day4Percent.</param>
        /// <param name="day5Percent">day5Percent.</param>
        /// <param name="exclusionReason">exclusionReason.</param>
        /// <param name="reliabilityGroup">reliabilityGroup.</param>
        public XdsPaymentGAP(string displayText = default(string), string day1 = default(string), string day2 = default(string), string day3 = default(string), string day4 = default(string), string day5 = default(string), string day1Percent = default(string), string day2Percent = default(string), string day3Percent = default(string), string day4Percent = default(string), string day5Percent = default(string), string exclusionReason = default(string), string reliabilityGroup = default(string))
        {
            this.DisplayText = displayText;
            this.Day1 = day1;
            this.Day2 = day2;
            this.Day3 = day3;
            this.Day4 = day4;
            this.Day5 = day5;
            this.Day1Percent = day1Percent;
            this.Day2Percent = day2Percent;
            this.Day3Percent = day3Percent;
            this.Day4Percent = day4Percent;
            this.Day5Percent = day5Percent;
            this.ExclusionReason = exclusionReason;
            this.ReliabilityGroup = reliabilityGroup;
            this.DisplayText = displayText;
            this.Day1 = day1;
            this.Day2 = day2;
            this.Day3 = day3;
            this.Day4 = day4;
            this.Day5 = day5;
            this.Day1Percent = day1Percent;
            this.Day2Percent = day2Percent;
            this.Day3Percent = day3Percent;
            this.Day4Percent = day4Percent;
            this.Day5Percent = day5Percent;
            this.ExclusionReason = exclusionReason;
            this.ReliabilityGroup = reliabilityGroup;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets Day1
        /// </summary>
        [DataMember(Name="day1", EmitDefaultValue=true)]
        public string Day1 { get; set; }

        /// <summary>
        /// Gets or Sets Day2
        /// </summary>
        [DataMember(Name="day2", EmitDefaultValue=true)]
        public string Day2 { get; set; }

        /// <summary>
        /// Gets or Sets Day3
        /// </summary>
        [DataMember(Name="day3", EmitDefaultValue=true)]
        public string Day3 { get; set; }

        /// <summary>
        /// Gets or Sets Day4
        /// </summary>
        [DataMember(Name="day4", EmitDefaultValue=true)]
        public string Day4 { get; set; }

        /// <summary>
        /// Gets or Sets Day5
        /// </summary>
        [DataMember(Name="day5", EmitDefaultValue=true)]
        public string Day5 { get; set; }

        /// <summary>
        /// Gets or Sets Day1Percent
        /// </summary>
        [DataMember(Name="day1Percent", EmitDefaultValue=true)]
        public string Day1Percent { get; set; }

        /// <summary>
        /// Gets or Sets Day2Percent
        /// </summary>
        [DataMember(Name="day2Percent", EmitDefaultValue=true)]
        public string Day2Percent { get; set; }

        /// <summary>
        /// Gets or Sets Day3Percent
        /// </summary>
        [DataMember(Name="day3Percent", EmitDefaultValue=true)]
        public string Day3Percent { get; set; }

        /// <summary>
        /// Gets or Sets Day4Percent
        /// </summary>
        [DataMember(Name="day4Percent", EmitDefaultValue=true)]
        public string Day4Percent { get; set; }

        /// <summary>
        /// Gets or Sets Day5Percent
        /// </summary>
        [DataMember(Name="day5Percent", EmitDefaultValue=true)]
        public string Day5Percent { get; set; }

        /// <summary>
        /// Gets or Sets ExclusionReason
        /// </summary>
        [DataMember(Name="exclusionReason", EmitDefaultValue=true)]
        public string ExclusionReason { get; set; }

        /// <summary>
        /// Gets or Sets ReliabilityGroup
        /// </summary>
        [DataMember(Name="reliabilityGroup", EmitDefaultValue=true)]
        public string ReliabilityGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsPaymentGAP {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  Day1: ").Append(Day1).Append("\n");
            sb.Append("  Day2: ").Append(Day2).Append("\n");
            sb.Append("  Day3: ").Append(Day3).Append("\n");
            sb.Append("  Day4: ").Append(Day4).Append("\n");
            sb.Append("  Day5: ").Append(Day5).Append("\n");
            sb.Append("  Day1Percent: ").Append(Day1Percent).Append("\n");
            sb.Append("  Day2Percent: ").Append(Day2Percent).Append("\n");
            sb.Append("  Day3Percent: ").Append(Day3Percent).Append("\n");
            sb.Append("  Day4Percent: ").Append(Day4Percent).Append("\n");
            sb.Append("  Day5Percent: ").Append(Day5Percent).Append("\n");
            sb.Append("  ExclusionReason: ").Append(ExclusionReason).Append("\n");
            sb.Append("  ReliabilityGroup: ").Append(ReliabilityGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsPaymentGAP);
        }

        /// <summary>
        /// Returns true if XdsPaymentGAP instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsPaymentGAP to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsPaymentGAP input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.Day1 == input.Day1 ||
                    (this.Day1 != null &&
                    this.Day1.Equals(input.Day1))
                ) && 
                (
                    this.Day2 == input.Day2 ||
                    (this.Day2 != null &&
                    this.Day2.Equals(input.Day2))
                ) && 
                (
                    this.Day3 == input.Day3 ||
                    (this.Day3 != null &&
                    this.Day3.Equals(input.Day3))
                ) && 
                (
                    this.Day4 == input.Day4 ||
                    (this.Day4 != null &&
                    this.Day4.Equals(input.Day4))
                ) && 
                (
                    this.Day5 == input.Day5 ||
                    (this.Day5 != null &&
                    this.Day5.Equals(input.Day5))
                ) && 
                (
                    this.Day1Percent == input.Day1Percent ||
                    (this.Day1Percent != null &&
                    this.Day1Percent.Equals(input.Day1Percent))
                ) && 
                (
                    this.Day2Percent == input.Day2Percent ||
                    (this.Day2Percent != null &&
                    this.Day2Percent.Equals(input.Day2Percent))
                ) && 
                (
                    this.Day3Percent == input.Day3Percent ||
                    (this.Day3Percent != null &&
                    this.Day3Percent.Equals(input.Day3Percent))
                ) && 
                (
                    this.Day4Percent == input.Day4Percent ||
                    (this.Day4Percent != null &&
                    this.Day4Percent.Equals(input.Day4Percent))
                ) && 
                (
                    this.Day5Percent == input.Day5Percent ||
                    (this.Day5Percent != null &&
                    this.Day5Percent.Equals(input.Day5Percent))
                ) && 
                (
                    this.ExclusionReason == input.ExclusionReason ||
                    (this.ExclusionReason != null &&
                    this.ExclusionReason.Equals(input.ExclusionReason))
                ) && 
                (
                    this.ReliabilityGroup == input.ReliabilityGroup ||
                    (this.ReliabilityGroup != null &&
                    this.ReliabilityGroup.Equals(input.ReliabilityGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.Day1 != null)
                    hashCode = hashCode * 59 + this.Day1.GetHashCode();
                if (this.Day2 != null)
                    hashCode = hashCode * 59 + this.Day2.GetHashCode();
                if (this.Day3 != null)
                    hashCode = hashCode * 59 + this.Day3.GetHashCode();
                if (this.Day4 != null)
                    hashCode = hashCode * 59 + this.Day4.GetHashCode();
                if (this.Day5 != null)
                    hashCode = hashCode * 59 + this.Day5.GetHashCode();
                if (this.Day1Percent != null)
                    hashCode = hashCode * 59 + this.Day1Percent.GetHashCode();
                if (this.Day2Percent != null)
                    hashCode = hashCode * 59 + this.Day2Percent.GetHashCode();
                if (this.Day3Percent != null)
                    hashCode = hashCode * 59 + this.Day3Percent.GetHashCode();
                if (this.Day4Percent != null)
                    hashCode = hashCode * 59 + this.Day4Percent.GetHashCode();
                if (this.Day5Percent != null)
                    hashCode = hashCode * 59 + this.Day5Percent.GetHashCode();
                if (this.ExclusionReason != null)
                    hashCode = hashCode * 59 + this.ExclusionReason.GetHashCode();
                if (this.ReliabilityGroup != null)
                    hashCode = hashCode * 59 + this.ReliabilityGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
