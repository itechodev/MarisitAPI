/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118FraudScoreFS01Part2
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118FraudScoreFS01Part2 :  IEquatable<TransunionConsumer118FraudScoreFS01Part2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118FraudScoreFS01Part2" /> class.
        /// </summary>
        /// <param name="recordSequence">recordSequence.</param>
        /// <param name="part">part.</param>
        /// <param name="partSequence">partSequence.</param>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="rating">rating.</param>
        /// <param name="ratingDescription">ratingDescription.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="reasonDescription">reasonDescription.</param>
        public TransunionConsumer118FraudScoreFS01Part2(string recordSequence = default(string), string part = default(string), string partSequence = default(string), string consumerNo = default(string), string rating = default(string), string ratingDescription = default(string), List<string> reasonCode = default(List<string>), List<string> reasonDescription = default(List<string>))
        {
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.Rating = rating;
            this.RatingDescription = ratingDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
            this.RecordSequence = recordSequence;
            this.Part = part;
            this.PartSequence = partSequence;
            this.ConsumerNo = consumerNo;
            this.Rating = rating;
            this.RatingDescription = ratingDescription;
            this.ReasonCode = reasonCode;
            this.ReasonDescription = reasonDescription;
        }

        /// <summary>
        /// Gets or Sets RecordSequence
        /// </summary>
        [DataMember(Name="recordSequence", EmitDefaultValue=true)]
        public string RecordSequence { get; set; }

        /// <summary>
        /// Gets or Sets Part
        /// </summary>
        [DataMember(Name="part", EmitDefaultValue=true)]
        public string Part { get; set; }

        /// <summary>
        /// Gets or Sets PartSequence
        /// </summary>
        [DataMember(Name="partSequence", EmitDefaultValue=true)]
        public string PartSequence { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public string Rating { get; set; }

        /// <summary>
        /// Gets or Sets RatingDescription
        /// </summary>
        [DataMember(Name="ratingDescription", EmitDefaultValue=true)]
        public string RatingDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="reasonCode", EmitDefaultValue=true)]
        public List<string> ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets ReasonDescription
        /// </summary>
        [DataMember(Name="reasonDescription", EmitDefaultValue=true)]
        public List<string> ReasonDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118FraudScoreFS01Part2 {\n");
            sb.Append("  RecordSequence: ").Append(RecordSequence).Append("\n");
            sb.Append("  Part: ").Append(Part).Append("\n");
            sb.Append("  PartSequence: ").Append(PartSequence).Append("\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RatingDescription: ").Append(RatingDescription).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonDescription: ").Append(ReasonDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118FraudScoreFS01Part2);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118FraudScoreFS01Part2 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118FraudScoreFS01Part2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118FraudScoreFS01Part2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordSequence == input.RecordSequence ||
                    (this.RecordSequence != null &&
                    this.RecordSequence.Equals(input.RecordSequence))
                ) && 
                (
                    this.Part == input.Part ||
                    (this.Part != null &&
                    this.Part.Equals(input.Part))
                ) && 
                (
                    this.PartSequence == input.PartSequence ||
                    (this.PartSequence != null &&
                    this.PartSequence.Equals(input.PartSequence))
                ) && 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.RatingDescription == input.RatingDescription ||
                    (this.RatingDescription != null &&
                    this.RatingDescription.Equals(input.RatingDescription))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    this.ReasonCode != null &&
                    input.ReasonCode != null &&
                    this.ReasonCode.SequenceEqual(input.ReasonCode)
                ) && 
                (
                    this.ReasonDescription == input.ReasonDescription ||
                    this.ReasonDescription != null &&
                    input.ReasonDescription != null &&
                    this.ReasonDescription.SequenceEqual(input.ReasonDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordSequence != null)
                    hashCode = hashCode * 59 + this.RecordSequence.GetHashCode();
                if (this.Part != null)
                    hashCode = hashCode * 59 + this.Part.GetHashCode();
                if (this.PartSequence != null)
                    hashCode = hashCode * 59 + this.PartSequence.GetHashCode();
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.RatingDescription != null)
                    hashCode = hashCode * 59 + this.RatingDescription.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.ReasonDescription != null)
                    hashCode = hashCode * 59 + this.ReasonDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
