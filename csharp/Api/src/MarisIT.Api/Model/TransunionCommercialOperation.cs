/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialOperation
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialOperation :  IEquatable<TransunionCommercialOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialOperation" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="date">date.</param>
        /// <param name="sicCode">sicCode.</param>
        /// <param name="sicDescription">sicDescription.</param>
        /// <param name="salesArea">salesArea.</param>
        /// <param name="divisionalName">divisionalName.</param>
        /// <param name="creditSales">creditSales.</param>
        /// <param name="creditSalesPerc">creditSalesPerc.</param>
        /// <param name="termsFrom">termsFrom.</param>
        /// <param name="termsTo">termsTo.</param>
        /// <param name="aveCollPeriod">aveCollPeriod.</param>
        /// <param name="cashSales">cashSales.</param>
        /// <param name="cashSalesPerc">cashSalesPerc.</param>
        /// <param name="opComment">opComment.</param>
        /// <param name="import">import.</param>
        /// <param name="importComment">importComment.</param>
        /// <param name="export">export.</param>
        /// <param name="exportComment">exportComment.</param>
        /// <param name="numberSalesStaff">numberSalesStaff.</param>
        /// <param name="numberWageStaff">numberWageStaff.</param>
        /// <param name="totalNumberStaff">totalNumberStaff.</param>
        /// <param name="premisesOwner">premisesOwner.</param>
        /// <param name="premisesLessor">premisesLessor.</param>
        /// <param name="premisesSize">premisesSize.</param>
        /// <param name="leasePeriodFrom">leasePeriodFrom.</param>
        /// <param name="leasePeriodTo">leasePeriodTo.</param>
        /// <param name="premisesRental">premisesRental.</param>
        /// <param name="saSicCode">saSicCode.</param>
        /// <param name="saSicDescription">saSicDescription.</param>
        public TransunionCommercialOperation(string majorProduct = default(string), string date = default(string), string sicCode = default(string), string sicDescription = default(string), string salesArea = default(string), string divisionalName = default(string), string creditSales = default(string), string creditSalesPerc = default(string), string termsFrom = default(string), string termsTo = default(string), string aveCollPeriod = default(string), string cashSales = default(string), string cashSalesPerc = default(string), List<string> opComment = default(List<string>), string import = default(string), string importComment = default(string), string export = default(string), string exportComment = default(string), string numberSalesStaff = default(string), string numberWageStaff = default(string), string totalNumberStaff = default(string), string premisesOwner = default(string), string premisesLessor = default(string), string premisesSize = default(string), string leasePeriodFrom = default(string), string leasePeriodTo = default(string), string premisesRental = default(string), string saSicCode = default(string), string saSicDescription = default(string))
        {
            this.MajorProduct = majorProduct;
            this.Date = date;
            this.SicCode = sicCode;
            this.SicDescription = sicDescription;
            this.SalesArea = salesArea;
            this.DivisionalName = divisionalName;
            this.CreditSales = creditSales;
            this.CreditSalesPerc = creditSalesPerc;
            this.TermsFrom = termsFrom;
            this.TermsTo = termsTo;
            this.AveCollPeriod = aveCollPeriod;
            this.CashSales = cashSales;
            this.CashSalesPerc = cashSalesPerc;
            this.OpComment = opComment;
            this.Import = import;
            this.ImportComment = importComment;
            this.Export = export;
            this.ExportComment = exportComment;
            this.NumberSalesStaff = numberSalesStaff;
            this.NumberWageStaff = numberWageStaff;
            this.TotalNumberStaff = totalNumberStaff;
            this.PremisesOwner = premisesOwner;
            this.PremisesLessor = premisesLessor;
            this.PremisesSize = premisesSize;
            this.LeasePeriodFrom = leasePeriodFrom;
            this.LeasePeriodTo = leasePeriodTo;
            this.PremisesRental = premisesRental;
            this.SaSicCode = saSicCode;
            this.SaSicDescription = saSicDescription;
            this.MajorProduct = majorProduct;
            this.Date = date;
            this.SicCode = sicCode;
            this.SicDescription = sicDescription;
            this.SalesArea = salesArea;
            this.DivisionalName = divisionalName;
            this.CreditSales = creditSales;
            this.CreditSalesPerc = creditSalesPerc;
            this.TermsFrom = termsFrom;
            this.TermsTo = termsTo;
            this.AveCollPeriod = aveCollPeriod;
            this.CashSales = cashSales;
            this.CashSalesPerc = cashSalesPerc;
            this.OpComment = opComment;
            this.Import = import;
            this.ImportComment = importComment;
            this.Export = export;
            this.ExportComment = exportComment;
            this.NumberSalesStaff = numberSalesStaff;
            this.NumberWageStaff = numberWageStaff;
            this.TotalNumberStaff = totalNumberStaff;
            this.PremisesOwner = premisesOwner;
            this.PremisesLessor = premisesLessor;
            this.PremisesSize = premisesSize;
            this.LeasePeriodFrom = leasePeriodFrom;
            this.LeasePeriodTo = leasePeriodTo;
            this.PremisesRental = premisesRental;
            this.SaSicCode = saSicCode;
            this.SaSicDescription = saSicDescription;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=true)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets SicCode
        /// </summary>
        [DataMember(Name="sicCode", EmitDefaultValue=true)]
        public string SicCode { get; set; }

        /// <summary>
        /// Gets or Sets SicDescription
        /// </summary>
        [DataMember(Name="sicDescription", EmitDefaultValue=true)]
        public string SicDescription { get; set; }

        /// <summary>
        /// Gets or Sets SalesArea
        /// </summary>
        [DataMember(Name="salesArea", EmitDefaultValue=true)]
        public string SalesArea { get; set; }

        /// <summary>
        /// Gets or Sets DivisionalName
        /// </summary>
        [DataMember(Name="divisionalName", EmitDefaultValue=true)]
        public string DivisionalName { get; set; }

        /// <summary>
        /// Gets or Sets CreditSales
        /// </summary>
        [DataMember(Name="creditSales", EmitDefaultValue=true)]
        public string CreditSales { get; set; }

        /// <summary>
        /// Gets or Sets CreditSalesPerc
        /// </summary>
        [DataMember(Name="creditSalesPerc", EmitDefaultValue=true)]
        public string CreditSalesPerc { get; set; }

        /// <summary>
        /// Gets or Sets TermsFrom
        /// </summary>
        [DataMember(Name="termsFrom", EmitDefaultValue=true)]
        public string TermsFrom { get; set; }

        /// <summary>
        /// Gets or Sets TermsTo
        /// </summary>
        [DataMember(Name="termsTo", EmitDefaultValue=true)]
        public string TermsTo { get; set; }

        /// <summary>
        /// Gets or Sets AveCollPeriod
        /// </summary>
        [DataMember(Name="aveCollPeriod", EmitDefaultValue=true)]
        public string AveCollPeriod { get; set; }

        /// <summary>
        /// Gets or Sets CashSales
        /// </summary>
        [DataMember(Name="cashSales", EmitDefaultValue=true)]
        public string CashSales { get; set; }

        /// <summary>
        /// Gets or Sets CashSalesPerc
        /// </summary>
        [DataMember(Name="cashSalesPerc", EmitDefaultValue=true)]
        public string CashSalesPerc { get; set; }

        /// <summary>
        /// Gets or Sets OpComment
        /// </summary>
        [DataMember(Name="opComment", EmitDefaultValue=true)]
        public List<string> OpComment { get; set; }

        /// <summary>
        /// Gets or Sets Import
        /// </summary>
        [DataMember(Name="import", EmitDefaultValue=true)]
        public string Import { get; set; }

        /// <summary>
        /// Gets or Sets ImportComment
        /// </summary>
        [DataMember(Name="importComment", EmitDefaultValue=true)]
        public string ImportComment { get; set; }

        /// <summary>
        /// Gets or Sets Export
        /// </summary>
        [DataMember(Name="export", EmitDefaultValue=true)]
        public string Export { get; set; }

        /// <summary>
        /// Gets or Sets ExportComment
        /// </summary>
        [DataMember(Name="exportComment", EmitDefaultValue=true)]
        public string ExportComment { get; set; }

        /// <summary>
        /// Gets or Sets NumberSalesStaff
        /// </summary>
        [DataMember(Name="numberSalesStaff", EmitDefaultValue=true)]
        public string NumberSalesStaff { get; set; }

        /// <summary>
        /// Gets or Sets NumberWageStaff
        /// </summary>
        [DataMember(Name="numberWageStaff", EmitDefaultValue=true)]
        public string NumberWageStaff { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberStaff
        /// </summary>
        [DataMember(Name="totalNumberStaff", EmitDefaultValue=true)]
        public string TotalNumberStaff { get; set; }

        /// <summary>
        /// Gets or Sets PremisesOwner
        /// </summary>
        [DataMember(Name="premisesOwner", EmitDefaultValue=true)]
        public string PremisesOwner { get; set; }

        /// <summary>
        /// Gets or Sets PremisesLessor
        /// </summary>
        [DataMember(Name="premisesLessor", EmitDefaultValue=true)]
        public string PremisesLessor { get; set; }

        /// <summary>
        /// Gets or Sets PremisesSize
        /// </summary>
        [DataMember(Name="premisesSize", EmitDefaultValue=true)]
        public string PremisesSize { get; set; }

        /// <summary>
        /// Gets or Sets LeasePeriodFrom
        /// </summary>
        [DataMember(Name="leasePeriodFrom", EmitDefaultValue=true)]
        public string LeasePeriodFrom { get; set; }

        /// <summary>
        /// Gets or Sets LeasePeriodTo
        /// </summary>
        [DataMember(Name="leasePeriodTo", EmitDefaultValue=true)]
        public string LeasePeriodTo { get; set; }

        /// <summary>
        /// Gets or Sets PremisesRental
        /// </summary>
        [DataMember(Name="premisesRental", EmitDefaultValue=true)]
        public string PremisesRental { get; set; }

        /// <summary>
        /// Gets or Sets SaSicCode
        /// </summary>
        [DataMember(Name="saSicCode", EmitDefaultValue=true)]
        public string SaSicCode { get; set; }

        /// <summary>
        /// Gets or Sets SaSicDescription
        /// </summary>
        [DataMember(Name="saSicDescription", EmitDefaultValue=true)]
        public string SaSicDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialOperation {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  SicDescription: ").Append(SicDescription).Append("\n");
            sb.Append("  SalesArea: ").Append(SalesArea).Append("\n");
            sb.Append("  DivisionalName: ").Append(DivisionalName).Append("\n");
            sb.Append("  CreditSales: ").Append(CreditSales).Append("\n");
            sb.Append("  CreditSalesPerc: ").Append(CreditSalesPerc).Append("\n");
            sb.Append("  TermsFrom: ").Append(TermsFrom).Append("\n");
            sb.Append("  TermsTo: ").Append(TermsTo).Append("\n");
            sb.Append("  AveCollPeriod: ").Append(AveCollPeriod).Append("\n");
            sb.Append("  CashSales: ").Append(CashSales).Append("\n");
            sb.Append("  CashSalesPerc: ").Append(CashSalesPerc).Append("\n");
            sb.Append("  OpComment: ").Append(OpComment).Append("\n");
            sb.Append("  Import: ").Append(Import).Append("\n");
            sb.Append("  ImportComment: ").Append(ImportComment).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  ExportComment: ").Append(ExportComment).Append("\n");
            sb.Append("  NumberSalesStaff: ").Append(NumberSalesStaff).Append("\n");
            sb.Append("  NumberWageStaff: ").Append(NumberWageStaff).Append("\n");
            sb.Append("  TotalNumberStaff: ").Append(TotalNumberStaff).Append("\n");
            sb.Append("  PremisesOwner: ").Append(PremisesOwner).Append("\n");
            sb.Append("  PremisesLessor: ").Append(PremisesLessor).Append("\n");
            sb.Append("  PremisesSize: ").Append(PremisesSize).Append("\n");
            sb.Append("  LeasePeriodFrom: ").Append(LeasePeriodFrom).Append("\n");
            sb.Append("  LeasePeriodTo: ").Append(LeasePeriodTo).Append("\n");
            sb.Append("  PremisesRental: ").Append(PremisesRental).Append("\n");
            sb.Append("  SaSicCode: ").Append(SaSicCode).Append("\n");
            sb.Append("  SaSicDescription: ").Append(SaSicDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialOperation);
        }

        /// <summary>
        /// Returns true if TransunionCommercialOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SicCode == input.SicCode ||
                    (this.SicCode != null &&
                    this.SicCode.Equals(input.SicCode))
                ) && 
                (
                    this.SicDescription == input.SicDescription ||
                    (this.SicDescription != null &&
                    this.SicDescription.Equals(input.SicDescription))
                ) && 
                (
                    this.SalesArea == input.SalesArea ||
                    (this.SalesArea != null &&
                    this.SalesArea.Equals(input.SalesArea))
                ) && 
                (
                    this.DivisionalName == input.DivisionalName ||
                    (this.DivisionalName != null &&
                    this.DivisionalName.Equals(input.DivisionalName))
                ) && 
                (
                    this.CreditSales == input.CreditSales ||
                    (this.CreditSales != null &&
                    this.CreditSales.Equals(input.CreditSales))
                ) && 
                (
                    this.CreditSalesPerc == input.CreditSalesPerc ||
                    (this.CreditSalesPerc != null &&
                    this.CreditSalesPerc.Equals(input.CreditSalesPerc))
                ) && 
                (
                    this.TermsFrom == input.TermsFrom ||
                    (this.TermsFrom != null &&
                    this.TermsFrom.Equals(input.TermsFrom))
                ) && 
                (
                    this.TermsTo == input.TermsTo ||
                    (this.TermsTo != null &&
                    this.TermsTo.Equals(input.TermsTo))
                ) && 
                (
                    this.AveCollPeriod == input.AveCollPeriod ||
                    (this.AveCollPeriod != null &&
                    this.AveCollPeriod.Equals(input.AveCollPeriod))
                ) && 
                (
                    this.CashSales == input.CashSales ||
                    (this.CashSales != null &&
                    this.CashSales.Equals(input.CashSales))
                ) && 
                (
                    this.CashSalesPerc == input.CashSalesPerc ||
                    (this.CashSalesPerc != null &&
                    this.CashSalesPerc.Equals(input.CashSalesPerc))
                ) && 
                (
                    this.OpComment == input.OpComment ||
                    this.OpComment != null &&
                    input.OpComment != null &&
                    this.OpComment.SequenceEqual(input.OpComment)
                ) && 
                (
                    this.Import == input.Import ||
                    (this.Import != null &&
                    this.Import.Equals(input.Import))
                ) && 
                (
                    this.ImportComment == input.ImportComment ||
                    (this.ImportComment != null &&
                    this.ImportComment.Equals(input.ImportComment))
                ) && 
                (
                    this.Export == input.Export ||
                    (this.Export != null &&
                    this.Export.Equals(input.Export))
                ) && 
                (
                    this.ExportComment == input.ExportComment ||
                    (this.ExportComment != null &&
                    this.ExportComment.Equals(input.ExportComment))
                ) && 
                (
                    this.NumberSalesStaff == input.NumberSalesStaff ||
                    (this.NumberSalesStaff != null &&
                    this.NumberSalesStaff.Equals(input.NumberSalesStaff))
                ) && 
                (
                    this.NumberWageStaff == input.NumberWageStaff ||
                    (this.NumberWageStaff != null &&
                    this.NumberWageStaff.Equals(input.NumberWageStaff))
                ) && 
                (
                    this.TotalNumberStaff == input.TotalNumberStaff ||
                    (this.TotalNumberStaff != null &&
                    this.TotalNumberStaff.Equals(input.TotalNumberStaff))
                ) && 
                (
                    this.PremisesOwner == input.PremisesOwner ||
                    (this.PremisesOwner != null &&
                    this.PremisesOwner.Equals(input.PremisesOwner))
                ) && 
                (
                    this.PremisesLessor == input.PremisesLessor ||
                    (this.PremisesLessor != null &&
                    this.PremisesLessor.Equals(input.PremisesLessor))
                ) && 
                (
                    this.PremisesSize == input.PremisesSize ||
                    (this.PremisesSize != null &&
                    this.PremisesSize.Equals(input.PremisesSize))
                ) && 
                (
                    this.LeasePeriodFrom == input.LeasePeriodFrom ||
                    (this.LeasePeriodFrom != null &&
                    this.LeasePeriodFrom.Equals(input.LeasePeriodFrom))
                ) && 
                (
                    this.LeasePeriodTo == input.LeasePeriodTo ||
                    (this.LeasePeriodTo != null &&
                    this.LeasePeriodTo.Equals(input.LeasePeriodTo))
                ) && 
                (
                    this.PremisesRental == input.PremisesRental ||
                    (this.PremisesRental != null &&
                    this.PremisesRental.Equals(input.PremisesRental))
                ) && 
                (
                    this.SaSicCode == input.SaSicCode ||
                    (this.SaSicCode != null &&
                    this.SaSicCode.Equals(input.SaSicCode))
                ) && 
                (
                    this.SaSicDescription == input.SaSicDescription ||
                    (this.SaSicDescription != null &&
                    this.SaSicDescription.Equals(input.SaSicDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.SicCode != null)
                    hashCode = hashCode * 59 + this.SicCode.GetHashCode();
                if (this.SicDescription != null)
                    hashCode = hashCode * 59 + this.SicDescription.GetHashCode();
                if (this.SalesArea != null)
                    hashCode = hashCode * 59 + this.SalesArea.GetHashCode();
                if (this.DivisionalName != null)
                    hashCode = hashCode * 59 + this.DivisionalName.GetHashCode();
                if (this.CreditSales != null)
                    hashCode = hashCode * 59 + this.CreditSales.GetHashCode();
                if (this.CreditSalesPerc != null)
                    hashCode = hashCode * 59 + this.CreditSalesPerc.GetHashCode();
                if (this.TermsFrom != null)
                    hashCode = hashCode * 59 + this.TermsFrom.GetHashCode();
                if (this.TermsTo != null)
                    hashCode = hashCode * 59 + this.TermsTo.GetHashCode();
                if (this.AveCollPeriod != null)
                    hashCode = hashCode * 59 + this.AveCollPeriod.GetHashCode();
                if (this.CashSales != null)
                    hashCode = hashCode * 59 + this.CashSales.GetHashCode();
                if (this.CashSalesPerc != null)
                    hashCode = hashCode * 59 + this.CashSalesPerc.GetHashCode();
                if (this.OpComment != null)
                    hashCode = hashCode * 59 + this.OpComment.GetHashCode();
                if (this.Import != null)
                    hashCode = hashCode * 59 + this.Import.GetHashCode();
                if (this.ImportComment != null)
                    hashCode = hashCode * 59 + this.ImportComment.GetHashCode();
                if (this.Export != null)
                    hashCode = hashCode * 59 + this.Export.GetHashCode();
                if (this.ExportComment != null)
                    hashCode = hashCode * 59 + this.ExportComment.GetHashCode();
                if (this.NumberSalesStaff != null)
                    hashCode = hashCode * 59 + this.NumberSalesStaff.GetHashCode();
                if (this.NumberWageStaff != null)
                    hashCode = hashCode * 59 + this.NumberWageStaff.GetHashCode();
                if (this.TotalNumberStaff != null)
                    hashCode = hashCode * 59 + this.TotalNumberStaff.GetHashCode();
                if (this.PremisesOwner != null)
                    hashCode = hashCode * 59 + this.PremisesOwner.GetHashCode();
                if (this.PremisesLessor != null)
                    hashCode = hashCode * 59 + this.PremisesLessor.GetHashCode();
                if (this.PremisesSize != null)
                    hashCode = hashCode * 59 + this.PremisesSize.GetHashCode();
                if (this.LeasePeriodFrom != null)
                    hashCode = hashCode * 59 + this.LeasePeriodFrom.GetHashCode();
                if (this.LeasePeriodTo != null)
                    hashCode = hashCode * 59 + this.LeasePeriodTo.GetHashCode();
                if (this.PremisesRental != null)
                    hashCode = hashCode * 59 + this.PremisesRental.GetHashCode();
                if (this.SaSicCode != null)
                    hashCode = hashCode * 59 + this.SaSicCode.GetHashCode();
                if (this.SaSicDescription != null)
                    hashCode = hashCode * 59 + this.SaSicDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
