/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedCipcFinancials
    /// </summary>
    [DataContract]
    public partial class WindeedCipcFinancials :  IEquatable<WindeedCipcFinancials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedCipcFinancials" /> class.
        /// </summary>
        /// <param name="financialYearEnd">financialYearEnd.</param>
        /// <param name="finEffectiveDate">finEffectiveDate.</param>
        /// <param name="issuedShares">issuedShares.</param>
        /// <param name="issuedCapital">issuedCapital.</param>
        /// <param name="authorizedShares">authorizedShares.</param>
        /// <param name="authorizedCapital">authorizedCapital.</param>
        /// <param name="taxNumber">taxNumber.</param>
        public WindeedCipcFinancials(int? financialYearEnd = default(int?), DateTime? finEffectiveDate = default(DateTime?), int? issuedShares = default(int?), double? issuedCapital = default(double?), int? authorizedShares = default(int?), double? authorizedCapital = default(double?), string taxNumber = default(string))
        {
            this.FinancialYearEnd = financialYearEnd;
            this.FinEffectiveDate = finEffectiveDate;
            this.IssuedShares = issuedShares;
            this.IssuedCapital = issuedCapital;
            this.AuthorizedShares = authorizedShares;
            this.AuthorizedCapital = authorizedCapital;
            this.TaxNumber = taxNumber;
            this.FinancialYearEnd = financialYearEnd;
            this.FinEffectiveDate = finEffectiveDate;
            this.IssuedShares = issuedShares;
            this.IssuedCapital = issuedCapital;
            this.AuthorizedShares = authorizedShares;
            this.AuthorizedCapital = authorizedCapital;
            this.TaxNumber = taxNumber;
        }

        /// <summary>
        /// Gets or Sets FinancialYearEnd
        /// </summary>
        [DataMember(Name="financialYearEnd", EmitDefaultValue=true)]
        public int? FinancialYearEnd { get; set; }

        /// <summary>
        /// Gets or Sets FinEffectiveDate
        /// </summary>
        [DataMember(Name="finEffectiveDate", EmitDefaultValue=true)]
        public DateTime? FinEffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets IssuedShares
        /// </summary>
        [DataMember(Name="issuedShares", EmitDefaultValue=true)]
        public int? IssuedShares { get; set; }

        /// <summary>
        /// Gets or Sets IssuedCapital
        /// </summary>
        [DataMember(Name="issuedCapital", EmitDefaultValue=true)]
        public double? IssuedCapital { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedShares
        /// </summary>
        [DataMember(Name="authorizedShares", EmitDefaultValue=true)]
        public int? AuthorizedShares { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedCapital
        /// </summary>
        [DataMember(Name="authorizedCapital", EmitDefaultValue=true)]
        public double? AuthorizedCapital { get; set; }

        /// <summary>
        /// Gets or Sets TaxNumber
        /// </summary>
        [DataMember(Name="taxNumber", EmitDefaultValue=true)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedCipcFinancials {\n");
            sb.Append("  FinancialYearEnd: ").Append(FinancialYearEnd).Append("\n");
            sb.Append("  FinEffectiveDate: ").Append(FinEffectiveDate).Append("\n");
            sb.Append("  IssuedShares: ").Append(IssuedShares).Append("\n");
            sb.Append("  IssuedCapital: ").Append(IssuedCapital).Append("\n");
            sb.Append("  AuthorizedShares: ").Append(AuthorizedShares).Append("\n");
            sb.Append("  AuthorizedCapital: ").Append(AuthorizedCapital).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedCipcFinancials);
        }

        /// <summary>
        /// Returns true if WindeedCipcFinancials instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedCipcFinancials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedCipcFinancials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FinancialYearEnd == input.FinancialYearEnd ||
                    (this.FinancialYearEnd != null &&
                    this.FinancialYearEnd.Equals(input.FinancialYearEnd))
                ) && 
                (
                    this.FinEffectiveDate == input.FinEffectiveDate ||
                    (this.FinEffectiveDate != null &&
                    this.FinEffectiveDate.Equals(input.FinEffectiveDate))
                ) && 
                (
                    this.IssuedShares == input.IssuedShares ||
                    (this.IssuedShares != null &&
                    this.IssuedShares.Equals(input.IssuedShares))
                ) && 
                (
                    this.IssuedCapital == input.IssuedCapital ||
                    (this.IssuedCapital != null &&
                    this.IssuedCapital.Equals(input.IssuedCapital))
                ) && 
                (
                    this.AuthorizedShares == input.AuthorizedShares ||
                    (this.AuthorizedShares != null &&
                    this.AuthorizedShares.Equals(input.AuthorizedShares))
                ) && 
                (
                    this.AuthorizedCapital == input.AuthorizedCapital ||
                    (this.AuthorizedCapital != null &&
                    this.AuthorizedCapital.Equals(input.AuthorizedCapital))
                ) && 
                (
                    this.TaxNumber == input.TaxNumber ||
                    (this.TaxNumber != null &&
                    this.TaxNumber.Equals(input.TaxNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FinancialYearEnd != null)
                    hashCode = hashCode * 59 + this.FinancialYearEnd.GetHashCode();
                if (this.FinEffectiveDate != null)
                    hashCode = hashCode * 59 + this.FinEffectiveDate.GetHashCode();
                if (this.IssuedShares != null)
                    hashCode = hashCode * 59 + this.IssuedShares.GetHashCode();
                if (this.IssuedCapital != null)
                    hashCode = hashCode * 59 + this.IssuedCapital.GetHashCode();
                if (this.AuthorizedShares != null)
                    hashCode = hashCode * 59 + this.AuthorizedShares.GetHashCode();
                if (this.AuthorizedCapital != null)
                    hashCode = hashCode * 59 + this.AuthorizedCapital.GetHashCode();
                if (this.TaxNumber != null)
                    hashCode = hashCode * 59 + this.TaxNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
