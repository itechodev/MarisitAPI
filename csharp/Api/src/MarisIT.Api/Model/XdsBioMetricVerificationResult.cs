/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsBioMetricVerificationResult
    /// </summary>
    [DataContract]
    public partial class XdsBioMetricVerificationResult :  IEquatable<XdsBioMetricVerificationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsBioMetricVerificationResult" /> class.
        /// </summary>
        /// <param name="applicationErrors">applicationErrors.</param>
        /// <param name="base64StringJpeg2000Image">base64StringJpeg2000Image.</param>
        /// <param name="fingerColor">fingerColor.</param>
        /// <param name="hasImage">hasImage.</param>
        /// <param name="subscriberEnquiryID">subscriberEnquiryID.</param>
        /// <param name="subscriberEnquiryResultID">subscriberEnquiryResultID.</param>
        /// <param name="tmStamp">tmStamp.</param>
        /// <param name="transactionNumber">transactionNumber.</param>
        /// <param name="verificationColorIndicator">verificationColorIndicator.</param>
        /// <param name="verificationErrors">verificationErrors.</param>
        /// <param name="verificationResult">verificationResult.</param>
        /// <param name="verificationResultDescription">verificationResultDescription.</param>
        public XdsBioMetricVerificationResult(string applicationErrors = default(string), string base64StringJpeg2000Image = default(string), string fingerColor = default(string), string hasImage = default(string), string subscriberEnquiryID = default(string), string subscriberEnquiryResultID = default(string), string tmStamp = default(string), string transactionNumber = default(string), string verificationColorIndicator = default(string), string verificationErrors = default(string), string verificationResult = default(string), string verificationResultDescription = default(string))
        {
            this.ApplicationErrors = applicationErrors;
            this.Base64StringJpeg2000Image = base64StringJpeg2000Image;
            this.FingerColor = fingerColor;
            this.HasImage = hasImage;
            this.SubscriberEnquiryID = subscriberEnquiryID;
            this.SubscriberEnquiryResultID = subscriberEnquiryResultID;
            this.TmStamp = tmStamp;
            this.TransactionNumber = transactionNumber;
            this.VerificationColorIndicator = verificationColorIndicator;
            this.VerificationErrors = verificationErrors;
            this.VerificationResult = verificationResult;
            this.VerificationResultDescription = verificationResultDescription;
            this.ApplicationErrors = applicationErrors;
            this.Base64StringJpeg2000Image = base64StringJpeg2000Image;
            this.FingerColor = fingerColor;
            this.HasImage = hasImage;
            this.SubscriberEnquiryID = subscriberEnquiryID;
            this.SubscriberEnquiryResultID = subscriberEnquiryResultID;
            this.TmStamp = tmStamp;
            this.TransactionNumber = transactionNumber;
            this.VerificationColorIndicator = verificationColorIndicator;
            this.VerificationErrors = verificationErrors;
            this.VerificationResult = verificationResult;
            this.VerificationResultDescription = verificationResultDescription;
        }

        /// <summary>
        /// Gets or Sets ApplicationErrors
        /// </summary>
        [DataMember(Name="applicationErrors", EmitDefaultValue=true)]
        public string ApplicationErrors { get; set; }

        /// <summary>
        /// Gets or Sets Base64StringJpeg2000Image
        /// </summary>
        [DataMember(Name="base64StringJpeg2000Image", EmitDefaultValue=true)]
        public string Base64StringJpeg2000Image { get; set; }

        /// <summary>
        /// Gets or Sets FingerColor
        /// </summary>
        [DataMember(Name="fingerColor", EmitDefaultValue=true)]
        public string FingerColor { get; set; }

        /// <summary>
        /// Gets or Sets HasImage
        /// </summary>
        [DataMember(Name="hasImage", EmitDefaultValue=true)]
        public string HasImage { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberEnquiryID
        /// </summary>
        [DataMember(Name="subscriberEnquiryID", EmitDefaultValue=true)]
        public string SubscriberEnquiryID { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberEnquiryResultID
        /// </summary>
        [DataMember(Name="subscriberEnquiryResultID", EmitDefaultValue=true)]
        public string SubscriberEnquiryResultID { get; set; }

        /// <summary>
        /// Gets or Sets TmStamp
        /// </summary>
        [DataMember(Name="tmStamp", EmitDefaultValue=true)]
        public string TmStamp { get; set; }

        /// <summary>
        /// Gets or Sets TransactionNumber
        /// </summary>
        [DataMember(Name="transactionNumber", EmitDefaultValue=true)]
        public string TransactionNumber { get; set; }

        /// <summary>
        /// Gets or Sets VerificationColorIndicator
        /// </summary>
        [DataMember(Name="verificationColorIndicator", EmitDefaultValue=true)]
        public string VerificationColorIndicator { get; set; }

        /// <summary>
        /// Gets or Sets VerificationErrors
        /// </summary>
        [DataMember(Name="verificationErrors", EmitDefaultValue=true)]
        public string VerificationErrors { get; set; }

        /// <summary>
        /// Gets or Sets VerificationResult
        /// </summary>
        [DataMember(Name="verificationResult", EmitDefaultValue=true)]
        public string VerificationResult { get; set; }

        /// <summary>
        /// Gets or Sets VerificationResultDescription
        /// </summary>
        [DataMember(Name="verificationResultDescription", EmitDefaultValue=true)]
        public string VerificationResultDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsBioMetricVerificationResult {\n");
            sb.Append("  ApplicationErrors: ").Append(ApplicationErrors).Append("\n");
            sb.Append("  Base64StringJpeg2000Image: ").Append(Base64StringJpeg2000Image).Append("\n");
            sb.Append("  FingerColor: ").Append(FingerColor).Append("\n");
            sb.Append("  HasImage: ").Append(HasImage).Append("\n");
            sb.Append("  SubscriberEnquiryID: ").Append(SubscriberEnquiryID).Append("\n");
            sb.Append("  SubscriberEnquiryResultID: ").Append(SubscriberEnquiryResultID).Append("\n");
            sb.Append("  TmStamp: ").Append(TmStamp).Append("\n");
            sb.Append("  TransactionNumber: ").Append(TransactionNumber).Append("\n");
            sb.Append("  VerificationColorIndicator: ").Append(VerificationColorIndicator).Append("\n");
            sb.Append("  VerificationErrors: ").Append(VerificationErrors).Append("\n");
            sb.Append("  VerificationResult: ").Append(VerificationResult).Append("\n");
            sb.Append("  VerificationResultDescription: ").Append(VerificationResultDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsBioMetricVerificationResult);
        }

        /// <summary>
        /// Returns true if XdsBioMetricVerificationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsBioMetricVerificationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsBioMetricVerificationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationErrors == input.ApplicationErrors ||
                    (this.ApplicationErrors != null &&
                    this.ApplicationErrors.Equals(input.ApplicationErrors))
                ) && 
                (
                    this.Base64StringJpeg2000Image == input.Base64StringJpeg2000Image ||
                    (this.Base64StringJpeg2000Image != null &&
                    this.Base64StringJpeg2000Image.Equals(input.Base64StringJpeg2000Image))
                ) && 
                (
                    this.FingerColor == input.FingerColor ||
                    (this.FingerColor != null &&
                    this.FingerColor.Equals(input.FingerColor))
                ) && 
                (
                    this.HasImage == input.HasImage ||
                    (this.HasImage != null &&
                    this.HasImage.Equals(input.HasImage))
                ) && 
                (
                    this.SubscriberEnquiryID == input.SubscriberEnquiryID ||
                    (this.SubscriberEnquiryID != null &&
                    this.SubscriberEnquiryID.Equals(input.SubscriberEnquiryID))
                ) && 
                (
                    this.SubscriberEnquiryResultID == input.SubscriberEnquiryResultID ||
                    (this.SubscriberEnquiryResultID != null &&
                    this.SubscriberEnquiryResultID.Equals(input.SubscriberEnquiryResultID))
                ) && 
                (
                    this.TmStamp == input.TmStamp ||
                    (this.TmStamp != null &&
                    this.TmStamp.Equals(input.TmStamp))
                ) && 
                (
                    this.TransactionNumber == input.TransactionNumber ||
                    (this.TransactionNumber != null &&
                    this.TransactionNumber.Equals(input.TransactionNumber))
                ) && 
                (
                    this.VerificationColorIndicator == input.VerificationColorIndicator ||
                    (this.VerificationColorIndicator != null &&
                    this.VerificationColorIndicator.Equals(input.VerificationColorIndicator))
                ) && 
                (
                    this.VerificationErrors == input.VerificationErrors ||
                    (this.VerificationErrors != null &&
                    this.VerificationErrors.Equals(input.VerificationErrors))
                ) && 
                (
                    this.VerificationResult == input.VerificationResult ||
                    (this.VerificationResult != null &&
                    this.VerificationResult.Equals(input.VerificationResult))
                ) && 
                (
                    this.VerificationResultDescription == input.VerificationResultDescription ||
                    (this.VerificationResultDescription != null &&
                    this.VerificationResultDescription.Equals(input.VerificationResultDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationErrors != null)
                    hashCode = hashCode * 59 + this.ApplicationErrors.GetHashCode();
                if (this.Base64StringJpeg2000Image != null)
                    hashCode = hashCode * 59 + this.Base64StringJpeg2000Image.GetHashCode();
                if (this.FingerColor != null)
                    hashCode = hashCode * 59 + this.FingerColor.GetHashCode();
                if (this.HasImage != null)
                    hashCode = hashCode * 59 + this.HasImage.GetHashCode();
                if (this.SubscriberEnquiryID != null)
                    hashCode = hashCode * 59 + this.SubscriberEnquiryID.GetHashCode();
                if (this.SubscriberEnquiryResultID != null)
                    hashCode = hashCode * 59 + this.SubscriberEnquiryResultID.GetHashCode();
                if (this.TmStamp != null)
                    hashCode = hashCode * 59 + this.TmStamp.GetHashCode();
                if (this.TransactionNumber != null)
                    hashCode = hashCode * 59 + this.TransactionNumber.GetHashCode();
                if (this.VerificationColorIndicator != null)
                    hashCode = hashCode * 59 + this.VerificationColorIndicator.GetHashCode();
                if (this.VerificationErrors != null)
                    hashCode = hashCode * 59 + this.VerificationErrors.GetHashCode();
                if (this.VerificationResult != null)
                    hashCode = hashCode * 59 + this.VerificationResult.GetHashCode();
                if (this.VerificationResultDescription != null)
                    hashCode = hashCode * 59 + this.VerificationResultDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
