/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedLightstoneValuation
    /// </summary>
    [DataContract]
    public partial class WindeedLightstoneValuation :  IEquatable<WindeedLightstoneValuation>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ConfidenceLevel
        /// </summary>
        [DataMember(Name="confidenceLevel", EmitDefaultValue=false)]
        public WindeedLightstoneConfidenceLevel? ConfidenceLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedLightstoneValuation" /> class.
        /// </summary>
        /// <param name="predictedAmount">predictedAmount.</param>
        /// <param name="predictedAmountMax">predictedAmountMax.</param>
        /// <param name="predictedAmountMin">predictedAmountMin.</param>
        /// <param name="confidenceScore">confidenceScore.</param>
        /// <param name="confidenceLevel">confidenceLevel.</param>
        /// <param name="safetyScore">safetyScore.</param>
        public WindeedLightstoneValuation(double? predictedAmount = default(double?), double? predictedAmountMax = default(double?), double? predictedAmountMin = default(double?), double? confidenceScore = default(double?), WindeedLightstoneConfidenceLevel? confidenceLevel = default(WindeedLightstoneConfidenceLevel?), double? safetyScore = default(double?))
        {
            this.PredictedAmount = predictedAmount;
            this.PredictedAmountMax = predictedAmountMax;
            this.PredictedAmountMin = predictedAmountMin;
            this.ConfidenceScore = confidenceScore;
            this.SafetyScore = safetyScore;
            this.PredictedAmount = predictedAmount;
            this.PredictedAmountMax = predictedAmountMax;
            this.PredictedAmountMin = predictedAmountMin;
            this.ConfidenceScore = confidenceScore;
            this.ConfidenceLevel = confidenceLevel;
            this.SafetyScore = safetyScore;
        }

        /// <summary>
        /// Gets or Sets PredictedAmount
        /// </summary>
        [DataMember(Name="predictedAmount", EmitDefaultValue=true)]
        public double? PredictedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PredictedAmountMax
        /// </summary>
        [DataMember(Name="predictedAmountMax", EmitDefaultValue=true)]
        public double? PredictedAmountMax { get; set; }

        /// <summary>
        /// Gets or Sets PredictedAmountMin
        /// </summary>
        [DataMember(Name="predictedAmountMin", EmitDefaultValue=true)]
        public double? PredictedAmountMin { get; set; }

        /// <summary>
        /// Gets or Sets ConfidenceScore
        /// </summary>
        [DataMember(Name="confidenceScore", EmitDefaultValue=true)]
        public double? ConfidenceScore { get; set; }


        /// <summary>
        /// Gets or Sets SafetyScore
        /// </summary>
        [DataMember(Name="safetyScore", EmitDefaultValue=true)]
        public double? SafetyScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedLightstoneValuation {\n");
            sb.Append("  PredictedAmount: ").Append(PredictedAmount).Append("\n");
            sb.Append("  PredictedAmountMax: ").Append(PredictedAmountMax).Append("\n");
            sb.Append("  PredictedAmountMin: ").Append(PredictedAmountMin).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  ConfidenceLevel: ").Append(ConfidenceLevel).Append("\n");
            sb.Append("  SafetyScore: ").Append(SafetyScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedLightstoneValuation);
        }

        /// <summary>
        /// Returns true if WindeedLightstoneValuation instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedLightstoneValuation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedLightstoneValuation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PredictedAmount == input.PredictedAmount ||
                    (this.PredictedAmount != null &&
                    this.PredictedAmount.Equals(input.PredictedAmount))
                ) && 
                (
                    this.PredictedAmountMax == input.PredictedAmountMax ||
                    (this.PredictedAmountMax != null &&
                    this.PredictedAmountMax.Equals(input.PredictedAmountMax))
                ) && 
                (
                    this.PredictedAmountMin == input.PredictedAmountMin ||
                    (this.PredictedAmountMin != null &&
                    this.PredictedAmountMin.Equals(input.PredictedAmountMin))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.ConfidenceLevel == input.ConfidenceLevel ||
                    (this.ConfidenceLevel != null &&
                    this.ConfidenceLevel.Equals(input.ConfidenceLevel))
                ) && 
                (
                    this.SafetyScore == input.SafetyScore ||
                    (this.SafetyScore != null &&
                    this.SafetyScore.Equals(input.SafetyScore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PredictedAmount != null)
                    hashCode = hashCode * 59 + this.PredictedAmount.GetHashCode();
                if (this.PredictedAmountMax != null)
                    hashCode = hashCode * 59 + this.PredictedAmountMax.GetHashCode();
                if (this.PredictedAmountMin != null)
                    hashCode = hashCode * 59 + this.PredictedAmountMin.GetHashCode();
                if (this.ConfidenceScore != null)
                    hashCode = hashCode * 59 + this.ConfidenceScore.GetHashCode();
                if (this.ConfidenceLevel != null)
                    hashCode = hashCode * 59 + this.ConfidenceLevel.GetHashCode();
                if (this.SafetyScore != null)
                    hashCode = hashCode * 59 + this.SafetyScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
