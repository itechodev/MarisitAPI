/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedWprFoundResponse
    /// </summary>
    [DataContract]
    public partial class WindeedWprFoundResponse :  IEquatable<WindeedWprFoundResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedWprRegistrar? DeedsOffice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedWprFoundResponse" /> class.
        /// </summary>
        /// <param name="responseTime">responseTime.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="property">property.</param>
        /// <param name="amenities">amenities.</param>
        /// <param name="comparativeSales">comparativeSales.</param>
        /// <param name="listings">listings.</param>
        /// <param name="pendingSales">pendingSales.</param>
        /// <param name="monthlySuburbTrends">monthlySuburbTrends.</param>
        /// <param name="annualSuburbTrends">annualSuburbTrends.</param>
        /// <param name="amenitiesEdited">amenitiesEdited.</param>
        /// <param name="mapEdited">mapEdited.</param>
        /// <param name="salesEdited">salesEdited.</param>
        /// <param name="suburbTrendsEdited">suburbTrendsEdited.</param>
        /// <param name="numberOfCoordinateChanges">numberOfCoordinateChanges.</param>
        /// <param name="comparativeSalesMap">comparativeSalesMap.</param>
        /// <param name="annualSuburbTrendGraph">annualSuburbTrendGraph.</param>
        /// <param name="monthlySuburbTrendGraph">monthlySuburbTrendGraph.</param>
        /// <param name="endorsementDocuments">endorsementDocuments.</param>
        /// <param name="historicDocuments">historicDocuments.</param>
        /// <param name="owners">owners.</param>
        /// <param name="transferHistory">transferHistory.</param>
        /// <param name="propertyConfiguration">propertyConfiguration.</param>
        public WindeedWprFoundResponse(DateTime responseTime = default(DateTime), WindeedWprRegistrar? deedsOffice = default(WindeedWprRegistrar?), WindeedWprPropertyInformation property = default(WindeedWprPropertyInformation), List<WindeedWprAmenity> amenities = default(List<WindeedWprAmenity>), List<WindeedWprComparativeSale> comparativeSales = default(List<WindeedWprComparativeSale>), List<WindeedWprListing> listings = default(List<WindeedWprListing>), List<WindeedWprPendingSale> pendingSales = default(List<WindeedWprPendingSale>), List<WindeedWprSuburbTrend> monthlySuburbTrends = default(List<WindeedWprSuburbTrend>), List<WindeedWprSuburbTrend> annualSuburbTrends = default(List<WindeedWprSuburbTrend>), bool amenitiesEdited = default(bool), bool mapEdited = default(bool), bool salesEdited = default(bool), bool suburbTrendsEdited = default(bool), int numberOfCoordinateChanges = default(int), byte[] comparativeSalesMap = default(byte[]), WindeedWprSuburbTrendGraph annualSuburbTrendGraph = default(WindeedWprSuburbTrendGraph), WindeedWprSuburbTrendGraph monthlySuburbTrendGraph = default(WindeedWprSuburbTrendGraph), List<WindeedWprEndorsementDocument> endorsementDocuments = default(List<WindeedWprEndorsementDocument>), List<WindeedWprHistoricDocument> historicDocuments = default(List<WindeedWprHistoricDocument>), List<WindeedWprTitleDeedOwner> owners = default(List<WindeedWprTitleDeedOwner>), List<WindeedWprTransferHistory> transferHistory = default(List<WindeedWprTransferHistory>), WindeedWprUpdatablePropertyConfiguration propertyConfiguration = default(WindeedWprUpdatablePropertyConfiguration))
        {
            this.Amenities = amenities;
            this.ComparativeSales = comparativeSales;
            this.Listings = listings;
            this.PendingSales = pendingSales;
            this.MonthlySuburbTrends = monthlySuburbTrends;
            this.AnnualSuburbTrends = annualSuburbTrends;
            this.ComparativeSalesMap = comparativeSalesMap;
            this.EndorsementDocuments = endorsementDocuments;
            this.HistoricDocuments = historicDocuments;
            this.Owners = owners;
            this.TransferHistory = transferHistory;
            this.ResponseTime = responseTime;
            this.DeedsOffice = deedsOffice;
            this.Property = property;
            this.Amenities = amenities;
            this.ComparativeSales = comparativeSales;
            this.Listings = listings;
            this.PendingSales = pendingSales;
            this.MonthlySuburbTrends = monthlySuburbTrends;
            this.AnnualSuburbTrends = annualSuburbTrends;
            this.AmenitiesEdited = amenitiesEdited;
            this.MapEdited = mapEdited;
            this.SalesEdited = salesEdited;
            this.SuburbTrendsEdited = suburbTrendsEdited;
            this.NumberOfCoordinateChanges = numberOfCoordinateChanges;
            this.ComparativeSalesMap = comparativeSalesMap;
            this.AnnualSuburbTrendGraph = annualSuburbTrendGraph;
            this.MonthlySuburbTrendGraph = monthlySuburbTrendGraph;
            this.EndorsementDocuments = endorsementDocuments;
            this.HistoricDocuments = historicDocuments;
            this.Owners = owners;
            this.TransferHistory = transferHistory;
            this.PropertyConfiguration = propertyConfiguration;
        }

        /// <summary>
        /// Gets or Sets ResponseTime
        /// </summary>
        [DataMember(Name="responseTime", EmitDefaultValue=false)]
        public DateTime ResponseTime { get; set; }


        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public WindeedWprPropertyInformation Property { get; set; }

        /// <summary>
        /// Gets or Sets Amenities
        /// </summary>
        [DataMember(Name="amenities", EmitDefaultValue=true)]
        public List<WindeedWprAmenity> Amenities { get; set; }

        /// <summary>
        /// Gets or Sets ComparativeSales
        /// </summary>
        [DataMember(Name="comparativeSales", EmitDefaultValue=true)]
        public List<WindeedWprComparativeSale> ComparativeSales { get; set; }

        /// <summary>
        /// Gets or Sets Listings
        /// </summary>
        [DataMember(Name="listings", EmitDefaultValue=true)]
        public List<WindeedWprListing> Listings { get; set; }

        /// <summary>
        /// Gets or Sets PendingSales
        /// </summary>
        [DataMember(Name="pendingSales", EmitDefaultValue=true)]
        public List<WindeedWprPendingSale> PendingSales { get; set; }

        /// <summary>
        /// Gets or Sets MonthlySuburbTrends
        /// </summary>
        [DataMember(Name="monthlySuburbTrends", EmitDefaultValue=true)]
        public List<WindeedWprSuburbTrend> MonthlySuburbTrends { get; set; }

        /// <summary>
        /// Gets or Sets AnnualSuburbTrends
        /// </summary>
        [DataMember(Name="annualSuburbTrends", EmitDefaultValue=true)]
        public List<WindeedWprSuburbTrend> AnnualSuburbTrends { get; set; }

        /// <summary>
        /// Gets or Sets AmenitiesEdited
        /// </summary>
        [DataMember(Name="amenitiesEdited", EmitDefaultValue=false)]
        public bool AmenitiesEdited { get; set; }

        /// <summary>
        /// Gets or Sets MapEdited
        /// </summary>
        [DataMember(Name="mapEdited", EmitDefaultValue=false)]
        public bool MapEdited { get; set; }

        /// <summary>
        /// Gets or Sets SalesEdited
        /// </summary>
        [DataMember(Name="salesEdited", EmitDefaultValue=false)]
        public bool SalesEdited { get; set; }

        /// <summary>
        /// Gets or Sets SuburbTrendsEdited
        /// </summary>
        [DataMember(Name="suburbTrendsEdited", EmitDefaultValue=false)]
        public bool SuburbTrendsEdited { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfCoordinateChanges
        /// </summary>
        [DataMember(Name="numberOfCoordinateChanges", EmitDefaultValue=false)]
        public int NumberOfCoordinateChanges { get; set; }

        /// <summary>
        /// Gets or Sets ComparativeSalesMap
        /// </summary>
        [DataMember(Name="comparativeSalesMap", EmitDefaultValue=true)]
        public byte[] ComparativeSalesMap { get; set; }

        /// <summary>
        /// Gets or Sets AnnualSuburbTrendGraph
        /// </summary>
        [DataMember(Name="annualSuburbTrendGraph", EmitDefaultValue=false)]
        public WindeedWprSuburbTrendGraph AnnualSuburbTrendGraph { get; set; }

        /// <summary>
        /// Gets or Sets MonthlySuburbTrendGraph
        /// </summary>
        [DataMember(Name="monthlySuburbTrendGraph", EmitDefaultValue=false)]
        public WindeedWprSuburbTrendGraph MonthlySuburbTrendGraph { get; set; }

        /// <summary>
        /// Gets or Sets EndorsementDocuments
        /// </summary>
        [DataMember(Name="endorsementDocuments", EmitDefaultValue=true)]
        public List<WindeedWprEndorsementDocument> EndorsementDocuments { get; set; }

        /// <summary>
        /// Gets or Sets HistoricDocuments
        /// </summary>
        [DataMember(Name="historicDocuments", EmitDefaultValue=true)]
        public List<WindeedWprHistoricDocument> HistoricDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=true)]
        public List<WindeedWprTitleDeedOwner> Owners { get; set; }

        /// <summary>
        /// Gets or Sets TransferHistory
        /// </summary>
        [DataMember(Name="transferHistory", EmitDefaultValue=true)]
        public List<WindeedWprTransferHistory> TransferHistory { get; set; }

        /// <summary>
        /// Gets or Sets PropertyConfiguration
        /// </summary>
        [DataMember(Name="propertyConfiguration", EmitDefaultValue=false)]
        public WindeedWprUpdatablePropertyConfiguration PropertyConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedWprFoundResponse {\n");
            sb.Append("  ResponseTime: ").Append(ResponseTime).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Amenities: ").Append(Amenities).Append("\n");
            sb.Append("  ComparativeSales: ").Append(ComparativeSales).Append("\n");
            sb.Append("  Listings: ").Append(Listings).Append("\n");
            sb.Append("  PendingSales: ").Append(PendingSales).Append("\n");
            sb.Append("  MonthlySuburbTrends: ").Append(MonthlySuburbTrends).Append("\n");
            sb.Append("  AnnualSuburbTrends: ").Append(AnnualSuburbTrends).Append("\n");
            sb.Append("  AmenitiesEdited: ").Append(AmenitiesEdited).Append("\n");
            sb.Append("  MapEdited: ").Append(MapEdited).Append("\n");
            sb.Append("  SalesEdited: ").Append(SalesEdited).Append("\n");
            sb.Append("  SuburbTrendsEdited: ").Append(SuburbTrendsEdited).Append("\n");
            sb.Append("  NumberOfCoordinateChanges: ").Append(NumberOfCoordinateChanges).Append("\n");
            sb.Append("  ComparativeSalesMap: ").Append(ComparativeSalesMap).Append("\n");
            sb.Append("  AnnualSuburbTrendGraph: ").Append(AnnualSuburbTrendGraph).Append("\n");
            sb.Append("  MonthlySuburbTrendGraph: ").Append(MonthlySuburbTrendGraph).Append("\n");
            sb.Append("  EndorsementDocuments: ").Append(EndorsementDocuments).Append("\n");
            sb.Append("  HistoricDocuments: ").Append(HistoricDocuments).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  TransferHistory: ").Append(TransferHistory).Append("\n");
            sb.Append("  PropertyConfiguration: ").Append(PropertyConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedWprFoundResponse);
        }

        /// <summary>
        /// Returns true if WindeedWprFoundResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedWprFoundResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedWprFoundResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseTime == input.ResponseTime ||
                    (this.ResponseTime != null &&
                    this.ResponseTime.Equals(input.ResponseTime))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Amenities == input.Amenities ||
                    this.Amenities != null &&
                    input.Amenities != null &&
                    this.Amenities.SequenceEqual(input.Amenities)
                ) && 
                (
                    this.ComparativeSales == input.ComparativeSales ||
                    this.ComparativeSales != null &&
                    input.ComparativeSales != null &&
                    this.ComparativeSales.SequenceEqual(input.ComparativeSales)
                ) && 
                (
                    this.Listings == input.Listings ||
                    this.Listings != null &&
                    input.Listings != null &&
                    this.Listings.SequenceEqual(input.Listings)
                ) && 
                (
                    this.PendingSales == input.PendingSales ||
                    this.PendingSales != null &&
                    input.PendingSales != null &&
                    this.PendingSales.SequenceEqual(input.PendingSales)
                ) && 
                (
                    this.MonthlySuburbTrends == input.MonthlySuburbTrends ||
                    this.MonthlySuburbTrends != null &&
                    input.MonthlySuburbTrends != null &&
                    this.MonthlySuburbTrends.SequenceEqual(input.MonthlySuburbTrends)
                ) && 
                (
                    this.AnnualSuburbTrends == input.AnnualSuburbTrends ||
                    this.AnnualSuburbTrends != null &&
                    input.AnnualSuburbTrends != null &&
                    this.AnnualSuburbTrends.SequenceEqual(input.AnnualSuburbTrends)
                ) && 
                (
                    this.AmenitiesEdited == input.AmenitiesEdited ||
                    (this.AmenitiesEdited != null &&
                    this.AmenitiesEdited.Equals(input.AmenitiesEdited))
                ) && 
                (
                    this.MapEdited == input.MapEdited ||
                    (this.MapEdited != null &&
                    this.MapEdited.Equals(input.MapEdited))
                ) && 
                (
                    this.SalesEdited == input.SalesEdited ||
                    (this.SalesEdited != null &&
                    this.SalesEdited.Equals(input.SalesEdited))
                ) && 
                (
                    this.SuburbTrendsEdited == input.SuburbTrendsEdited ||
                    (this.SuburbTrendsEdited != null &&
                    this.SuburbTrendsEdited.Equals(input.SuburbTrendsEdited))
                ) && 
                (
                    this.NumberOfCoordinateChanges == input.NumberOfCoordinateChanges ||
                    (this.NumberOfCoordinateChanges != null &&
                    this.NumberOfCoordinateChanges.Equals(input.NumberOfCoordinateChanges))
                ) && 
                (
                    this.ComparativeSalesMap == input.ComparativeSalesMap ||
                    (this.ComparativeSalesMap != null &&
                    this.ComparativeSalesMap.Equals(input.ComparativeSalesMap))
                ) && 
                (
                    this.AnnualSuburbTrendGraph == input.AnnualSuburbTrendGraph ||
                    (this.AnnualSuburbTrendGraph != null &&
                    this.AnnualSuburbTrendGraph.Equals(input.AnnualSuburbTrendGraph))
                ) && 
                (
                    this.MonthlySuburbTrendGraph == input.MonthlySuburbTrendGraph ||
                    (this.MonthlySuburbTrendGraph != null &&
                    this.MonthlySuburbTrendGraph.Equals(input.MonthlySuburbTrendGraph))
                ) && 
                (
                    this.EndorsementDocuments == input.EndorsementDocuments ||
                    this.EndorsementDocuments != null &&
                    input.EndorsementDocuments != null &&
                    this.EndorsementDocuments.SequenceEqual(input.EndorsementDocuments)
                ) && 
                (
                    this.HistoricDocuments == input.HistoricDocuments ||
                    this.HistoricDocuments != null &&
                    input.HistoricDocuments != null &&
                    this.HistoricDocuments.SequenceEqual(input.HistoricDocuments)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.TransferHistory == input.TransferHistory ||
                    this.TransferHistory != null &&
                    input.TransferHistory != null &&
                    this.TransferHistory.SequenceEqual(input.TransferHistory)
                ) && 
                (
                    this.PropertyConfiguration == input.PropertyConfiguration ||
                    (this.PropertyConfiguration != null &&
                    this.PropertyConfiguration.Equals(input.PropertyConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseTime != null)
                    hashCode = hashCode * 59 + this.ResponseTime.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Amenities != null)
                    hashCode = hashCode * 59 + this.Amenities.GetHashCode();
                if (this.ComparativeSales != null)
                    hashCode = hashCode * 59 + this.ComparativeSales.GetHashCode();
                if (this.Listings != null)
                    hashCode = hashCode * 59 + this.Listings.GetHashCode();
                if (this.PendingSales != null)
                    hashCode = hashCode * 59 + this.PendingSales.GetHashCode();
                if (this.MonthlySuburbTrends != null)
                    hashCode = hashCode * 59 + this.MonthlySuburbTrends.GetHashCode();
                if (this.AnnualSuburbTrends != null)
                    hashCode = hashCode * 59 + this.AnnualSuburbTrends.GetHashCode();
                if (this.AmenitiesEdited != null)
                    hashCode = hashCode * 59 + this.AmenitiesEdited.GetHashCode();
                if (this.MapEdited != null)
                    hashCode = hashCode * 59 + this.MapEdited.GetHashCode();
                if (this.SalesEdited != null)
                    hashCode = hashCode * 59 + this.SalesEdited.GetHashCode();
                if (this.SuburbTrendsEdited != null)
                    hashCode = hashCode * 59 + this.SuburbTrendsEdited.GetHashCode();
                if (this.NumberOfCoordinateChanges != null)
                    hashCode = hashCode * 59 + this.NumberOfCoordinateChanges.GetHashCode();
                if (this.ComparativeSalesMap != null)
                    hashCode = hashCode * 59 + this.ComparativeSalesMap.GetHashCode();
                if (this.AnnualSuburbTrendGraph != null)
                    hashCode = hashCode * 59 + this.AnnualSuburbTrendGraph.GetHashCode();
                if (this.MonthlySuburbTrendGraph != null)
                    hashCode = hashCode * 59 + this.MonthlySuburbTrendGraph.GetHashCode();
                if (this.EndorsementDocuments != null)
                    hashCode = hashCode * 59 + this.EndorsementDocuments.GetHashCode();
                if (this.HistoricDocuments != null)
                    hashCode = hashCode * 59 + this.HistoricDocuments.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                if (this.TransferHistory != null)
                    hashCode = hashCode * 59 + this.TransferHistory.GetHashCode();
                if (this.PropertyConfiguration != null)
                    hashCode = hashCode * 59 + this.PropertyConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
