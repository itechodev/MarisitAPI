/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialHeader
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialHeader :  IEquatable<TransunionCommercialHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialHeader" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="dateOfHeader">dateOfHeader.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="businessType">businessType.</param>
        /// <param name="dunsNumber">dunsNumber.</param>
        /// <param name="startingCapital">startingCapital.</param>
        /// <param name="purchasePrice">purchasePrice.</param>
        /// <param name="industry">industry.</param>
        /// <param name="businessFunction">businessFunction.</param>
        /// <param name="businessCategory">businessCategory.</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        /// <param name="suburb">suburb.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="postalAddress">postalAddress.</param>
        /// <param name="postalSuburb">postalSuburb.</param>
        /// <param name="postalCity">postalCity.</param>
        /// <param name="postalCountry">postalCountry.</param>
        /// <param name="postalPostCode">postalPostCode.</param>
        /// <param name="phone">phone.</param>
        /// <param name="fax">fax.</param>
        /// <param name="vatNumbers">vatNumbers.</param>
        /// <param name="website">website.</param>
        /// <param name="email">email.</param>
        /// <param name="taxNumber">taxNumber.</param>
        /// <param name="tradingNumber">tradingNumber.</param>
        /// <param name="drCategory">drCategory.</param>
        public TransunionCommercialHeader(string majorProduct = default(string), string dateOfHeader = default(string), string startDate = default(string), string businessType = default(string), string dunsNumber = default(string), string startingCapital = default(string), string purchasePrice = default(string), string industry = default(string), string businessFunction = default(string), string businessCategory = default(string), string physicalAddress = default(string), string suburb = default(string), string city = default(string), string country = default(string), string postCode = default(string), string postalAddress = default(string), string postalSuburb = default(string), string postalCity = default(string), string postalCountry = default(string), string postalPostCode = default(string), string phone = default(string), string fax = default(string), List<string> vatNumbers = default(List<string>), string website = default(string), string email = default(string), string taxNumber = default(string), string tradingNumber = default(string), string drCategory = default(string))
        {
            this.MajorProduct = majorProduct;
            this.DateOfHeader = dateOfHeader;
            this.StartDate = startDate;
            this.BusinessType = businessType;
            this.DunsNumber = dunsNumber;
            this.StartingCapital = startingCapital;
            this.PurchasePrice = purchasePrice;
            this.Industry = industry;
            this.BusinessFunction = businessFunction;
            this.BusinessCategory = businessCategory;
            this.PhysicalAddress = physicalAddress;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.PostalAddress = postalAddress;
            this.PostalSuburb = postalSuburb;
            this.PostalCity = postalCity;
            this.PostalCountry = postalCountry;
            this.PostalPostCode = postalPostCode;
            this.Phone = phone;
            this.Fax = fax;
            this.VatNumbers = vatNumbers;
            this.Website = website;
            this.Email = email;
            this.TaxNumber = taxNumber;
            this.TradingNumber = tradingNumber;
            this.DrCategory = drCategory;
            this.MajorProduct = majorProduct;
            this.DateOfHeader = dateOfHeader;
            this.StartDate = startDate;
            this.BusinessType = businessType;
            this.DunsNumber = dunsNumber;
            this.StartingCapital = startingCapital;
            this.PurchasePrice = purchasePrice;
            this.Industry = industry;
            this.BusinessFunction = businessFunction;
            this.BusinessCategory = businessCategory;
            this.PhysicalAddress = physicalAddress;
            this.Suburb = suburb;
            this.City = city;
            this.Country = country;
            this.PostCode = postCode;
            this.PostalAddress = postalAddress;
            this.PostalSuburb = postalSuburb;
            this.PostalCity = postalCity;
            this.PostalCountry = postalCountry;
            this.PostalPostCode = postalPostCode;
            this.Phone = phone;
            this.Fax = fax;
            this.VatNumbers = vatNumbers;
            this.Website = website;
            this.Email = email;
            this.TaxNumber = taxNumber;
            this.TradingNumber = tradingNumber;
            this.DrCategory = drCategory;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets DateOfHeader
        /// </summary>
        [DataMember(Name="dateOfHeader", EmitDefaultValue=true)]
        public string DateOfHeader { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets BusinessType
        /// </summary>
        [DataMember(Name="businessType", EmitDefaultValue=true)]
        public string BusinessType { get; set; }

        /// <summary>
        /// Gets or Sets DunsNumber
        /// </summary>
        [DataMember(Name="dunsNumber", EmitDefaultValue=true)]
        public string DunsNumber { get; set; }

        /// <summary>
        /// Gets or Sets StartingCapital
        /// </summary>
        [DataMember(Name="startingCapital", EmitDefaultValue=true)]
        public string StartingCapital { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="purchasePrice", EmitDefaultValue=true)]
        public string PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets Industry
        /// </summary>
        [DataMember(Name="industry", EmitDefaultValue=true)]
        public string Industry { get; set; }

        /// <summary>
        /// Gets or Sets BusinessFunction
        /// </summary>
        [DataMember(Name="businessFunction", EmitDefaultValue=true)]
        public string BusinessFunction { get; set; }

        /// <summary>
        /// Gets or Sets BusinessCategory
        /// </summary>
        [DataMember(Name="businessCategory", EmitDefaultValue=true)]
        public string BusinessCategory { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name="physicalAddress", EmitDefaultValue=true)]
        public string PhysicalAddress { get; set; }

        /// <summary>
        /// Gets or Sets Suburb
        /// </summary>
        [DataMember(Name="suburb", EmitDefaultValue=true)]
        public string Suburb { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=true)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets PostalAddress
        /// </summary>
        [DataMember(Name="postalAddress", EmitDefaultValue=true)]
        public string PostalAddress { get; set; }

        /// <summary>
        /// Gets or Sets PostalSuburb
        /// </summary>
        [DataMember(Name="postalSuburb", EmitDefaultValue=true)]
        public string PostalSuburb { get; set; }

        /// <summary>
        /// Gets or Sets PostalCity
        /// </summary>
        [DataMember(Name="postalCity", EmitDefaultValue=true)]
        public string PostalCity { get; set; }

        /// <summary>
        /// Gets or Sets PostalCountry
        /// </summary>
        [DataMember(Name="postalCountry", EmitDefaultValue=true)]
        public string PostalCountry { get; set; }

        /// <summary>
        /// Gets or Sets PostalPostCode
        /// </summary>
        [DataMember(Name="postalPostCode", EmitDefaultValue=true)]
        public string PostalPostCode { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=true)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets VatNumbers
        /// </summary>
        [DataMember(Name="vatNumbers", EmitDefaultValue=true)]
        public List<string> VatNumbers { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=true)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets TaxNumber
        /// </summary>
        [DataMember(Name="taxNumber", EmitDefaultValue=true)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets TradingNumber
        /// </summary>
        [DataMember(Name="tradingNumber", EmitDefaultValue=true)]
        public string TradingNumber { get; set; }

        /// <summary>
        /// Gets or Sets DrCategory
        /// </summary>
        [DataMember(Name="drCategory", EmitDefaultValue=true)]
        public string DrCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialHeader {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  DateOfHeader: ").Append(DateOfHeader).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  DunsNumber: ").Append(DunsNumber).Append("\n");
            sb.Append("  StartingCapital: ").Append(StartingCapital).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  BusinessFunction: ").Append(BusinessFunction).Append("\n");
            sb.Append("  BusinessCategory: ").Append(BusinessCategory).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("  Suburb: ").Append(Suburb).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  PostalAddress: ").Append(PostalAddress).Append("\n");
            sb.Append("  PostalSuburb: ").Append(PostalSuburb).Append("\n");
            sb.Append("  PostalCity: ").Append(PostalCity).Append("\n");
            sb.Append("  PostalCountry: ").Append(PostalCountry).Append("\n");
            sb.Append("  PostalPostCode: ").Append(PostalPostCode).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  VatNumbers: ").Append(VatNumbers).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  TradingNumber: ").Append(TradingNumber).Append("\n");
            sb.Append("  DrCategory: ").Append(DrCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialHeader);
        }

        /// <summary>
        /// Returns true if TransunionCommercialHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.DateOfHeader == input.DateOfHeader ||
                    (this.DateOfHeader != null &&
                    this.DateOfHeader.Equals(input.DateOfHeader))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    (this.BusinessType != null &&
                    this.BusinessType.Equals(input.BusinessType))
                ) && 
                (
                    this.DunsNumber == input.DunsNumber ||
                    (this.DunsNumber != null &&
                    this.DunsNumber.Equals(input.DunsNumber))
                ) && 
                (
                    this.StartingCapital == input.StartingCapital ||
                    (this.StartingCapital != null &&
                    this.StartingCapital.Equals(input.StartingCapital))
                ) && 
                (
                    this.PurchasePrice == input.PurchasePrice ||
                    (this.PurchasePrice != null &&
                    this.PurchasePrice.Equals(input.PurchasePrice))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.BusinessFunction == input.BusinessFunction ||
                    (this.BusinessFunction != null &&
                    this.BusinessFunction.Equals(input.BusinessFunction))
                ) && 
                (
                    this.BusinessCategory == input.BusinessCategory ||
                    (this.BusinessCategory != null &&
                    this.BusinessCategory.Equals(input.BusinessCategory))
                ) && 
                (
                    this.PhysicalAddress == input.PhysicalAddress ||
                    (this.PhysicalAddress != null &&
                    this.PhysicalAddress.Equals(input.PhysicalAddress))
                ) && 
                (
                    this.Suburb == input.Suburb ||
                    (this.Suburb != null &&
                    this.Suburb.Equals(input.Suburb))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.PostalAddress == input.PostalAddress ||
                    (this.PostalAddress != null &&
                    this.PostalAddress.Equals(input.PostalAddress))
                ) && 
                (
                    this.PostalSuburb == input.PostalSuburb ||
                    (this.PostalSuburb != null &&
                    this.PostalSuburb.Equals(input.PostalSuburb))
                ) && 
                (
                    this.PostalCity == input.PostalCity ||
                    (this.PostalCity != null &&
                    this.PostalCity.Equals(input.PostalCity))
                ) && 
                (
                    this.PostalCountry == input.PostalCountry ||
                    (this.PostalCountry != null &&
                    this.PostalCountry.Equals(input.PostalCountry))
                ) && 
                (
                    this.PostalPostCode == input.PostalPostCode ||
                    (this.PostalPostCode != null &&
                    this.PostalPostCode.Equals(input.PostalPostCode))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.VatNumbers == input.VatNumbers ||
                    this.VatNumbers != null &&
                    input.VatNumbers != null &&
                    this.VatNumbers.SequenceEqual(input.VatNumbers)
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.TaxNumber == input.TaxNumber ||
                    (this.TaxNumber != null &&
                    this.TaxNumber.Equals(input.TaxNumber))
                ) && 
                (
                    this.TradingNumber == input.TradingNumber ||
                    (this.TradingNumber != null &&
                    this.TradingNumber.Equals(input.TradingNumber))
                ) && 
                (
                    this.DrCategory == input.DrCategory ||
                    (this.DrCategory != null &&
                    this.DrCategory.Equals(input.DrCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.DateOfHeader != null)
                    hashCode = hashCode * 59 + this.DateOfHeader.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.BusinessType != null)
                    hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                if (this.DunsNumber != null)
                    hashCode = hashCode * 59 + this.DunsNumber.GetHashCode();
                if (this.StartingCapital != null)
                    hashCode = hashCode * 59 + this.StartingCapital.GetHashCode();
                if (this.PurchasePrice != null)
                    hashCode = hashCode * 59 + this.PurchasePrice.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.BusinessFunction != null)
                    hashCode = hashCode * 59 + this.BusinessFunction.GetHashCode();
                if (this.BusinessCategory != null)
                    hashCode = hashCode * 59 + this.BusinessCategory.GetHashCode();
                if (this.PhysicalAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalAddress.GetHashCode();
                if (this.Suburb != null)
                    hashCode = hashCode * 59 + this.Suburb.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.PostalAddress != null)
                    hashCode = hashCode * 59 + this.PostalAddress.GetHashCode();
                if (this.PostalSuburb != null)
                    hashCode = hashCode * 59 + this.PostalSuburb.GetHashCode();
                if (this.PostalCity != null)
                    hashCode = hashCode * 59 + this.PostalCity.GetHashCode();
                if (this.PostalCountry != null)
                    hashCode = hashCode * 59 + this.PostalCountry.GetHashCode();
                if (this.PostalPostCode != null)
                    hashCode = hashCode * 59 + this.PostalPostCode.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.VatNumbers != null)
                    hashCode = hashCode * 59 + this.VatNumbers.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.TaxNumber != null)
                    hashCode = hashCode * 59 + this.TaxNumber.GetHashCode();
                if (this.TradingNumber != null)
                    hashCode = hashCode * 59 + this.TradingNumber.GetHashCode();
                if (this.DrCategory != null)
                    hashCode = hashCode * 59 + this.DrCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
