/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsIndustryPayments
    /// </summary>
    [DataContract]
    public partial class XdsIndustryPayments :  IEquatable<XdsIndustryPayments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsIndustryPayments" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="industryDescription">industryDescription.</param>
        /// <param name="noofAccounts">noofAccounts.</param>
        /// <param name="paidMonths03">paidMonths03.</param>
        /// <param name="paidMonths12orMore">paidMonths12orMore.</param>
        /// <param name="paidMonths36">paidMonths36.</param>
        /// <param name="paidMonths69">paidMonths69.</param>
        public XdsIndustryPayments(string displayText = default(string), string industryDescription = default(string), string noofAccounts = default(string), string paidMonths03 = default(string), string paidMonths12orMore = default(string), string paidMonths36 = default(string), string paidMonths69 = default(string))
        {
            this.DisplayText = displayText;
            this.IndustryDescription = industryDescription;
            this.NoofAccounts = noofAccounts;
            this.PaidMonths03 = paidMonths03;
            this.PaidMonths12orMore = paidMonths12orMore;
            this.PaidMonths36 = paidMonths36;
            this.PaidMonths69 = paidMonths69;
            this.DisplayText = displayText;
            this.IndustryDescription = industryDescription;
            this.NoofAccounts = noofAccounts;
            this.PaidMonths03 = paidMonths03;
            this.PaidMonths12orMore = paidMonths12orMore;
            this.PaidMonths36 = paidMonths36;
            this.PaidMonths69 = paidMonths69;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets IndustryDescription
        /// </summary>
        [DataMember(Name="industryDescription", EmitDefaultValue=true)]
        public string IndustryDescription { get; set; }

        /// <summary>
        /// Gets or Sets NoofAccounts
        /// </summary>
        [DataMember(Name="noofAccounts", EmitDefaultValue=true)]
        public string NoofAccounts { get; set; }

        /// <summary>
        /// Gets or Sets PaidMonths03
        /// </summary>
        [DataMember(Name="paidMonths03", EmitDefaultValue=true)]
        public string PaidMonths03 { get; set; }

        /// <summary>
        /// Gets or Sets PaidMonths12orMore
        /// </summary>
        [DataMember(Name="paidMonths12orMore", EmitDefaultValue=true)]
        public string PaidMonths12orMore { get; set; }

        /// <summary>
        /// Gets or Sets PaidMonths36
        /// </summary>
        [DataMember(Name="paidMonths36", EmitDefaultValue=true)]
        public string PaidMonths36 { get; set; }

        /// <summary>
        /// Gets or Sets PaidMonths69
        /// </summary>
        [DataMember(Name="paidMonths69", EmitDefaultValue=true)]
        public string PaidMonths69 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsIndustryPayments {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  IndustryDescription: ").Append(IndustryDescription).Append("\n");
            sb.Append("  NoofAccounts: ").Append(NoofAccounts).Append("\n");
            sb.Append("  PaidMonths03: ").Append(PaidMonths03).Append("\n");
            sb.Append("  PaidMonths12orMore: ").Append(PaidMonths12orMore).Append("\n");
            sb.Append("  PaidMonths36: ").Append(PaidMonths36).Append("\n");
            sb.Append("  PaidMonths69: ").Append(PaidMonths69).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsIndustryPayments);
        }

        /// <summary>
        /// Returns true if XdsIndustryPayments instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsIndustryPayments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsIndustryPayments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.IndustryDescription == input.IndustryDescription ||
                    (this.IndustryDescription != null &&
                    this.IndustryDescription.Equals(input.IndustryDescription))
                ) && 
                (
                    this.NoofAccounts == input.NoofAccounts ||
                    (this.NoofAccounts != null &&
                    this.NoofAccounts.Equals(input.NoofAccounts))
                ) && 
                (
                    this.PaidMonths03 == input.PaidMonths03 ||
                    (this.PaidMonths03 != null &&
                    this.PaidMonths03.Equals(input.PaidMonths03))
                ) && 
                (
                    this.PaidMonths12orMore == input.PaidMonths12orMore ||
                    (this.PaidMonths12orMore != null &&
                    this.PaidMonths12orMore.Equals(input.PaidMonths12orMore))
                ) && 
                (
                    this.PaidMonths36 == input.PaidMonths36 ||
                    (this.PaidMonths36 != null &&
                    this.PaidMonths36.Equals(input.PaidMonths36))
                ) && 
                (
                    this.PaidMonths69 == input.PaidMonths69 ||
                    (this.PaidMonths69 != null &&
                    this.PaidMonths69.Equals(input.PaidMonths69))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.IndustryDescription != null)
                    hashCode = hashCode * 59 + this.IndustryDescription.GetHashCode();
                if (this.NoofAccounts != null)
                    hashCode = hashCode * 59 + this.NoofAccounts.GetHashCode();
                if (this.PaidMonths03 != null)
                    hashCode = hashCode * 59 + this.PaidMonths03.GetHashCode();
                if (this.PaidMonths12orMore != null)
                    hashCode = hashCode * 59 + this.PaidMonths12orMore.GetHashCode();
                if (this.PaidMonths36 != null)
                    hashCode = hashCode * 59 + this.PaidMonths36.GetHashCode();
                if (this.PaidMonths69 != null)
                    hashCode = hashCode * 59 + this.PaidMonths69.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
