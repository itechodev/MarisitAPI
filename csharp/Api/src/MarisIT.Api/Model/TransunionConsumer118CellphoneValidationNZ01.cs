/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118CellphoneValidationNZ01
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118CellphoneValidationNZ01 :  IEquatable<TransunionConsumer118CellphoneValidationNZ01>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118CellphoneValidationNZ01" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="cellNo">cellNo.</param>
        /// <param name="cellVerificationDesc">cellVerificationDesc.</param>
        /// <param name="cellDateFirstUsed">cellDateFirstUsed.</param>
        public TransunionConsumer118CellphoneValidationNZ01(string consumerNo = default(string), string cellNo = default(string), string cellVerificationDesc = default(string), string cellDateFirstUsed = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.CellNo = cellNo;
            this.CellVerificationDesc = cellVerificationDesc;
            this.CellDateFirstUsed = cellDateFirstUsed;
            this.ConsumerNo = consumerNo;
            this.CellNo = cellNo;
            this.CellVerificationDesc = cellVerificationDesc;
            this.CellDateFirstUsed = cellDateFirstUsed;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets CellNo
        /// </summary>
        [DataMember(Name="cellNo", EmitDefaultValue=true)]
        public string CellNo { get; set; }

        /// <summary>
        /// Gets or Sets CellVerificationDesc
        /// </summary>
        [DataMember(Name="cellVerificationDesc", EmitDefaultValue=true)]
        public string CellVerificationDesc { get; set; }

        /// <summary>
        /// Gets or Sets CellDateFirstUsed
        /// </summary>
        [DataMember(Name="cellDateFirstUsed", EmitDefaultValue=true)]
        public string CellDateFirstUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118CellphoneValidationNZ01 {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  CellNo: ").Append(CellNo).Append("\n");
            sb.Append("  CellVerificationDesc: ").Append(CellVerificationDesc).Append("\n");
            sb.Append("  CellDateFirstUsed: ").Append(CellDateFirstUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118CellphoneValidationNZ01);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118CellphoneValidationNZ01 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118CellphoneValidationNZ01 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118CellphoneValidationNZ01 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.CellNo == input.CellNo ||
                    (this.CellNo != null &&
                    this.CellNo.Equals(input.CellNo))
                ) && 
                (
                    this.CellVerificationDesc == input.CellVerificationDesc ||
                    (this.CellVerificationDesc != null &&
                    this.CellVerificationDesc.Equals(input.CellVerificationDesc))
                ) && 
                (
                    this.CellDateFirstUsed == input.CellDateFirstUsed ||
                    (this.CellDateFirstUsed != null &&
                    this.CellDateFirstUsed.Equals(input.CellDateFirstUsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.CellNo != null)
                    hashCode = hashCode * 59 + this.CellNo.GetHashCode();
                if (this.CellVerificationDesc != null)
                    hashCode = hashCode * 59 + this.CellVerificationDesc.GetHashCode();
                if (this.CellDateFirstUsed != null)
                    hashCode = hashCode * 59 + this.CellDateFirstUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
