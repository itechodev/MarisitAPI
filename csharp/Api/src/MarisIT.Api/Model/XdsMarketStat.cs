/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsMarketStat
    /// </summary>
    [DataContract]
    public partial class XdsMarketStat :  IEquatable<XdsMarketStat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsMarketStat" /> class.
        /// </summary>
        /// <param name="statsPeriod">statsPeriod.</param>
        /// <param name="priceMarket">priceMarket.</param>
        /// <param name="vehicleYear">vehicleYear.</param>
        public XdsMarketStat(string statsPeriod = default(string), string priceMarket = default(string), string vehicleYear = default(string))
        {
            this.StatsPeriod = statsPeriod;
            this.PriceMarket = priceMarket;
            this.VehicleYear = vehicleYear;
            this.StatsPeriod = statsPeriod;
            this.PriceMarket = priceMarket;
            this.VehicleYear = vehicleYear;
        }

        /// <summary>
        /// Gets or Sets StatsPeriod
        /// </summary>
        [DataMember(Name="statsPeriod", EmitDefaultValue=true)]
        public string StatsPeriod { get; set; }

        /// <summary>
        /// Gets or Sets PriceMarket
        /// </summary>
        [DataMember(Name="priceMarket", EmitDefaultValue=true)]
        public string PriceMarket { get; set; }

        /// <summary>
        /// Gets or Sets VehicleYear
        /// </summary>
        [DataMember(Name="vehicleYear", EmitDefaultValue=true)]
        public string VehicleYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsMarketStat {\n");
            sb.Append("  StatsPeriod: ").Append(StatsPeriod).Append("\n");
            sb.Append("  PriceMarket: ").Append(PriceMarket).Append("\n");
            sb.Append("  VehicleYear: ").Append(VehicleYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsMarketStat);
        }

        /// <summary>
        /// Returns true if XdsMarketStat instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsMarketStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsMarketStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatsPeriod == input.StatsPeriod ||
                    (this.StatsPeriod != null &&
                    this.StatsPeriod.Equals(input.StatsPeriod))
                ) && 
                (
                    this.PriceMarket == input.PriceMarket ||
                    (this.PriceMarket != null &&
                    this.PriceMarket.Equals(input.PriceMarket))
                ) && 
                (
                    this.VehicleYear == input.VehicleYear ||
                    (this.VehicleYear != null &&
                    this.VehicleYear.Equals(input.VehicleYear))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatsPeriod != null)
                    hashCode = hashCode * 59 + this.StatsPeriod.GetHashCode();
                if (this.PriceMarket != null)
                    hashCode = hashCode * 59 + this.PriceMarket.GetHashCode();
                if (this.VehicleYear != null)
                    hashCode = hashCode * 59 + this.VehicleYear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
