/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionCommercialFinancialRatios
    /// </summary>
    [DataContract]
    public partial class TransunionCommercialFinancialRatios :  IEquatable<TransunionCommercialFinancialRatios>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionCommercialFinancialRatios" /> class.
        /// </summary>
        /// <param name="majorProduct">majorProduct.</param>
        /// <param name="infoDate">infoDate.</param>
        /// <param name="currency">currency.</param>
        /// <param name="balanceSheetDate">balanceSheetDate.</param>
        /// <param name="profitabilityRatio">profitabilityRatio.</param>
        /// <param name="gearingRatio">gearingRatio.</param>
        /// <param name="interestCoverRatio">interestCoverRatio.</param>
        /// <param name="currentRatio">currentRatio.</param>
        /// <param name="acidTestRatio">acidTestRatio.</param>
        /// <param name="returnOnEquityRatio">returnOnEquityRatio.</param>
        /// <param name="turnover">turnover.</param>
        /// <param name="profitBeforeInterestTax">profitBeforeInterestTax.</param>
        /// <param name="interestPaid">interestPaid.</param>
        /// <param name="ownersEquity">ownersEquity.</param>
        /// <param name="currentAssets">currentAssets.</param>
        /// <param name="currentLiabilities">currentLiabilities.</param>
        /// <param name="longTermLiabilities">longTermLiabilities.</param>
        /// <param name="inventory">inventory.</param>
        /// <param name="comment">comment.</param>
        /// <param name="balanceSheetType">balanceSheetType.</param>
        /// <param name="financialYearEndDate">financialYearEndDate.</param>
        public TransunionCommercialFinancialRatios(string majorProduct = default(string), string infoDate = default(string), List<string> currency = default(List<string>), List<string> balanceSheetDate = default(List<string>), List<string> profitabilityRatio = default(List<string>), List<string> gearingRatio = default(List<string>), List<string> interestCoverRatio = default(List<string>), List<string> currentRatio = default(List<string>), List<string> acidTestRatio = default(List<string>), List<string> returnOnEquityRatio = default(List<string>), List<string> turnover = default(List<string>), List<string> profitBeforeInterestTax = default(List<string>), List<string> interestPaid = default(List<string>), List<string> ownersEquity = default(List<string>), List<string> currentAssets = default(List<string>), List<string> currentLiabilities = default(List<string>), List<string> longTermLiabilities = default(List<string>), List<string> inventory = default(List<string>), string comment = default(string), List<string> balanceSheetType = default(List<string>), List<string> financialYearEndDate = default(List<string>))
        {
            this.MajorProduct = majorProduct;
            this.InfoDate = infoDate;
            this.Currency = currency;
            this.BalanceSheetDate = balanceSheetDate;
            this.ProfitabilityRatio = profitabilityRatio;
            this.GearingRatio = gearingRatio;
            this.InterestCoverRatio = interestCoverRatio;
            this.CurrentRatio = currentRatio;
            this.AcidTestRatio = acidTestRatio;
            this.ReturnOnEquityRatio = returnOnEquityRatio;
            this.Turnover = turnover;
            this.ProfitBeforeInterestTax = profitBeforeInterestTax;
            this.InterestPaid = interestPaid;
            this.OwnersEquity = ownersEquity;
            this.CurrentAssets = currentAssets;
            this.CurrentLiabilities = currentLiabilities;
            this.LongTermLiabilities = longTermLiabilities;
            this.Inventory = inventory;
            this.Comment = comment;
            this.BalanceSheetType = balanceSheetType;
            this.FinancialYearEndDate = financialYearEndDate;
            this.MajorProduct = majorProduct;
            this.InfoDate = infoDate;
            this.Currency = currency;
            this.BalanceSheetDate = balanceSheetDate;
            this.ProfitabilityRatio = profitabilityRatio;
            this.GearingRatio = gearingRatio;
            this.InterestCoverRatio = interestCoverRatio;
            this.CurrentRatio = currentRatio;
            this.AcidTestRatio = acidTestRatio;
            this.ReturnOnEquityRatio = returnOnEquityRatio;
            this.Turnover = turnover;
            this.ProfitBeforeInterestTax = profitBeforeInterestTax;
            this.InterestPaid = interestPaid;
            this.OwnersEquity = ownersEquity;
            this.CurrentAssets = currentAssets;
            this.CurrentLiabilities = currentLiabilities;
            this.LongTermLiabilities = longTermLiabilities;
            this.Inventory = inventory;
            this.Comment = comment;
            this.BalanceSheetType = balanceSheetType;
            this.FinancialYearEndDate = financialYearEndDate;
        }

        /// <summary>
        /// Gets or Sets MajorProduct
        /// </summary>
        [DataMember(Name="majorProduct", EmitDefaultValue=true)]
        public string MajorProduct { get; set; }

        /// <summary>
        /// Gets or Sets InfoDate
        /// </summary>
        [DataMember(Name="infoDate", EmitDefaultValue=true)]
        public string InfoDate { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public List<string> Currency { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetDate
        /// </summary>
        [DataMember(Name="balanceSheetDate", EmitDefaultValue=true)]
        public List<string> BalanceSheetDate { get; set; }

        /// <summary>
        /// Gets or Sets ProfitabilityRatio
        /// </summary>
        [DataMember(Name="profitabilityRatio", EmitDefaultValue=true)]
        public List<string> ProfitabilityRatio { get; set; }

        /// <summary>
        /// Gets or Sets GearingRatio
        /// </summary>
        [DataMember(Name="gearingRatio", EmitDefaultValue=true)]
        public List<string> GearingRatio { get; set; }

        /// <summary>
        /// Gets or Sets InterestCoverRatio
        /// </summary>
        [DataMember(Name="interestCoverRatio", EmitDefaultValue=true)]
        public List<string> InterestCoverRatio { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRatio
        /// </summary>
        [DataMember(Name="currentRatio", EmitDefaultValue=true)]
        public List<string> CurrentRatio { get; set; }

        /// <summary>
        /// Gets or Sets AcidTestRatio
        /// </summary>
        [DataMember(Name="acidTestRatio", EmitDefaultValue=true)]
        public List<string> AcidTestRatio { get; set; }

        /// <summary>
        /// Gets or Sets ReturnOnEquityRatio
        /// </summary>
        [DataMember(Name="returnOnEquityRatio", EmitDefaultValue=true)]
        public List<string> ReturnOnEquityRatio { get; set; }

        /// <summary>
        /// Gets or Sets Turnover
        /// </summary>
        [DataMember(Name="turnover", EmitDefaultValue=true)]
        public List<string> Turnover { get; set; }

        /// <summary>
        /// Gets or Sets ProfitBeforeInterestTax
        /// </summary>
        [DataMember(Name="profitBeforeInterestTax", EmitDefaultValue=true)]
        public List<string> ProfitBeforeInterestTax { get; set; }

        /// <summary>
        /// Gets or Sets InterestPaid
        /// </summary>
        [DataMember(Name="interestPaid", EmitDefaultValue=true)]
        public List<string> InterestPaid { get; set; }

        /// <summary>
        /// Gets or Sets OwnersEquity
        /// </summary>
        [DataMember(Name="ownersEquity", EmitDefaultValue=true)]
        public List<string> OwnersEquity { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAssets
        /// </summary>
        [DataMember(Name="currentAssets", EmitDefaultValue=true)]
        public List<string> CurrentAssets { get; set; }

        /// <summary>
        /// Gets or Sets CurrentLiabilities
        /// </summary>
        [DataMember(Name="currentLiabilities", EmitDefaultValue=true)]
        public List<string> CurrentLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets LongTermLiabilities
        /// </summary>
        [DataMember(Name="longTermLiabilities", EmitDefaultValue=true)]
        public List<string> LongTermLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="inventory", EmitDefaultValue=true)]
        public List<string> Inventory { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets BalanceSheetType
        /// </summary>
        [DataMember(Name="balanceSheetType", EmitDefaultValue=true)]
        public List<string> BalanceSheetType { get; set; }

        /// <summary>
        /// Gets or Sets FinancialYearEndDate
        /// </summary>
        [DataMember(Name="financialYearEndDate", EmitDefaultValue=true)]
        public List<string> FinancialYearEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionCommercialFinancialRatios {\n");
            sb.Append("  MajorProduct: ").Append(MajorProduct).Append("\n");
            sb.Append("  InfoDate: ").Append(InfoDate).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  BalanceSheetDate: ").Append(BalanceSheetDate).Append("\n");
            sb.Append("  ProfitabilityRatio: ").Append(ProfitabilityRatio).Append("\n");
            sb.Append("  GearingRatio: ").Append(GearingRatio).Append("\n");
            sb.Append("  InterestCoverRatio: ").Append(InterestCoverRatio).Append("\n");
            sb.Append("  CurrentRatio: ").Append(CurrentRatio).Append("\n");
            sb.Append("  AcidTestRatio: ").Append(AcidTestRatio).Append("\n");
            sb.Append("  ReturnOnEquityRatio: ").Append(ReturnOnEquityRatio).Append("\n");
            sb.Append("  Turnover: ").Append(Turnover).Append("\n");
            sb.Append("  ProfitBeforeInterestTax: ").Append(ProfitBeforeInterestTax).Append("\n");
            sb.Append("  InterestPaid: ").Append(InterestPaid).Append("\n");
            sb.Append("  OwnersEquity: ").Append(OwnersEquity).Append("\n");
            sb.Append("  CurrentAssets: ").Append(CurrentAssets).Append("\n");
            sb.Append("  CurrentLiabilities: ").Append(CurrentLiabilities).Append("\n");
            sb.Append("  LongTermLiabilities: ").Append(LongTermLiabilities).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  BalanceSheetType: ").Append(BalanceSheetType).Append("\n");
            sb.Append("  FinancialYearEndDate: ").Append(FinancialYearEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionCommercialFinancialRatios);
        }

        /// <summary>
        /// Returns true if TransunionCommercialFinancialRatios instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionCommercialFinancialRatios to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionCommercialFinancialRatios input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MajorProduct == input.MajorProduct ||
                    (this.MajorProduct != null &&
                    this.MajorProduct.Equals(input.MajorProduct))
                ) && 
                (
                    this.InfoDate == input.InfoDate ||
                    (this.InfoDate != null &&
                    this.InfoDate.Equals(input.InfoDate))
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency != null &&
                    input.Currency != null &&
                    this.Currency.SequenceEqual(input.Currency)
                ) && 
                (
                    this.BalanceSheetDate == input.BalanceSheetDate ||
                    this.BalanceSheetDate != null &&
                    input.BalanceSheetDate != null &&
                    this.BalanceSheetDate.SequenceEqual(input.BalanceSheetDate)
                ) && 
                (
                    this.ProfitabilityRatio == input.ProfitabilityRatio ||
                    this.ProfitabilityRatio != null &&
                    input.ProfitabilityRatio != null &&
                    this.ProfitabilityRatio.SequenceEqual(input.ProfitabilityRatio)
                ) && 
                (
                    this.GearingRatio == input.GearingRatio ||
                    this.GearingRatio != null &&
                    input.GearingRatio != null &&
                    this.GearingRatio.SequenceEqual(input.GearingRatio)
                ) && 
                (
                    this.InterestCoverRatio == input.InterestCoverRatio ||
                    this.InterestCoverRatio != null &&
                    input.InterestCoverRatio != null &&
                    this.InterestCoverRatio.SequenceEqual(input.InterestCoverRatio)
                ) && 
                (
                    this.CurrentRatio == input.CurrentRatio ||
                    this.CurrentRatio != null &&
                    input.CurrentRatio != null &&
                    this.CurrentRatio.SequenceEqual(input.CurrentRatio)
                ) && 
                (
                    this.AcidTestRatio == input.AcidTestRatio ||
                    this.AcidTestRatio != null &&
                    input.AcidTestRatio != null &&
                    this.AcidTestRatio.SequenceEqual(input.AcidTestRatio)
                ) && 
                (
                    this.ReturnOnEquityRatio == input.ReturnOnEquityRatio ||
                    this.ReturnOnEquityRatio != null &&
                    input.ReturnOnEquityRatio != null &&
                    this.ReturnOnEquityRatio.SequenceEqual(input.ReturnOnEquityRatio)
                ) && 
                (
                    this.Turnover == input.Turnover ||
                    this.Turnover != null &&
                    input.Turnover != null &&
                    this.Turnover.SequenceEqual(input.Turnover)
                ) && 
                (
                    this.ProfitBeforeInterestTax == input.ProfitBeforeInterestTax ||
                    this.ProfitBeforeInterestTax != null &&
                    input.ProfitBeforeInterestTax != null &&
                    this.ProfitBeforeInterestTax.SequenceEqual(input.ProfitBeforeInterestTax)
                ) && 
                (
                    this.InterestPaid == input.InterestPaid ||
                    this.InterestPaid != null &&
                    input.InterestPaid != null &&
                    this.InterestPaid.SequenceEqual(input.InterestPaid)
                ) && 
                (
                    this.OwnersEquity == input.OwnersEquity ||
                    this.OwnersEquity != null &&
                    input.OwnersEquity != null &&
                    this.OwnersEquity.SequenceEqual(input.OwnersEquity)
                ) && 
                (
                    this.CurrentAssets == input.CurrentAssets ||
                    this.CurrentAssets != null &&
                    input.CurrentAssets != null &&
                    this.CurrentAssets.SequenceEqual(input.CurrentAssets)
                ) && 
                (
                    this.CurrentLiabilities == input.CurrentLiabilities ||
                    this.CurrentLiabilities != null &&
                    input.CurrentLiabilities != null &&
                    this.CurrentLiabilities.SequenceEqual(input.CurrentLiabilities)
                ) && 
                (
                    this.LongTermLiabilities == input.LongTermLiabilities ||
                    this.LongTermLiabilities != null &&
                    input.LongTermLiabilities != null &&
                    this.LongTermLiabilities.SequenceEqual(input.LongTermLiabilities)
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    this.Inventory != null &&
                    input.Inventory != null &&
                    this.Inventory.SequenceEqual(input.Inventory)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.BalanceSheetType == input.BalanceSheetType ||
                    this.BalanceSheetType != null &&
                    input.BalanceSheetType != null &&
                    this.BalanceSheetType.SequenceEqual(input.BalanceSheetType)
                ) && 
                (
                    this.FinancialYearEndDate == input.FinancialYearEndDate ||
                    this.FinancialYearEndDate != null &&
                    input.FinancialYearEndDate != null &&
                    this.FinancialYearEndDate.SequenceEqual(input.FinancialYearEndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MajorProduct != null)
                    hashCode = hashCode * 59 + this.MajorProduct.GetHashCode();
                if (this.InfoDate != null)
                    hashCode = hashCode * 59 + this.InfoDate.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.BalanceSheetDate != null)
                    hashCode = hashCode * 59 + this.BalanceSheetDate.GetHashCode();
                if (this.ProfitabilityRatio != null)
                    hashCode = hashCode * 59 + this.ProfitabilityRatio.GetHashCode();
                if (this.GearingRatio != null)
                    hashCode = hashCode * 59 + this.GearingRatio.GetHashCode();
                if (this.InterestCoverRatio != null)
                    hashCode = hashCode * 59 + this.InterestCoverRatio.GetHashCode();
                if (this.CurrentRatio != null)
                    hashCode = hashCode * 59 + this.CurrentRatio.GetHashCode();
                if (this.AcidTestRatio != null)
                    hashCode = hashCode * 59 + this.AcidTestRatio.GetHashCode();
                if (this.ReturnOnEquityRatio != null)
                    hashCode = hashCode * 59 + this.ReturnOnEquityRatio.GetHashCode();
                if (this.Turnover != null)
                    hashCode = hashCode * 59 + this.Turnover.GetHashCode();
                if (this.ProfitBeforeInterestTax != null)
                    hashCode = hashCode * 59 + this.ProfitBeforeInterestTax.GetHashCode();
                if (this.InterestPaid != null)
                    hashCode = hashCode * 59 + this.InterestPaid.GetHashCode();
                if (this.OwnersEquity != null)
                    hashCode = hashCode * 59 + this.OwnersEquity.GetHashCode();
                if (this.CurrentAssets != null)
                    hashCode = hashCode * 59 + this.CurrentAssets.GetHashCode();
                if (this.CurrentLiabilities != null)
                    hashCode = hashCode * 59 + this.CurrentLiabilities.GetHashCode();
                if (this.LongTermLiabilities != null)
                    hashCode = hashCode * 59 + this.LongTermLiabilities.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.BalanceSheetType != null)
                    hashCode = hashCode * 59 + this.BalanceSheetType.GetHashCode();
                if (this.FinancialYearEndDate != null)
                    hashCode = hashCode * 59 + this.FinancialYearEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
