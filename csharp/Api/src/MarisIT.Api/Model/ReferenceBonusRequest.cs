/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// ReferenceBonusRequest
    /// </summary>
    [DataContract]
    public partial class ReferenceBonusRequest :  IEquatable<ReferenceBonusRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceBonusRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceBonusRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceBonusRequest" /> class.
        /// </summary>
        /// <param name="reference">reference (required).</param>
        /// <param name="bonusSegments">bonusSegments.</param>
        public ReferenceBonusRequest(string reference = default(string), List<int> bonusSegments = default(List<int>))
        {
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for ReferenceBonusRequest and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }

            this.BonusSegments = bonusSegments;
            this.BonusSegments = bonusSegments;
        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets BonusSegments
        /// </summary>
        [DataMember(Name="bonusSegments", EmitDefaultValue=true)]
        public List<int> BonusSegments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceBonusRequest {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  BonusSegments: ").Append(BonusSegments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceBonusRequest);
        }

        /// <summary>
        /// Returns true if ReferenceBonusRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceBonusRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceBonusRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.BonusSegments == input.BonusSegments ||
                    this.BonusSegments != null &&
                    input.BonusSegments != null &&
                    this.BonusSegments.SequenceEqual(input.BonusSegments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.BonusSegments != null)
                    hashCode = hashCode * 59 + this.BonusSegments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
