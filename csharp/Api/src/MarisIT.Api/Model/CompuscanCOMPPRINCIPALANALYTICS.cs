/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// CompuscanCOMPPRINCIPALANALYTICS
    /// </summary>
    [DataContract]
    public partial class CompuscanCOMPPRINCIPALANALYTICS :  IEquatable<CompuscanCOMPPRINCIPALANALYTICS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompuscanCOMPPRINCIPALANALYTICS" /> class.
        /// </summary>
        /// <param name="averagetenure">averagetenure.</param>
        /// <param name="comments">comments.</param>
        /// <param name="createdby">createdby.</param>
        /// <param name="modifiedby">modifiedby.</param>
        /// <param name="modifieddttm">modifieddttm.</param>
        /// <param name="totactiveprincipals">totactiveprincipals.</param>
        /// <param name="tottenure">tottenure.</param>
        public CompuscanCOMPPRINCIPALANALYTICS(string averagetenure = default(string), string comments = default(string), string createdby = default(string), string modifiedby = default(string), string modifieddttm = default(string), string totactiveprincipals = default(string), string tottenure = default(string))
        {
            this.Averagetenure = averagetenure;
            this.Comments = comments;
            this.Createdby = createdby;
            this.Modifiedby = modifiedby;
            this.Modifieddttm = modifieddttm;
            this.Totactiveprincipals = totactiveprincipals;
            this.Tottenure = tottenure;
            this.Averagetenure = averagetenure;
            this.Comments = comments;
            this.Createdby = createdby;
            this.Modifiedby = modifiedby;
            this.Modifieddttm = modifieddttm;
            this.Totactiveprincipals = totactiveprincipals;
            this.Tottenure = tottenure;
        }

        /// <summary>
        /// Gets or Sets Averagetenure
        /// </summary>
        [DataMember(Name="averagetenure", EmitDefaultValue=true)]
        public string Averagetenure { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=true)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Createdby
        /// </summary>
        [DataMember(Name="createdby", EmitDefaultValue=true)]
        public string Createdby { get; set; }

        /// <summary>
        /// Gets or Sets Modifiedby
        /// </summary>
        [DataMember(Name="modifiedby", EmitDefaultValue=true)]
        public string Modifiedby { get; set; }

        /// <summary>
        /// Gets or Sets Modifieddttm
        /// </summary>
        [DataMember(Name="modifieddttm", EmitDefaultValue=true)]
        public string Modifieddttm { get; set; }

        /// <summary>
        /// Gets or Sets Totactiveprincipals
        /// </summary>
        [DataMember(Name="totactiveprincipals", EmitDefaultValue=true)]
        public string Totactiveprincipals { get; set; }

        /// <summary>
        /// Gets or Sets Tottenure
        /// </summary>
        [DataMember(Name="tottenure", EmitDefaultValue=true)]
        public string Tottenure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompuscanCOMPPRINCIPALANALYTICS {\n");
            sb.Append("  Averagetenure: ").Append(Averagetenure).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Createdby: ").Append(Createdby).Append("\n");
            sb.Append("  Modifiedby: ").Append(Modifiedby).Append("\n");
            sb.Append("  Modifieddttm: ").Append(Modifieddttm).Append("\n");
            sb.Append("  Totactiveprincipals: ").Append(Totactiveprincipals).Append("\n");
            sb.Append("  Tottenure: ").Append(Tottenure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompuscanCOMPPRINCIPALANALYTICS);
        }

        /// <summary>
        /// Returns true if CompuscanCOMPPRINCIPALANALYTICS instances are equal
        /// </summary>
        /// <param name="input">Instance of CompuscanCOMPPRINCIPALANALYTICS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompuscanCOMPPRINCIPALANALYTICS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Averagetenure == input.Averagetenure ||
                    (this.Averagetenure != null &&
                    this.Averagetenure.Equals(input.Averagetenure))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Createdby == input.Createdby ||
                    (this.Createdby != null &&
                    this.Createdby.Equals(input.Createdby))
                ) && 
                (
                    this.Modifiedby == input.Modifiedby ||
                    (this.Modifiedby != null &&
                    this.Modifiedby.Equals(input.Modifiedby))
                ) && 
                (
                    this.Modifieddttm == input.Modifieddttm ||
                    (this.Modifieddttm != null &&
                    this.Modifieddttm.Equals(input.Modifieddttm))
                ) && 
                (
                    this.Totactiveprincipals == input.Totactiveprincipals ||
                    (this.Totactiveprincipals != null &&
                    this.Totactiveprincipals.Equals(input.Totactiveprincipals))
                ) && 
                (
                    this.Tottenure == input.Tottenure ||
                    (this.Tottenure != null &&
                    this.Tottenure.Equals(input.Tottenure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Averagetenure != null)
                    hashCode = hashCode * 59 + this.Averagetenure.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Createdby != null)
                    hashCode = hashCode * 59 + this.Createdby.GetHashCode();
                if (this.Modifiedby != null)
                    hashCode = hashCode * 59 + this.Modifiedby.GetHashCode();
                if (this.Modifieddttm != null)
                    hashCode = hashCode * 59 + this.Modifieddttm.GetHashCode();
                if (this.Totactiveprincipals != null)
                    hashCode = hashCode * 59 + this.Totactiveprincipals.GetHashCode();
                if (this.Tottenure != null)
                    hashCode = hashCode * 59 + this.Tottenure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
