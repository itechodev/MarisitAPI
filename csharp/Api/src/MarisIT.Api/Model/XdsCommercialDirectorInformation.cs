/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsCommercialDirectorInformation
    /// </summary>
    [DataContract]
    public partial class XdsCommercialDirectorInformation :  IEquatable<XdsCommercialDirectorInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialDirectorInformation" /> class.
        /// </summary>
        /// <param name="displayText">displayText.</param>
        /// <param name="idNo">idNo.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="initials">initials.</param>
        /// <param name="surname">surname.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="birthDate">birthDate.</param>
        /// <param name="directorStatusCode">directorStatusCode.</param>
        /// <param name="appointmentDate">appointmentDate.</param>
        /// <param name="directorStatusDate">directorStatusDate.</param>
        /// <param name="memberSize">memberSize.</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        public XdsCommercialDirectorInformation(string displayText = default(string), string idNo = default(string), string firstName = default(string), string initials = default(string), string surname = default(string), string fullName = default(string), string birthDate = default(string), string directorStatusCode = default(string), string appointmentDate = default(string), string directorStatusDate = default(string), string memberSize = default(string), string physicalAddress = default(string))
        {
            this.DisplayText = displayText;
            this.IdNo = idNo;
            this.FirstName = firstName;
            this.Initials = initials;
            this.Surname = surname;
            this.FullName = fullName;
            this.BirthDate = birthDate;
            this.DirectorStatusCode = directorStatusCode;
            this.AppointmentDate = appointmentDate;
            this.DirectorStatusDate = directorStatusDate;
            this.MemberSize = memberSize;
            this.PhysicalAddress = physicalAddress;
            this.DisplayText = displayText;
            this.IdNo = idNo;
            this.FirstName = firstName;
            this.Initials = initials;
            this.Surname = surname;
            this.FullName = fullName;
            this.BirthDate = birthDate;
            this.DirectorStatusCode = directorStatusCode;
            this.AppointmentDate = appointmentDate;
            this.DirectorStatusDate = directorStatusDate;
            this.MemberSize = memberSize;
            this.PhysicalAddress = physicalAddress;
        }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets IdNo
        /// </summary>
        [DataMember(Name="idNo", EmitDefaultValue=true)]
        public string IdNo { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Initials
        /// </summary>
        [DataMember(Name="initials", EmitDefaultValue=true)]
        public string Initials { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="birthDate", EmitDefaultValue=true)]
        public string BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets DirectorStatusCode
        /// </summary>
        [DataMember(Name="directorStatusCode", EmitDefaultValue=true)]
        public string DirectorStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets AppointmentDate
        /// </summary>
        [DataMember(Name="appointmentDate", EmitDefaultValue=true)]
        public string AppointmentDate { get; set; }

        /// <summary>
        /// Gets or Sets DirectorStatusDate
        /// </summary>
        [DataMember(Name="directorStatusDate", EmitDefaultValue=true)]
        public string DirectorStatusDate { get; set; }

        /// <summary>
        /// Gets or Sets MemberSize
        /// </summary>
        [DataMember(Name="memberSize", EmitDefaultValue=true)]
        public string MemberSize { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name="physicalAddress", EmitDefaultValue=true)]
        public string PhysicalAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsCommercialDirectorInformation {\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  IdNo: ").Append(IdNo).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Initials: ").Append(Initials).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  DirectorStatusCode: ").Append(DirectorStatusCode).Append("\n");
            sb.Append("  AppointmentDate: ").Append(AppointmentDate).Append("\n");
            sb.Append("  DirectorStatusDate: ").Append(DirectorStatusDate).Append("\n");
            sb.Append("  MemberSize: ").Append(MemberSize).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsCommercialDirectorInformation);
        }

        /// <summary>
        /// Returns true if XdsCommercialDirectorInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsCommercialDirectorInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsCommercialDirectorInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.IdNo == input.IdNo ||
                    (this.IdNo != null &&
                    this.IdNo.Equals(input.IdNo))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Initials == input.Initials ||
                    (this.Initials != null &&
                    this.Initials.Equals(input.Initials))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.DirectorStatusCode == input.DirectorStatusCode ||
                    (this.DirectorStatusCode != null &&
                    this.DirectorStatusCode.Equals(input.DirectorStatusCode))
                ) && 
                (
                    this.AppointmentDate == input.AppointmentDate ||
                    (this.AppointmentDate != null &&
                    this.AppointmentDate.Equals(input.AppointmentDate))
                ) && 
                (
                    this.DirectorStatusDate == input.DirectorStatusDate ||
                    (this.DirectorStatusDate != null &&
                    this.DirectorStatusDate.Equals(input.DirectorStatusDate))
                ) && 
                (
                    this.MemberSize == input.MemberSize ||
                    (this.MemberSize != null &&
                    this.MemberSize.Equals(input.MemberSize))
                ) && 
                (
                    this.PhysicalAddress == input.PhysicalAddress ||
                    (this.PhysicalAddress != null &&
                    this.PhysicalAddress.Equals(input.PhysicalAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.IdNo != null)
                    hashCode = hashCode * 59 + this.IdNo.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Initials != null)
                    hashCode = hashCode * 59 + this.Initials.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.DirectorStatusCode != null)
                    hashCode = hashCode * 59 + this.DirectorStatusCode.GetHashCode();
                if (this.AppointmentDate != null)
                    hashCode = hashCode * 59 + this.AppointmentDate.GetHashCode();
                if (this.DirectorStatusDate != null)
                    hashCode = hashCode * 59 + this.DirectorStatusDate.GetHashCode();
                if (this.MemberSize != null)
                    hashCode = hashCode * 59 + this.MemberSize.GetHashCode();
                if (this.PhysicalAddress != null)
                    hashCode = hashCode * 59 + this.PhysicalAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
