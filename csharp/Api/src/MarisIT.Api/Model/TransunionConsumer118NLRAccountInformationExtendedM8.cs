/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118NLRAccountInformationExtendedM8
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118NLRAccountInformationExtendedM8 :  IEquatable<TransunionConsumer118NLRAccountInformationExtendedM8>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118NLRAccountInformationExtendedM8" /> class.
        /// </summary>
        /// <param name="supplier">supplier.</param>
        /// <param name="account">account.</param>
        /// <param name="subAccount">subAccount.</param>
        /// <param name="branch">branch.</param>
        /// <param name="extendedNLRHistory">extendedNLRHistory.</param>
        public TransunionConsumer118NLRAccountInformationExtendedM8(string supplier = default(string), string account = default(string), string subAccount = default(string), string branch = default(string), List<TransunionConsumer118ExtendedNLRHistory> extendedNLRHistory = default(List<TransunionConsumer118ExtendedNLRHistory>))
        {
            this.Supplier = supplier;
            this.Account = account;
            this.SubAccount = subAccount;
            this.Branch = branch;
            this.ExtendedNLRHistory = extendedNLRHistory;
            this.Supplier = supplier;
            this.Account = account;
            this.SubAccount = subAccount;
            this.Branch = branch;
            this.ExtendedNLRHistory = extendedNLRHistory;
        }

        /// <summary>
        /// Gets or Sets Supplier
        /// </summary>
        [DataMember(Name="supplier", EmitDefaultValue=true)]
        public string Supplier { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=true)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets SubAccount
        /// </summary>
        [DataMember(Name="subAccount", EmitDefaultValue=true)]
        public string SubAccount { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=true)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedNLRHistory
        /// </summary>
        [DataMember(Name="extendedNLRHistory", EmitDefaultValue=true)]
        public List<TransunionConsumer118ExtendedNLRHistory> ExtendedNLRHistory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118NLRAccountInformationExtendedM8 {\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  SubAccount: ").Append(SubAccount).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ExtendedNLRHistory: ").Append(ExtendedNLRHistory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118NLRAccountInformationExtendedM8);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118NLRAccountInformationExtendedM8 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118NLRAccountInformationExtendedM8 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118NLRAccountInformationExtendedM8 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.SubAccount == input.SubAccount ||
                    (this.SubAccount != null &&
                    this.SubAccount.Equals(input.SubAccount))
                ) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.ExtendedNLRHistory == input.ExtendedNLRHistory ||
                    this.ExtendedNLRHistory != null &&
                    input.ExtendedNLRHistory != null &&
                    this.ExtendedNLRHistory.SequenceEqual(input.ExtendedNLRHistory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.SubAccount != null)
                    hashCode = hashCode * 59 + this.SubAccount.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ExtendedNLRHistory != null)
                    hashCode = hashCode * 59 + this.ExtendedNLRHistory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
