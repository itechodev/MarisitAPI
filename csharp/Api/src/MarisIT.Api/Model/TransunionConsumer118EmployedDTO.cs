/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118EmployedDTO
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118EmployedDTO :  IEquatable<TransunionConsumer118EmployedDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118EmployedDTO" /> class.
        /// </summary>
        /// <param name="employeeCode">employeeCode.</param>
        /// <param name="payDate">payDate.</param>
        /// <param name="employeeTaxReferenceNumber">employeeTaxReferenceNumber.</param>
        /// <param name="payFrequency">payFrequency.</param>
        /// <param name="employer">employer.</param>
        /// <param name="employeeInformation">employeeInformation.</param>
        /// <param name="employmentStatus">employmentStatus.</param>
        /// <param name="package">package.</param>
        /// <param name="transactionItemId">transactionItemId.</param>
        /// <param name="isliteVersion">isliteVersion.</param>
        public TransunionConsumer118EmployedDTO(string employeeCode = default(string), int payDate = default(int), string employeeTaxReferenceNumber = default(string), string payFrequency = default(string), TransunionConsumer118RenumerationEmployerDTO employer = default(TransunionConsumer118RenumerationEmployerDTO), TransunionConsumer118EmployeeDTO employeeInformation = default(TransunionConsumer118EmployeeDTO), TransunionConsumer118EmploymentStatusDTO employmentStatus = default(TransunionConsumer118EmploymentStatusDTO), TransunionConsumer118PackageDTO package = default(TransunionConsumer118PackageDTO), int transactionItemId = default(int), bool isliteVersion = default(bool))
        {
            this.EmployeeCode = employeeCode;
            this.EmployeeTaxReferenceNumber = employeeTaxReferenceNumber;
            this.PayFrequency = payFrequency;
            this.EmployeeCode = employeeCode;
            this.PayDate = payDate;
            this.EmployeeTaxReferenceNumber = employeeTaxReferenceNumber;
            this.PayFrequency = payFrequency;
            this.Employer = employer;
            this.EmployeeInformation = employeeInformation;
            this.EmploymentStatus = employmentStatus;
            this.Package = package;
            this.TransactionItemId = transactionItemId;
            this.IsliteVersion = isliteVersion;
        }

        /// <summary>
        /// Gets or Sets EmployeeCode
        /// </summary>
        [DataMember(Name="employeeCode", EmitDefaultValue=true)]
        public string EmployeeCode { get; set; }

        /// <summary>
        /// Gets or Sets PayDate
        /// </summary>
        [DataMember(Name="payDate", EmitDefaultValue=false)]
        public int PayDate { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeTaxReferenceNumber
        /// </summary>
        [DataMember(Name="employeeTaxReferenceNumber", EmitDefaultValue=true)]
        public string EmployeeTaxReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PayFrequency
        /// </summary>
        [DataMember(Name="payFrequency", EmitDefaultValue=true)]
        public string PayFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Employer
        /// </summary>
        [DataMember(Name="employer", EmitDefaultValue=false)]
        public TransunionConsumer118RenumerationEmployerDTO Employer { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeInformation
        /// </summary>
        [DataMember(Name="employeeInformation", EmitDefaultValue=false)]
        public TransunionConsumer118EmployeeDTO EmployeeInformation { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentStatus
        /// </summary>
        [DataMember(Name="employmentStatus", EmitDefaultValue=false)]
        public TransunionConsumer118EmploymentStatusDTO EmploymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public TransunionConsumer118PackageDTO Package { get; set; }

        /// <summary>
        /// Gets or Sets TransactionItemId
        /// </summary>
        [DataMember(Name="transactionItemId", EmitDefaultValue=false)]
        public int TransactionItemId { get; set; }

        /// <summary>
        /// Gets or Sets IsliteVersion
        /// </summary>
        [DataMember(Name="isliteVersion", EmitDefaultValue=false)]
        public bool IsliteVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118EmployedDTO {\n");
            sb.Append("  EmployeeCode: ").Append(EmployeeCode).Append("\n");
            sb.Append("  PayDate: ").Append(PayDate).Append("\n");
            sb.Append("  EmployeeTaxReferenceNumber: ").Append(EmployeeTaxReferenceNumber).Append("\n");
            sb.Append("  PayFrequency: ").Append(PayFrequency).Append("\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  EmployeeInformation: ").Append(EmployeeInformation).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  TransactionItemId: ").Append(TransactionItemId).Append("\n");
            sb.Append("  IsliteVersion: ").Append(IsliteVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118EmployedDTO);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118EmployedDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118EmployedDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118EmployedDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployeeCode == input.EmployeeCode ||
                    (this.EmployeeCode != null &&
                    this.EmployeeCode.Equals(input.EmployeeCode))
                ) && 
                (
                    this.PayDate == input.PayDate ||
                    (this.PayDate != null &&
                    this.PayDate.Equals(input.PayDate))
                ) && 
                (
                    this.EmployeeTaxReferenceNumber == input.EmployeeTaxReferenceNumber ||
                    (this.EmployeeTaxReferenceNumber != null &&
                    this.EmployeeTaxReferenceNumber.Equals(input.EmployeeTaxReferenceNumber))
                ) && 
                (
                    this.PayFrequency == input.PayFrequency ||
                    (this.PayFrequency != null &&
                    this.PayFrequency.Equals(input.PayFrequency))
                ) && 
                (
                    this.Employer == input.Employer ||
                    (this.Employer != null &&
                    this.Employer.Equals(input.Employer))
                ) && 
                (
                    this.EmployeeInformation == input.EmployeeInformation ||
                    (this.EmployeeInformation != null &&
                    this.EmployeeInformation.Equals(input.EmployeeInformation))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                ) && 
                (
                    this.TransactionItemId == input.TransactionItemId ||
                    (this.TransactionItemId != null &&
                    this.TransactionItemId.Equals(input.TransactionItemId))
                ) && 
                (
                    this.IsliteVersion == input.IsliteVersion ||
                    (this.IsliteVersion != null &&
                    this.IsliteVersion.Equals(input.IsliteVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployeeCode != null)
                    hashCode = hashCode * 59 + this.EmployeeCode.GetHashCode();
                if (this.PayDate != null)
                    hashCode = hashCode * 59 + this.PayDate.GetHashCode();
                if (this.EmployeeTaxReferenceNumber != null)
                    hashCode = hashCode * 59 + this.EmployeeTaxReferenceNumber.GetHashCode();
                if (this.PayFrequency != null)
                    hashCode = hashCode * 59 + this.PayFrequency.GetHashCode();
                if (this.Employer != null)
                    hashCode = hashCode * 59 + this.Employer.GetHashCode();
                if (this.EmployeeInformation != null)
                    hashCode = hashCode * 59 + this.EmployeeInformation.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                if (this.Package != null)
                    hashCode = hashCode * 59 + this.Package.GetHashCode();
                if (this.TransactionItemId != null)
                    hashCode = hashCode * 59 + this.TransactionItemId.GetHashCode();
                if (this.IsliteVersion != null)
                    hashCode = hashCode * 59 + this.IsliteVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
