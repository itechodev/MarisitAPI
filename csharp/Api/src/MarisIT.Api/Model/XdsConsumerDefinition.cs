/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// XdsConsumerDefinition
    /// </summary>
    [DataContract]
    public partial class XdsConsumerDefinition :  IEquatable<XdsConsumerDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerDefinition" /> class.
        /// </summary>
        /// <param name="definitionCode">definitionCode.</param>
        /// <param name="definitionDesc">definitionDesc.</param>
        /// <param name="displayText">displayText.</param>
        public XdsConsumerDefinition(string definitionCode = default(string), string definitionDesc = default(string), string displayText = default(string))
        {
            this.DefinitionCode = definitionCode;
            this.DefinitionDesc = definitionDesc;
            this.DisplayText = displayText;
            this.DefinitionCode = definitionCode;
            this.DefinitionDesc = definitionDesc;
            this.DisplayText = displayText;
        }

        /// <summary>
        /// Gets or Sets DefinitionCode
        /// </summary>
        [DataMember(Name="definitionCode", EmitDefaultValue=true)]
        public string DefinitionCode { get; set; }

        /// <summary>
        /// Gets or Sets DefinitionDesc
        /// </summary>
        [DataMember(Name="definitionDesc", EmitDefaultValue=true)]
        public string DefinitionDesc { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=true)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XdsConsumerDefinition {\n");
            sb.Append("  DefinitionCode: ").Append(DefinitionCode).Append("\n");
            sb.Append("  DefinitionDesc: ").Append(DefinitionDesc).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XdsConsumerDefinition);
        }

        /// <summary>
        /// Returns true if XdsConsumerDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of XdsConsumerDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XdsConsumerDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefinitionCode == input.DefinitionCode ||
                    (this.DefinitionCode != null &&
                    this.DefinitionCode.Equals(input.DefinitionCode))
                ) && 
                (
                    this.DefinitionDesc == input.DefinitionDesc ||
                    (this.DefinitionDesc != null &&
                    this.DefinitionDesc.Equals(input.DefinitionDesc))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefinitionCode != null)
                    hashCode = hashCode * 59 + this.DefinitionCode.GetHashCode();
                if (this.DefinitionDesc != null)
                    hashCode = hashCode * 59 + this.DefinitionDesc.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
