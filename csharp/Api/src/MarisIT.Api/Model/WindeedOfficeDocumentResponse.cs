/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedOfficeDocumentResponse
    /// </summary>
    [DataContract]
    public partial class WindeedOfficeDocumentResponse :  IEquatable<WindeedOfficeDocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name="dataSource", EmitDefaultValue=false)]
        public WindeedOfficeDataSource? DataSource { get; set; }
        /// <summary>
        /// Gets or Sets DeedsOffice
        /// </summary>
        [DataMember(Name="deedsOffice", EmitDefaultValue=false)]
        public WindeedOfficeRegistrar? DeedsOffice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficeDocumentResponse" /> class.
        /// </summary>
        /// <param name="responseDateTime">responseDateTime.</param>
        /// <param name="isSearchBatched">isSearchBatched.</param>
        /// <param name="warnings">warnings.</param>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="deedsOffice">deedsOffice.</param>
        /// <param name="endorsements">endorsements.</param>
        /// <param name="historicDocuments">historicDocuments.</param>
        /// <param name="owners">owners.</param>
        /// <param name="property">property.</param>
        public WindeedOfficeDocumentResponse(DateTime responseDateTime = default(DateTime), bool isSearchBatched = default(bool), List<string> warnings = default(List<string>), WindeedOfficeDataSource? dataSource = default(WindeedOfficeDataSource?), WindeedOfficeRegistrar? deedsOffice = default(WindeedOfficeRegistrar?), List<WindeedOfficeEndorsementDocument> endorsements = default(List<WindeedOfficeEndorsementDocument>), List<WindeedOfficeHistoricDocument> historicDocuments = default(List<WindeedOfficeHistoricDocument>), List<WindeedOfficeTitleDeedOwner> owners = default(List<WindeedOfficeTitleDeedOwner>), WindeedOfficeProperty property = default(WindeedOfficeProperty))
        {
            this.Warnings = warnings;
            this.Endorsements = endorsements;
            this.HistoricDocuments = historicDocuments;
            this.Owners = owners;
            this.ResponseDateTime = responseDateTime;
            this.IsSearchBatched = isSearchBatched;
            this.Warnings = warnings;
            this.DataSource = dataSource;
            this.DeedsOffice = deedsOffice;
            this.Endorsements = endorsements;
            this.HistoricDocuments = historicDocuments;
            this.Owners = owners;
            this.Property = property;
        }

        /// <summary>
        /// Gets or Sets ResponseDateTime
        /// </summary>
        [DataMember(Name="responseDateTime", EmitDefaultValue=false)]
        public DateTime ResponseDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsSearchBatched
        /// </summary>
        [DataMember(Name="isSearchBatched", EmitDefaultValue=false)]
        public bool IsSearchBatched { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name="warnings", EmitDefaultValue=true)]
        public List<string> Warnings { get; set; }



        /// <summary>
        /// Gets or Sets Endorsements
        /// </summary>
        [DataMember(Name="endorsements", EmitDefaultValue=true)]
        public List<WindeedOfficeEndorsementDocument> Endorsements { get; set; }

        /// <summary>
        /// Gets or Sets HistoricDocuments
        /// </summary>
        [DataMember(Name="historicDocuments", EmitDefaultValue=true)]
        public List<WindeedOfficeHistoricDocument> HistoricDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Owners
        /// </summary>
        [DataMember(Name="owners", EmitDefaultValue=true)]
        public List<WindeedOfficeTitleDeedOwner> Owners { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property", EmitDefaultValue=false)]
        public WindeedOfficeProperty Property { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedOfficeDocumentResponse {\n");
            sb.Append("  ResponseDateTime: ").Append(ResponseDateTime).Append("\n");
            sb.Append("  IsSearchBatched: ").Append(IsSearchBatched).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DeedsOffice: ").Append(DeedsOffice).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  HistoricDocuments: ").Append(HistoricDocuments).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedOfficeDocumentResponse);
        }

        /// <summary>
        /// Returns true if WindeedOfficeDocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedOfficeDocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedOfficeDocumentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseDateTime == input.ResponseDateTime ||
                    (this.ResponseDateTime != null &&
                    this.ResponseDateTime.Equals(input.ResponseDateTime))
                ) && 
                (
                    this.IsSearchBatched == input.IsSearchBatched ||
                    (this.IsSearchBatched != null &&
                    this.IsSearchBatched.Equals(input.IsSearchBatched))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) && 
                (
                    this.DeedsOffice == input.DeedsOffice ||
                    (this.DeedsOffice != null &&
                    this.DeedsOffice.Equals(input.DeedsOffice))
                ) && 
                (
                    this.Endorsements == input.Endorsements ||
                    this.Endorsements != null &&
                    input.Endorsements != null &&
                    this.Endorsements.SequenceEqual(input.Endorsements)
                ) && 
                (
                    this.HistoricDocuments == input.HistoricDocuments ||
                    this.HistoricDocuments != null &&
                    input.HistoricDocuments != null &&
                    this.HistoricDocuments.SequenceEqual(input.HistoricDocuments)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseDateTime != null)
                    hashCode = hashCode * 59 + this.ResponseDateTime.GetHashCode();
                if (this.IsSearchBatched != null)
                    hashCode = hashCode * 59 + this.IsSearchBatched.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                if (this.DataSource != null)
                    hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                if (this.DeedsOffice != null)
                    hashCode = hashCode * 59 + this.DeedsOffice.GetHashCode();
                if (this.Endorsements != null)
                    hashCode = hashCode * 59 + this.Endorsements.GetHashCode();
                if (this.HistoricDocuments != null)
                    hashCode = hashCode * 59 + this.HistoricDocuments.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
