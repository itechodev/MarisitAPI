/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118IdentityVerficationAlertHI
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118IdentityVerficationAlertHI :  IEquatable<TransunionConsumer118IdentityVerficationAlertHI>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118IdentityVerficationAlertHI" /> class.
        /// </summary>
        /// <param name="alertDate">alertDate.</param>
        /// <param name="inputIDNumber">inputIDNumber.</param>
        /// <param name="idVerifiedCode">idVerifiedCode.</param>
        /// <param name="description">description.</param>
        /// <param name="oldIDConversionCode">oldIDConversionCode.</param>
        /// <param name="oldIDConversionDescription">oldIDConversionDescription.</param>
        /// <param name="verifiedSurname">verifiedSurname.</param>
        /// <param name="verifiedForename1">verifiedForename1.</param>
        /// <param name="verifiedForename2">verifiedForename2.</param>
        /// <param name="deceasedDate">deceasedDate.</param>
        public TransunionConsumer118IdentityVerficationAlertHI(string alertDate = default(string), string inputIDNumber = default(string), string idVerifiedCode = default(string), string description = default(string), string oldIDConversionCode = default(string), string oldIDConversionDescription = default(string), string verifiedSurname = default(string), string verifiedForename1 = default(string), string verifiedForename2 = default(string), string deceasedDate = default(string))
        {
            this.AlertDate = alertDate;
            this.InputIDNumber = inputIDNumber;
            this.IdVerifiedCode = idVerifiedCode;
            this.Description = description;
            this.OldIDConversionCode = oldIDConversionCode;
            this.OldIDConversionDescription = oldIDConversionDescription;
            this.VerifiedSurname = verifiedSurname;
            this.VerifiedForename1 = verifiedForename1;
            this.VerifiedForename2 = verifiedForename2;
            this.DeceasedDate = deceasedDate;
            this.AlertDate = alertDate;
            this.InputIDNumber = inputIDNumber;
            this.IdVerifiedCode = idVerifiedCode;
            this.Description = description;
            this.OldIDConversionCode = oldIDConversionCode;
            this.OldIDConversionDescription = oldIDConversionDescription;
            this.VerifiedSurname = verifiedSurname;
            this.VerifiedForename1 = verifiedForename1;
            this.VerifiedForename2 = verifiedForename2;
            this.DeceasedDate = deceasedDate;
        }

        /// <summary>
        /// Gets or Sets AlertDate
        /// </summary>
        [DataMember(Name="alertDate", EmitDefaultValue=true)]
        public string AlertDate { get; set; }

        /// <summary>
        /// Gets or Sets InputIDNumber
        /// </summary>
        [DataMember(Name="inputIDNumber", EmitDefaultValue=true)]
        public string InputIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets IdVerifiedCode
        /// </summary>
        [DataMember(Name="idVerifiedCode", EmitDefaultValue=true)]
        public string IdVerifiedCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets OldIDConversionCode
        /// </summary>
        [DataMember(Name="oldIDConversionCode", EmitDefaultValue=true)]
        public string OldIDConversionCode { get; set; }

        /// <summary>
        /// Gets or Sets OldIDConversionDescription
        /// </summary>
        [DataMember(Name="oldIDConversionDescription", EmitDefaultValue=true)]
        public string OldIDConversionDescription { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedSurname
        /// </summary>
        [DataMember(Name="verifiedSurname", EmitDefaultValue=true)]
        public string VerifiedSurname { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedForename1
        /// </summary>
        [DataMember(Name="verifiedForename1", EmitDefaultValue=true)]
        public string VerifiedForename1 { get; set; }

        /// <summary>
        /// Gets or Sets VerifiedForename2
        /// </summary>
        [DataMember(Name="verifiedForename2", EmitDefaultValue=true)]
        public string VerifiedForename2 { get; set; }

        /// <summary>
        /// Gets or Sets DeceasedDate
        /// </summary>
        [DataMember(Name="deceasedDate", EmitDefaultValue=true)]
        public string DeceasedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118IdentityVerficationAlertHI {\n");
            sb.Append("  AlertDate: ").Append(AlertDate).Append("\n");
            sb.Append("  InputIDNumber: ").Append(InputIDNumber).Append("\n");
            sb.Append("  IdVerifiedCode: ").Append(IdVerifiedCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OldIDConversionCode: ").Append(OldIDConversionCode).Append("\n");
            sb.Append("  OldIDConversionDescription: ").Append(OldIDConversionDescription).Append("\n");
            sb.Append("  VerifiedSurname: ").Append(VerifiedSurname).Append("\n");
            sb.Append("  VerifiedForename1: ").Append(VerifiedForename1).Append("\n");
            sb.Append("  VerifiedForename2: ").Append(VerifiedForename2).Append("\n");
            sb.Append("  DeceasedDate: ").Append(DeceasedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118IdentityVerficationAlertHI);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118IdentityVerficationAlertHI instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118IdentityVerficationAlertHI to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118IdentityVerficationAlertHI input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlertDate == input.AlertDate ||
                    (this.AlertDate != null &&
                    this.AlertDate.Equals(input.AlertDate))
                ) && 
                (
                    this.InputIDNumber == input.InputIDNumber ||
                    (this.InputIDNumber != null &&
                    this.InputIDNumber.Equals(input.InputIDNumber))
                ) && 
                (
                    this.IdVerifiedCode == input.IdVerifiedCode ||
                    (this.IdVerifiedCode != null &&
                    this.IdVerifiedCode.Equals(input.IdVerifiedCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.OldIDConversionCode == input.OldIDConversionCode ||
                    (this.OldIDConversionCode != null &&
                    this.OldIDConversionCode.Equals(input.OldIDConversionCode))
                ) && 
                (
                    this.OldIDConversionDescription == input.OldIDConversionDescription ||
                    (this.OldIDConversionDescription != null &&
                    this.OldIDConversionDescription.Equals(input.OldIDConversionDescription))
                ) && 
                (
                    this.VerifiedSurname == input.VerifiedSurname ||
                    (this.VerifiedSurname != null &&
                    this.VerifiedSurname.Equals(input.VerifiedSurname))
                ) && 
                (
                    this.VerifiedForename1 == input.VerifiedForename1 ||
                    (this.VerifiedForename1 != null &&
                    this.VerifiedForename1.Equals(input.VerifiedForename1))
                ) && 
                (
                    this.VerifiedForename2 == input.VerifiedForename2 ||
                    (this.VerifiedForename2 != null &&
                    this.VerifiedForename2.Equals(input.VerifiedForename2))
                ) && 
                (
                    this.DeceasedDate == input.DeceasedDate ||
                    (this.DeceasedDate != null &&
                    this.DeceasedDate.Equals(input.DeceasedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlertDate != null)
                    hashCode = hashCode * 59 + this.AlertDate.GetHashCode();
                if (this.InputIDNumber != null)
                    hashCode = hashCode * 59 + this.InputIDNumber.GetHashCode();
                if (this.IdVerifiedCode != null)
                    hashCode = hashCode * 59 + this.IdVerifiedCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OldIDConversionCode != null)
                    hashCode = hashCode * 59 + this.OldIDConversionCode.GetHashCode();
                if (this.OldIDConversionDescription != null)
                    hashCode = hashCode * 59 + this.OldIDConversionDescription.GetHashCode();
                if (this.VerifiedSurname != null)
                    hashCode = hashCode * 59 + this.VerifiedSurname.GetHashCode();
                if (this.VerifiedForename1 != null)
                    hashCode = hashCode * 59 + this.VerifiedForename1.GetHashCode();
                if (this.VerifiedForename2 != null)
                    hashCode = hashCode * 59 + this.VerifiedForename2.GetHashCode();
                if (this.DeceasedDate != null)
                    hashCode = hashCode * 59 + this.DeceasedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
