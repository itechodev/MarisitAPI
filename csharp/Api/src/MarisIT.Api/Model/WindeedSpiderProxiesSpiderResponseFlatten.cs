/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// WindeedSpiderProxiesSpiderResponseFlatten
    /// </summary>
    [DataContract]
    public partial class WindeedSpiderProxiesSpiderResponseFlatten :  IEquatable<WindeedSpiderProxiesSpiderResponseFlatten>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedSpiderProxiesSpiderResponseFlatten" /> class.
        /// </summary>
        /// <param name="subject">subject.</param>
        /// <param name="associations">associations.</param>
        /// <param name="currentProperties">currentProperties.</param>
        /// <param name="historicProperties">historicProperties.</param>
        /// <param name="otherDocuments">otherDocuments.</param>
        /// <param name="bondDocuments">bondDocuments.</param>
        /// <param name="possibleMatches">possibleMatches.</param>
        public WindeedSpiderProxiesSpiderResponseFlatten(WindeedSpiderProxiesCompanyOrPersonSubject subject = default(WindeedSpiderProxiesCompanyOrPersonSubject), WindeedSpiderProxiesDSCollectionOfPersonOrCompanyAssociation associations = default(WindeedSpiderProxiesDSCollectionOfPersonOrCompanyAssociation), WindeedSpiderProxiesDSCollectionOfPropertyFlatten currentProperties = default(WindeedSpiderProxiesDSCollectionOfPropertyFlatten), WindeedSpiderProxiesDSCollectionOfPropertyFlatten historicProperties = default(WindeedSpiderProxiesDSCollectionOfPropertyFlatten), WindeedSpiderDSCollectionOfDocument otherDocuments = default(WindeedSpiderDSCollectionOfDocument), WindeedSpiderDSCollectionOfDocument bondDocuments = default(WindeedSpiderDSCollectionOfDocument), WindeedSpiderDSCollectionOfPossibleMatch possibleMatches = default(WindeedSpiderDSCollectionOfPossibleMatch))
        {
            this.Subject = subject;
            this.Associations = associations;
            this.CurrentProperties = currentProperties;
            this.HistoricProperties = historicProperties;
            this.OtherDocuments = otherDocuments;
            this.BondDocuments = bondDocuments;
            this.PossibleMatches = possibleMatches;
        }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public WindeedSpiderProxiesCompanyOrPersonSubject Subject { get; set; }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public WindeedSpiderProxiesDSCollectionOfPersonOrCompanyAssociation Associations { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProperties
        /// </summary>
        [DataMember(Name="currentProperties", EmitDefaultValue=false)]
        public WindeedSpiderProxiesDSCollectionOfPropertyFlatten CurrentProperties { get; set; }

        /// <summary>
        /// Gets or Sets HistoricProperties
        /// </summary>
        [DataMember(Name="historicProperties", EmitDefaultValue=false)]
        public WindeedSpiderProxiesDSCollectionOfPropertyFlatten HistoricProperties { get; set; }

        /// <summary>
        /// Gets or Sets OtherDocuments
        /// </summary>
        [DataMember(Name="otherDocuments", EmitDefaultValue=false)]
        public WindeedSpiderDSCollectionOfDocument OtherDocuments { get; set; }

        /// <summary>
        /// Gets or Sets BondDocuments
        /// </summary>
        [DataMember(Name="bondDocuments", EmitDefaultValue=false)]
        public WindeedSpiderDSCollectionOfDocument BondDocuments { get; set; }

        /// <summary>
        /// Gets or Sets PossibleMatches
        /// </summary>
        [DataMember(Name="possibleMatches", EmitDefaultValue=false)]
        public WindeedSpiderDSCollectionOfPossibleMatch PossibleMatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WindeedSpiderProxiesSpiderResponseFlatten {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  CurrentProperties: ").Append(CurrentProperties).Append("\n");
            sb.Append("  HistoricProperties: ").Append(HistoricProperties).Append("\n");
            sb.Append("  OtherDocuments: ").Append(OtherDocuments).Append("\n");
            sb.Append("  BondDocuments: ").Append(BondDocuments).Append("\n");
            sb.Append("  PossibleMatches: ").Append(PossibleMatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WindeedSpiderProxiesSpiderResponseFlatten);
        }

        /// <summary>
        /// Returns true if WindeedSpiderProxiesSpiderResponseFlatten instances are equal
        /// </summary>
        /// <param name="input">Instance of WindeedSpiderProxiesSpiderResponseFlatten to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindeedSpiderProxiesSpiderResponseFlatten input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.CurrentProperties == input.CurrentProperties ||
                    (this.CurrentProperties != null &&
                    this.CurrentProperties.Equals(input.CurrentProperties))
                ) && 
                (
                    this.HistoricProperties == input.HistoricProperties ||
                    (this.HistoricProperties != null &&
                    this.HistoricProperties.Equals(input.HistoricProperties))
                ) && 
                (
                    this.OtherDocuments == input.OtherDocuments ||
                    (this.OtherDocuments != null &&
                    this.OtherDocuments.Equals(input.OtherDocuments))
                ) && 
                (
                    this.BondDocuments == input.BondDocuments ||
                    (this.BondDocuments != null &&
                    this.BondDocuments.Equals(input.BondDocuments))
                ) && 
                (
                    this.PossibleMatches == input.PossibleMatches ||
                    (this.PossibleMatches != null &&
                    this.PossibleMatches.Equals(input.PossibleMatches))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Associations != null)
                    hashCode = hashCode * 59 + this.Associations.GetHashCode();
                if (this.CurrentProperties != null)
                    hashCode = hashCode * 59 + this.CurrentProperties.GetHashCode();
                if (this.HistoricProperties != null)
                    hashCode = hashCode * 59 + this.HistoricProperties.GetHashCode();
                if (this.OtherDocuments != null)
                    hashCode = hashCode * 59 + this.OtherDocuments.GetHashCode();
                if (this.BondDocuments != null)
                    hashCode = hashCode * 59 + this.BondDocuments.GetHashCode();
                if (this.PossibleMatches != null)
                    hashCode = hashCode * 59 + this.PossibleMatches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
