/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118IndividualTrace04
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118IndividualTrace04 :  IEquatable<TransunionConsumer118IndividualTrace04>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118IndividualTrace04" /> class.
        /// </summary>
        /// <param name="consumerNo">consumerNo.</param>
        /// <param name="surname">surname.</param>
        /// <param name="forename1">forename1.</param>
        /// <param name="forename2">forename2.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="identityNumber1">identityNumber1.</param>
        /// <param name="identityNumber2">identityNumber2.</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="filler">filler.</param>
        public TransunionConsumer118IndividualTrace04(string consumerNo = default(string), string surname = default(string), string forename1 = default(string), string forename2 = default(string), string dateOfBirth = default(string), string identityNumber1 = default(string), string identityNumber2 = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string filler = default(string))
        {
            this.ConsumerNo = consumerNo;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.DateOfBirth = dateOfBirth;
            this.IdentityNumber1 = identityNumber1;
            this.IdentityNumber2 = identityNumber2;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.Filler = filler;
            this.ConsumerNo = consumerNo;
            this.Surname = surname;
            this.Forename1 = forename1;
            this.Forename2 = forename2;
            this.DateOfBirth = dateOfBirth;
            this.IdentityNumber1 = identityNumber1;
            this.IdentityNumber2 = identityNumber2;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.Filler = filler;
        }

        /// <summary>
        /// Gets or Sets ConsumerNo
        /// </summary>
        [DataMember(Name="consumerNo", EmitDefaultValue=true)]
        public string ConsumerNo { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Forename1
        /// </summary>
        [DataMember(Name="forename1", EmitDefaultValue=true)]
        public string Forename1 { get; set; }

        /// <summary>
        /// Gets or Sets Forename2
        /// </summary>
        [DataMember(Name="forename2", EmitDefaultValue=true)]
        public string Forename2 { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets IdentityNumber1
        /// </summary>
        [DataMember(Name="identityNumber1", EmitDefaultValue=true)]
        public string IdentityNumber1 { get; set; }

        /// <summary>
        /// Gets or Sets IdentityNumber2
        /// </summary>
        [DataMember(Name="identityNumber2", EmitDefaultValue=true)]
        public string IdentityNumber2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name="addressLine1", EmitDefaultValue=true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name="addressLine2", EmitDefaultValue=true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets Filler
        /// </summary>
        [DataMember(Name="filler", EmitDefaultValue=true)]
        public string Filler { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118IndividualTrace04 {\n");
            sb.Append("  ConsumerNo: ").Append(ConsumerNo).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Forename1: ").Append(Forename1).Append("\n");
            sb.Append("  Forename2: ").Append(Forename2).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  IdentityNumber1: ").Append(IdentityNumber1).Append("\n");
            sb.Append("  IdentityNumber2: ").Append(IdentityNumber2).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  Filler: ").Append(Filler).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118IndividualTrace04);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118IndividualTrace04 instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118IndividualTrace04 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118IndividualTrace04 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsumerNo == input.ConsumerNo ||
                    (this.ConsumerNo != null &&
                    this.ConsumerNo.Equals(input.ConsumerNo))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Forename1 == input.Forename1 ||
                    (this.Forename1 != null &&
                    this.Forename1.Equals(input.Forename1))
                ) && 
                (
                    this.Forename2 == input.Forename2 ||
                    (this.Forename2 != null &&
                    this.Forename2.Equals(input.Forename2))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.IdentityNumber1 == input.IdentityNumber1 ||
                    (this.IdentityNumber1 != null &&
                    this.IdentityNumber1.Equals(input.IdentityNumber1))
                ) && 
                (
                    this.IdentityNumber2 == input.IdentityNumber2 ||
                    (this.IdentityNumber2 != null &&
                    this.IdentityNumber2.Equals(input.IdentityNumber2))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.Filler == input.Filler ||
                    (this.Filler != null &&
                    this.Filler.Equals(input.Filler))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsumerNo != null)
                    hashCode = hashCode * 59 + this.ConsumerNo.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Forename1 != null)
                    hashCode = hashCode * 59 + this.Forename1.GetHashCode();
                if (this.Forename2 != null)
                    hashCode = hashCode * 59 + this.Forename2.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.IdentityNumber1 != null)
                    hashCode = hashCode * 59 + this.IdentityNumber1.GetHashCode();
                if (this.IdentityNumber2 != null)
                    hashCode = hashCode * 59 + this.IdentityNumber2.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.Filler != null)
                    hashCode = hashCode * 59 + this.Filler.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
