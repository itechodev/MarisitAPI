/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MarisIT.Api.Client.OpenAPIDateConverter;

namespace MarisIT.Api.Model
{
    /// <summary>
    /// TransunionConsumer118NatisDetailedVehicleInformationUU
    /// </summary>
    [DataContract]
    public partial class TransunionConsumer118NatisDetailedVehicleInformationUU :  IEquatable<TransunionConsumer118NatisDetailedVehicleInformationUU>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransunionConsumer118NatisDetailedVehicleInformationUU" /> class.
        /// </summary>
        /// <param name="viNChassisNumber">viNChassisNumber.</param>
        /// <param name="naTISVehicleRegisterNumber">naTISVehicleRegisterNumber.</param>
        /// <param name="engineNumber">engineNumber.</param>
        /// <param name="makeCode">makeCode.</param>
        /// <param name="makeDescription">makeDescription.</param>
        /// <param name="modelCode">modelCode.</param>
        /// <param name="modelDescription">modelDescription.</param>
        /// <param name="vehicleTypeCode">vehicleTypeCode.</param>
        /// <param name="vehicleTypeDescription">vehicleTypeDescription.</param>
        /// <param name="colourCode">colourCode.</param>
        /// <param name="colourDescription">colourDescription.</param>
        /// <param name="vehicleDrivenCode">vehicleDrivenCode.</param>
        /// <param name="vehicleDrivenDescription">vehicleDrivenDescription.</param>
        /// <param name="netPower">netPower.</param>
        /// <param name="fuelTypeCode">fuelTypeCode.</param>
        /// <param name="fuelTypeDescription">fuelTypeDescription.</param>
        /// <param name="tare">tare.</param>
        /// <param name="gvm">gvm.</param>
        /// <param name="axlesTotal">axlesTotal.</param>
        /// <param name="drivenAxles">drivenAxles.</param>
        /// <param name="numberOfWheels">numberOfWheels.</param>
        /// <param name="overallWidth">overallWidth.</param>
        /// <param name="overallLength">overallLength.</param>
        /// <param name="overallHeight">overallHeight.</param>
        /// <param name="registrationTypeCode">registrationTypeCode.</param>
        /// <param name="registrationTypeDescription">registrationTypeDescription.</param>
        public TransunionConsumer118NatisDetailedVehicleInformationUU(string viNChassisNumber = default(string), string naTISVehicleRegisterNumber = default(string), string engineNumber = default(string), string makeCode = default(string), string makeDescription = default(string), string modelCode = default(string), string modelDescription = default(string), string vehicleTypeCode = default(string), string vehicleTypeDescription = default(string), string colourCode = default(string), string colourDescription = default(string), string vehicleDrivenCode = default(string), string vehicleDrivenDescription = default(string), string netPower = default(string), string fuelTypeCode = default(string), string fuelTypeDescription = default(string), string tare = default(string), string gvm = default(string), string axlesTotal = default(string), string drivenAxles = default(string), string numberOfWheels = default(string), string overallWidth = default(string), string overallLength = default(string), string overallHeight = default(string), string registrationTypeCode = default(string), string registrationTypeDescription = default(string))
        {
            this.ViNChassisNumber = viNChassisNumber;
            this.NaTISVehicleRegisterNumber = naTISVehicleRegisterNumber;
            this.EngineNumber = engineNumber;
            this.MakeCode = makeCode;
            this.MakeDescription = makeDescription;
            this.ModelCode = modelCode;
            this.ModelDescription = modelDescription;
            this.VehicleTypeCode = vehicleTypeCode;
            this.VehicleTypeDescription = vehicleTypeDescription;
            this.ColourCode = colourCode;
            this.ColourDescription = colourDescription;
            this.VehicleDrivenCode = vehicleDrivenCode;
            this.VehicleDrivenDescription = vehicleDrivenDescription;
            this.NetPower = netPower;
            this.FuelTypeCode = fuelTypeCode;
            this.FuelTypeDescription = fuelTypeDescription;
            this.Tare = tare;
            this.Gvm = gvm;
            this.AxlesTotal = axlesTotal;
            this.DrivenAxles = drivenAxles;
            this.NumberOfWheels = numberOfWheels;
            this.OverallWidth = overallWidth;
            this.OverallLength = overallLength;
            this.OverallHeight = overallHeight;
            this.RegistrationTypeCode = registrationTypeCode;
            this.RegistrationTypeDescription = registrationTypeDescription;
            this.ViNChassisNumber = viNChassisNumber;
            this.NaTISVehicleRegisterNumber = naTISVehicleRegisterNumber;
            this.EngineNumber = engineNumber;
            this.MakeCode = makeCode;
            this.MakeDescription = makeDescription;
            this.ModelCode = modelCode;
            this.ModelDescription = modelDescription;
            this.VehicleTypeCode = vehicleTypeCode;
            this.VehicleTypeDescription = vehicleTypeDescription;
            this.ColourCode = colourCode;
            this.ColourDescription = colourDescription;
            this.VehicleDrivenCode = vehicleDrivenCode;
            this.VehicleDrivenDescription = vehicleDrivenDescription;
            this.NetPower = netPower;
            this.FuelTypeCode = fuelTypeCode;
            this.FuelTypeDescription = fuelTypeDescription;
            this.Tare = tare;
            this.Gvm = gvm;
            this.AxlesTotal = axlesTotal;
            this.DrivenAxles = drivenAxles;
            this.NumberOfWheels = numberOfWheels;
            this.OverallWidth = overallWidth;
            this.OverallLength = overallLength;
            this.OverallHeight = overallHeight;
            this.RegistrationTypeCode = registrationTypeCode;
            this.RegistrationTypeDescription = registrationTypeDescription;
        }

        /// <summary>
        /// Gets or Sets ViNChassisNumber
        /// </summary>
        [DataMember(Name="viN_Chassis_Number", EmitDefaultValue=true)]
        public string ViNChassisNumber { get; set; }

        /// <summary>
        /// Gets or Sets NaTISVehicleRegisterNumber
        /// </summary>
        [DataMember(Name="naTIS_Vehicle_Register_Number", EmitDefaultValue=true)]
        public string NaTISVehicleRegisterNumber { get; set; }

        /// <summary>
        /// Gets or Sets EngineNumber
        /// </summary>
        [DataMember(Name="engine_Number", EmitDefaultValue=true)]
        public string EngineNumber { get; set; }

        /// <summary>
        /// Gets or Sets MakeCode
        /// </summary>
        [DataMember(Name="make_Code", EmitDefaultValue=true)]
        public string MakeCode { get; set; }

        /// <summary>
        /// Gets or Sets MakeDescription
        /// </summary>
        [DataMember(Name="make_Description", EmitDefaultValue=true)]
        public string MakeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ModelCode
        /// </summary>
        [DataMember(Name="model_Code", EmitDefaultValue=true)]
        public string ModelCode { get; set; }

        /// <summary>
        /// Gets or Sets ModelDescription
        /// </summary>
        [DataMember(Name="model_Description", EmitDefaultValue=true)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or Sets VehicleTypeCode
        /// </summary>
        [DataMember(Name="vehicle_Type_Code", EmitDefaultValue=true)]
        public string VehicleTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets VehicleTypeDescription
        /// </summary>
        [DataMember(Name="vehicle_Type_Description", EmitDefaultValue=true)]
        public string VehicleTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets ColourCode
        /// </summary>
        [DataMember(Name="colour_Code", EmitDefaultValue=true)]
        public string ColourCode { get; set; }

        /// <summary>
        /// Gets or Sets ColourDescription
        /// </summary>
        [DataMember(Name="colour_Description", EmitDefaultValue=true)]
        public string ColourDescription { get; set; }

        /// <summary>
        /// Gets or Sets VehicleDrivenCode
        /// </summary>
        [DataMember(Name="vehicle_Driven_Code", EmitDefaultValue=true)]
        public string VehicleDrivenCode { get; set; }

        /// <summary>
        /// Gets or Sets VehicleDrivenDescription
        /// </summary>
        [DataMember(Name="vehicle_Driven_Description", EmitDefaultValue=true)]
        public string VehicleDrivenDescription { get; set; }

        /// <summary>
        /// Gets or Sets NetPower
        /// </summary>
        [DataMember(Name="net_Power", EmitDefaultValue=true)]
        public string NetPower { get; set; }

        /// <summary>
        /// Gets or Sets FuelTypeCode
        /// </summary>
        [DataMember(Name="fuel_Type_Code", EmitDefaultValue=true)]
        public string FuelTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets FuelTypeDescription
        /// </summary>
        [DataMember(Name="fuel_Type_Description", EmitDefaultValue=true)]
        public string FuelTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets Tare
        /// </summary>
        [DataMember(Name="tare", EmitDefaultValue=true)]
        public string Tare { get; set; }

        /// <summary>
        /// Gets or Sets Gvm
        /// </summary>
        [DataMember(Name="gvm", EmitDefaultValue=true)]
        public string Gvm { get; set; }

        /// <summary>
        /// Gets or Sets AxlesTotal
        /// </summary>
        [DataMember(Name="axles_Total", EmitDefaultValue=true)]
        public string AxlesTotal { get; set; }

        /// <summary>
        /// Gets or Sets DrivenAxles
        /// </summary>
        [DataMember(Name="driven_Axles", EmitDefaultValue=true)]
        public string DrivenAxles { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfWheels
        /// </summary>
        [DataMember(Name="number_of_Wheels", EmitDefaultValue=true)]
        public string NumberOfWheels { get; set; }

        /// <summary>
        /// Gets or Sets OverallWidth
        /// </summary>
        [DataMember(Name="overall_Width", EmitDefaultValue=true)]
        public string OverallWidth { get; set; }

        /// <summary>
        /// Gets or Sets OverallLength
        /// </summary>
        [DataMember(Name="overall_Length", EmitDefaultValue=true)]
        public string OverallLength { get; set; }

        /// <summary>
        /// Gets or Sets OverallHeight
        /// </summary>
        [DataMember(Name="overall_Height", EmitDefaultValue=true)]
        public string OverallHeight { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationTypeCode
        /// </summary>
        [DataMember(Name="registration_Type_Code", EmitDefaultValue=true)]
        public string RegistrationTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationTypeDescription
        /// </summary>
        [DataMember(Name="registration_Type_Description", EmitDefaultValue=true)]
        public string RegistrationTypeDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransunionConsumer118NatisDetailedVehicleInformationUU {\n");
            sb.Append("  ViNChassisNumber: ").Append(ViNChassisNumber).Append("\n");
            sb.Append("  NaTISVehicleRegisterNumber: ").Append(NaTISVehicleRegisterNumber).Append("\n");
            sb.Append("  EngineNumber: ").Append(EngineNumber).Append("\n");
            sb.Append("  MakeCode: ").Append(MakeCode).Append("\n");
            sb.Append("  MakeDescription: ").Append(MakeDescription).Append("\n");
            sb.Append("  ModelCode: ").Append(ModelCode).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  VehicleTypeCode: ").Append(VehicleTypeCode).Append("\n");
            sb.Append("  VehicleTypeDescription: ").Append(VehicleTypeDescription).Append("\n");
            sb.Append("  ColourCode: ").Append(ColourCode).Append("\n");
            sb.Append("  ColourDescription: ").Append(ColourDescription).Append("\n");
            sb.Append("  VehicleDrivenCode: ").Append(VehicleDrivenCode).Append("\n");
            sb.Append("  VehicleDrivenDescription: ").Append(VehicleDrivenDescription).Append("\n");
            sb.Append("  NetPower: ").Append(NetPower).Append("\n");
            sb.Append("  FuelTypeCode: ").Append(FuelTypeCode).Append("\n");
            sb.Append("  FuelTypeDescription: ").Append(FuelTypeDescription).Append("\n");
            sb.Append("  Tare: ").Append(Tare).Append("\n");
            sb.Append("  Gvm: ").Append(Gvm).Append("\n");
            sb.Append("  AxlesTotal: ").Append(AxlesTotal).Append("\n");
            sb.Append("  DrivenAxles: ").Append(DrivenAxles).Append("\n");
            sb.Append("  NumberOfWheels: ").Append(NumberOfWheels).Append("\n");
            sb.Append("  OverallWidth: ").Append(OverallWidth).Append("\n");
            sb.Append("  OverallLength: ").Append(OverallLength).Append("\n");
            sb.Append("  OverallHeight: ").Append(OverallHeight).Append("\n");
            sb.Append("  RegistrationTypeCode: ").Append(RegistrationTypeCode).Append("\n");
            sb.Append("  RegistrationTypeDescription: ").Append(RegistrationTypeDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransunionConsumer118NatisDetailedVehicleInformationUU);
        }

        /// <summary>
        /// Returns true if TransunionConsumer118NatisDetailedVehicleInformationUU instances are equal
        /// </summary>
        /// <param name="input">Instance of TransunionConsumer118NatisDetailedVehicleInformationUU to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransunionConsumer118NatisDetailedVehicleInformationUU input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ViNChassisNumber == input.ViNChassisNumber ||
                    (this.ViNChassisNumber != null &&
                    this.ViNChassisNumber.Equals(input.ViNChassisNumber))
                ) && 
                (
                    this.NaTISVehicleRegisterNumber == input.NaTISVehicleRegisterNumber ||
                    (this.NaTISVehicleRegisterNumber != null &&
                    this.NaTISVehicleRegisterNumber.Equals(input.NaTISVehicleRegisterNumber))
                ) && 
                (
                    this.EngineNumber == input.EngineNumber ||
                    (this.EngineNumber != null &&
                    this.EngineNumber.Equals(input.EngineNumber))
                ) && 
                (
                    this.MakeCode == input.MakeCode ||
                    (this.MakeCode != null &&
                    this.MakeCode.Equals(input.MakeCode))
                ) && 
                (
                    this.MakeDescription == input.MakeDescription ||
                    (this.MakeDescription != null &&
                    this.MakeDescription.Equals(input.MakeDescription))
                ) && 
                (
                    this.ModelCode == input.ModelCode ||
                    (this.ModelCode != null &&
                    this.ModelCode.Equals(input.ModelCode))
                ) && 
                (
                    this.ModelDescription == input.ModelDescription ||
                    (this.ModelDescription != null &&
                    this.ModelDescription.Equals(input.ModelDescription))
                ) && 
                (
                    this.VehicleTypeCode == input.VehicleTypeCode ||
                    (this.VehicleTypeCode != null &&
                    this.VehicleTypeCode.Equals(input.VehicleTypeCode))
                ) && 
                (
                    this.VehicleTypeDescription == input.VehicleTypeDescription ||
                    (this.VehicleTypeDescription != null &&
                    this.VehicleTypeDescription.Equals(input.VehicleTypeDescription))
                ) && 
                (
                    this.ColourCode == input.ColourCode ||
                    (this.ColourCode != null &&
                    this.ColourCode.Equals(input.ColourCode))
                ) && 
                (
                    this.ColourDescription == input.ColourDescription ||
                    (this.ColourDescription != null &&
                    this.ColourDescription.Equals(input.ColourDescription))
                ) && 
                (
                    this.VehicleDrivenCode == input.VehicleDrivenCode ||
                    (this.VehicleDrivenCode != null &&
                    this.VehicleDrivenCode.Equals(input.VehicleDrivenCode))
                ) && 
                (
                    this.VehicleDrivenDescription == input.VehicleDrivenDescription ||
                    (this.VehicleDrivenDescription != null &&
                    this.VehicleDrivenDescription.Equals(input.VehicleDrivenDescription))
                ) && 
                (
                    this.NetPower == input.NetPower ||
                    (this.NetPower != null &&
                    this.NetPower.Equals(input.NetPower))
                ) && 
                (
                    this.FuelTypeCode == input.FuelTypeCode ||
                    (this.FuelTypeCode != null &&
                    this.FuelTypeCode.Equals(input.FuelTypeCode))
                ) && 
                (
                    this.FuelTypeDescription == input.FuelTypeDescription ||
                    (this.FuelTypeDescription != null &&
                    this.FuelTypeDescription.Equals(input.FuelTypeDescription))
                ) && 
                (
                    this.Tare == input.Tare ||
                    (this.Tare != null &&
                    this.Tare.Equals(input.Tare))
                ) && 
                (
                    this.Gvm == input.Gvm ||
                    (this.Gvm != null &&
                    this.Gvm.Equals(input.Gvm))
                ) && 
                (
                    this.AxlesTotal == input.AxlesTotal ||
                    (this.AxlesTotal != null &&
                    this.AxlesTotal.Equals(input.AxlesTotal))
                ) && 
                (
                    this.DrivenAxles == input.DrivenAxles ||
                    (this.DrivenAxles != null &&
                    this.DrivenAxles.Equals(input.DrivenAxles))
                ) && 
                (
                    this.NumberOfWheels == input.NumberOfWheels ||
                    (this.NumberOfWheels != null &&
                    this.NumberOfWheels.Equals(input.NumberOfWheels))
                ) && 
                (
                    this.OverallWidth == input.OverallWidth ||
                    (this.OverallWidth != null &&
                    this.OverallWidth.Equals(input.OverallWidth))
                ) && 
                (
                    this.OverallLength == input.OverallLength ||
                    (this.OverallLength != null &&
                    this.OverallLength.Equals(input.OverallLength))
                ) && 
                (
                    this.OverallHeight == input.OverallHeight ||
                    (this.OverallHeight != null &&
                    this.OverallHeight.Equals(input.OverallHeight))
                ) && 
                (
                    this.RegistrationTypeCode == input.RegistrationTypeCode ||
                    (this.RegistrationTypeCode != null &&
                    this.RegistrationTypeCode.Equals(input.RegistrationTypeCode))
                ) && 
                (
                    this.RegistrationTypeDescription == input.RegistrationTypeDescription ||
                    (this.RegistrationTypeDescription != null &&
                    this.RegistrationTypeDescription.Equals(input.RegistrationTypeDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ViNChassisNumber != null)
                    hashCode = hashCode * 59 + this.ViNChassisNumber.GetHashCode();
                if (this.NaTISVehicleRegisterNumber != null)
                    hashCode = hashCode * 59 + this.NaTISVehicleRegisterNumber.GetHashCode();
                if (this.EngineNumber != null)
                    hashCode = hashCode * 59 + this.EngineNumber.GetHashCode();
                if (this.MakeCode != null)
                    hashCode = hashCode * 59 + this.MakeCode.GetHashCode();
                if (this.MakeDescription != null)
                    hashCode = hashCode * 59 + this.MakeDescription.GetHashCode();
                if (this.ModelCode != null)
                    hashCode = hashCode * 59 + this.ModelCode.GetHashCode();
                if (this.ModelDescription != null)
                    hashCode = hashCode * 59 + this.ModelDescription.GetHashCode();
                if (this.VehicleTypeCode != null)
                    hashCode = hashCode * 59 + this.VehicleTypeCode.GetHashCode();
                if (this.VehicleTypeDescription != null)
                    hashCode = hashCode * 59 + this.VehicleTypeDescription.GetHashCode();
                if (this.ColourCode != null)
                    hashCode = hashCode * 59 + this.ColourCode.GetHashCode();
                if (this.ColourDescription != null)
                    hashCode = hashCode * 59 + this.ColourDescription.GetHashCode();
                if (this.VehicleDrivenCode != null)
                    hashCode = hashCode * 59 + this.VehicleDrivenCode.GetHashCode();
                if (this.VehicleDrivenDescription != null)
                    hashCode = hashCode * 59 + this.VehicleDrivenDescription.GetHashCode();
                if (this.NetPower != null)
                    hashCode = hashCode * 59 + this.NetPower.GetHashCode();
                if (this.FuelTypeCode != null)
                    hashCode = hashCode * 59 + this.FuelTypeCode.GetHashCode();
                if (this.FuelTypeDescription != null)
                    hashCode = hashCode * 59 + this.FuelTypeDescription.GetHashCode();
                if (this.Tare != null)
                    hashCode = hashCode * 59 + this.Tare.GetHashCode();
                if (this.Gvm != null)
                    hashCode = hashCode * 59 + this.Gvm.GetHashCode();
                if (this.AxlesTotal != null)
                    hashCode = hashCode * 59 + this.AxlesTotal.GetHashCode();
                if (this.DrivenAxles != null)
                    hashCode = hashCode * 59 + this.DrivenAxles.GetHashCode();
                if (this.NumberOfWheels != null)
                    hashCode = hashCode * 59 + this.NumberOfWheels.GetHashCode();
                if (this.OverallWidth != null)
                    hashCode = hashCode * 59 + this.OverallWidth.GetHashCode();
                if (this.OverallLength != null)
                    hashCode = hashCode * 59 + this.OverallLength.GetHashCode();
                if (this.OverallHeight != null)
                    hashCode = hashCode * 59 + this.OverallHeight.GetHashCode();
                if (this.RegistrationTypeCode != null)
                    hashCode = hashCode * 59 + this.RegistrationTypeCode.GetHashCode();
                if (this.RegistrationTypeDescription != null)
                    hashCode = hashCode * 59 + this.RegistrationTypeDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
