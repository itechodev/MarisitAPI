/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransUnionCommercialBusinessApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the business report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionCommercialCommercialResponse</returns>
        ApiReturnOfTransunionCommercialCommercialResponse TUBusinessResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Returns the business report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionCommercialCommercialResponse</returns>
        ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse> TUBusinessResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray TUBusinessSearch (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest));

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchWithHttpInfo (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest));
        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray TUBusinessSearchDunsRequest (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest));

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchDunsRequestWithHttpInfo (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest));
        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray TUBusinessSearchRegistrationRequest (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest));

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchRegistrationRequestWithHttpInfo (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the business report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionCommercialCommercialResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfTransunionCommercialCommercialResponse> TUBusinessResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the business report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionCommercialCommercialResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse>> TUBusinessResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchAsync (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchWithHttpInfoAsync (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchDunsRequestAsync (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchDunsRequestWithHttpInfoAsync (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchRegistrationRequestAsync (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchRegistrationRequestWithHttpInfoAsync (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransUnionCommercialBusinessApi : ITransUnionCommercialBusinessApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionCommercialBusinessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransUnionCommercialBusinessApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionCommercialBusinessApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransUnionCommercialBusinessApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionCommercialBusinessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransUnionCommercialBusinessApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the business report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionCommercialCommercialResponse</returns>
        public ApiReturnOfTransunionCommercialCommercialResponse TUBusinessResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse> localVarResponse = TUBusinessResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the business report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionCommercialCommercialResponse</returns>
        public ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse> TUBusinessResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/tubusinessresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionCommercialCommercialResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionCommercialCommercialResponse)));
        }

        /// <summary>
        /// Returns the business report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionCommercialCommercialResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfTransunionCommercialCommercialResponse> TUBusinessResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse> localVarResponse = await TUBusinessResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the business report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionCommercialCommercialResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse>> TUBusinessResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tubusinessresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionCommercialCommercialResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionCommercialCommercialResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionCommercialCommercialResponse)));
        }

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray TUBusinessSearch (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = TUBusinessSearchWithHttpInfo(transunionBusinessSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchWithHttpInfo (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest))
        {

            var localVarPath = "/api/v6/tubusinesssearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchRequest != null && transunionBusinessSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchAsync (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await TUBusinessSearchWithHttpInfoAsync(transunionBusinessSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of business matches searched by name. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchWithHttpInfoAsync (TransunionBusinessSearchRequest transunionBusinessSearchRequest = default(TransunionBusinessSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tubusinesssearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchRequest != null && transunionBusinessSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray TUBusinessSearchDunsRequest (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = TUBusinessSearchDunsRequestWithHttpInfo(transunionBusinessSearchDunsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchDunsRequestWithHttpInfo (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest))
        {

            var localVarPath = "/api/v6/tubusinesssearchdunsrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchDunsRequest != null && transunionBusinessSearchDunsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchDunsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchDunsRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearchDunsRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchDunsRequestAsync (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await TUBusinessSearchDunsRequestWithHttpInfoAsync(transunionBusinessSearchDunsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of business matches searched by duns number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchDunsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchDunsRequestWithHttpInfoAsync (TransunionBusinessSearchDunsRequest transunionBusinessSearchDunsRequest = default(TransunionBusinessSearchDunsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tubusinesssearchdunsrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchDunsRequest != null && transunionBusinessSearchDunsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchDunsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchDunsRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearchDunsRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray TUBusinessSearchRegistrationRequest (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = TUBusinessSearchRegistrationRequestWithHttpInfo(transunionBusinessSearchRegistrationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> TUBusinessSearchRegistrationRequestWithHttpInfo (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest))
        {

            var localVarPath = "/api/v6/tubusinesssearchregistrationrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchRegistrationRequest != null && transunionBusinessSearchRegistrationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchRegistrationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchRegistrationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearchRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> TUBusinessSearchRegistrationRequestAsync (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await TUBusinessSearchRegistrationRequestWithHttpInfoAsync(transunionBusinessSearchRegistrationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of business matches searched by registration number. Pass one of the references to BusinessResult. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionBusinessSearchRegistrationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> TUBusinessSearchRegistrationRequestWithHttpInfoAsync (TransunionBusinessSearchRegistrationRequest transunionBusinessSearchRegistrationRequest = default(TransunionBusinessSearchRegistrationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tubusinesssearchregistrationrequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionBusinessSearchRegistrationRequest != null && transunionBusinessSearchRegistrationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionBusinessSearchRegistrationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionBusinessSearchRegistrationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUBusinessSearchRegistrationRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

    }
}
