/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXdsConsumerIndividualApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray DirectorList (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> DirectorListWithHttpInfo (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest));
        /// <summary>
        /// Returns the report for director/principal details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsDirector</returns>
        ApiReturnOfXdsDirector DirectorResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Returns the report for director/principal details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsDirector</returns>
        ApiResponse<ApiReturnOfXdsDirector> DirectorResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Returns identification details of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        ApiReturnOfXdsHomeAffairs IDVerificationRealTime (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest));

        /// <summary>
        /// Returns identification details of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        ApiResponse<ApiReturnOfXdsHomeAffairs> IDVerificationRealTimeWithHttpInfo (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest));
        /// <summary>
        /// Returns a consumer report with possible data matches;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsLinkage</returns>
        ApiReturnOfXdsLinkage LinkageResult (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest));

        /// <summary>
        /// Returns a consumer report with possible data matches;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsLinkage</returns>
        ApiResponse<ApiReturnOfXdsLinkage> LinkageResultWithHttpInfo (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest));
        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsLinkageSearch</returns>
        ApiReturnOfXdsLinkageSearch LinkageSearch (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest));

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsLinkageSearch</returns>
        ApiResponse<ApiReturnOfXdsLinkageSearch> LinkageSearchWithHttpInfo (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest));
        /// <summary>
        /// Returns the marital status of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        ApiReturnOfXdsHomeAffairs MaritalStatusRealTime (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest));

        /// <summary>
        /// Returns the marital status of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        ApiResponse<ApiReturnOfXdsHomeAffairs> MaritalStatusRealTimeWithHttpInfo (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsAccountTrace (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsAccountTraceWithHttpInfo (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest));
        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        ApiReturnOfXdsAccountVerificationResult XdsBankAccountIndividualById (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest));

        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByIdWithHttpInfo (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest));
        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        ApiReturnOfXdsAccountVerificationResult XdsBankAccountIndividualByPassport (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest));

        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByPassportWithHttpInfo (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest));
        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsBiometricList (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest));

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsBiometricListWithHttpInfo (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest));
        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        ApiReturnOfXdsHomeAffairs XdsBiometricResult (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest));

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        ApiResponse<ApiReturnOfXdsHomeAffairs> XdsBiometricResultWithHttpInfo (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiry (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryWithHttpInfo (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiryNames (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryNamesWithHttpInfo (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiryPassport (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryPassportWithHttpInfo (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsEasyTrace (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsEasyTraceWithHttpInfo (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest));
        /// <summary>
        /// Return bonus segments available for one of the trace search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfBonusSegmentArray</returns>
        ApiReturnOfBonusSegmentArray XdsGetBonusSegments (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Return bonus segments available for one of the trace search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfBonusSegmentArray</returns>
        ApiResponse<ApiReturnOfBonusSegmentArray> XdsGetBonusSegmentsWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsIdTrace (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsIdTraceWithHttpInfo (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsPostalAddress (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsPostalAddressWithHttpInfo (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsStreetTrace (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsStreetTraceWithHttpInfo (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest));
        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsTelephoneToID (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest));

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsTelephoneToIDWithHttpInfo (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray XdsTelephoneTrace (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> XdsTelephoneTraceWithHttpInfo (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest));
        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsConsumer</returns>
        ApiReturnOfXdsConsumer XdsTraceResult (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest));

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsConsumer</returns>
        ApiResponse<ApiReturnOfXdsConsumer> XdsTraceResultWithHttpInfo (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> DirectorListAsync (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> DirectorListWithHttpInfoAsync (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the report for director/principal details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsDirector</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsDirector> DirectorResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the report for director/principal details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsDirector)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsDirector>> DirectorResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns identification details of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> IDVerificationRealTimeAsync (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns identification details of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> IDVerificationRealTimeWithHttpInfoAsync (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a consumer report with possible data matches;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsLinkage</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsLinkage> LinkageResultAsync (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a consumer report with possible data matches;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsLinkage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsLinkage>> LinkageResultWithHttpInfoAsync (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsLinkageSearch</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsLinkageSearch> LinkageSearchAsync (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsLinkageSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsLinkageSearch>> LinkageSearchWithHttpInfoAsync (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns the marital status of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> MaritalStatusRealTimeAsync (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the marital status of an individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> MaritalStatusRealTimeWithHttpInfoAsync (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsAccountTraceAsync (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsAccountTraceWithHttpInfoAsync (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByIdAsync (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountIndividualByIdWithHttpInfoAsync (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByPassportAsync (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns bank account verification data for individual.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountIndividualByPassportWithHttpInfoAsync (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsBiometricListAsync (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsBiometricListWithHttpInfoAsync (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> XdsBiometricResultAsync (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo&#39;s.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> XdsBiometricResultWithHttpInfoAsync (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryAsync (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryWithHttpInfoAsync (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryNamesAsync (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryNamesWithHttpInfoAsync (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryPassportAsync (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryPassportWithHttpInfoAsync (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsEasyTraceAsync (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsEasyTraceWithHttpInfoAsync (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return bonus segments available for one of the trace search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfBonusSegmentArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfBonusSegmentArray> XdsGetBonusSegmentsAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return bonus segments available for one of the trace search results
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfBonusSegmentArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfBonusSegmentArray>> XdsGetBonusSegmentsWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsIdTraceAsync (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsIdTraceWithHttpInfoAsync (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsPostalAddressAsync (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsPostalAddressWithHttpInfoAsync (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsStreetTraceAsync (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsStreetTraceWithHttpInfoAsync (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsTelephoneToIDAsync (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsTelephoneToIDWithHttpInfoAsync (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsTelephoneTraceAsync (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsTelephoneTraceWithHttpInfoAsync (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsConsumer</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsConsumer> XdsTraceResultAsync (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsConsumer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsConsumer>> XdsTraceResultWithHttpInfoAsync (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class XdsConsumerIndividualApi : IXdsConsumerIndividualApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerIndividualApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XdsConsumerIndividualApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerIndividualApi"/> class
        /// </summary>
        /// <returns></returns>
        public XdsConsumerIndividualApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsConsumerIndividualApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public XdsConsumerIndividualApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray DirectorList (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = DirectorListWithHttpInfo(xdsDirectorMatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> DirectorListWithHttpInfo (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest))
        {

            var localVarPath = "/api/v6/directorlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsDirectorMatchRequest != null && xdsDirectorMatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsDirectorMatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsDirectorMatchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectorList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> DirectorListAsync (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await DirectorListWithHttpInfoAsync(xdsDirectorMatchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number, firstname, surname. Pass one of the references to the DirectorResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsDirectorMatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> DirectorListWithHttpInfoAsync (XdsDirectorMatchRequest xdsDirectorMatchRequest = default(XdsDirectorMatchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/directorlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsDirectorMatchRequest != null && xdsDirectorMatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsDirectorMatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsDirectorMatchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectorList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns the report for director/principal details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsDirector</returns>
        public ApiReturnOfXdsDirector DirectorResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfXdsDirector> localVarResponse = DirectorResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the report for director/principal details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsDirector</returns>
        public ApiResponse<ApiReturnOfXdsDirector> DirectorResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/directorresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectorResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsDirector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsDirector) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsDirector)));
        }

        /// <summary>
        /// Returns the report for director/principal details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsDirector</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsDirector> DirectorResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsDirector> localVarResponse = await DirectorResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the report for director/principal details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsDirector)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsDirector>> DirectorResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/directorresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DirectorResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsDirector>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsDirector) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsDirector)));
        }

        /// <summary>
        /// Returns identification details of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        public ApiReturnOfXdsHomeAffairs IDVerificationRealTime (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = IDVerificationRealTimeWithHttpInfo(xdsIDVerificationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns identification details of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        public ApiResponse<ApiReturnOfXdsHomeAffairs> IDVerificationRealTimeWithHttpInfo (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest))
        {

            var localVarPath = "/api/v6/idverificationrealtime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsIDVerificationRequest != null && xdsIDVerificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsIDVerificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsIDVerificationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IDVerificationRealTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Returns identification details of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> IDVerificationRealTimeAsync (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = await IDVerificationRealTimeWithHttpInfoAsync(xdsIDVerificationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns identification details of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsIDVerificationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> IDVerificationRealTimeWithHttpInfoAsync (XdsIDVerificationRequest xdsIDVerificationRequest = default(XdsIDVerificationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/idverificationrealtime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsIDVerificationRequest != null && xdsIDVerificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsIDVerificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsIDVerificationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IDVerificationRealTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Returns a consumer report with possible data matches; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsLinkage</returns>
        public ApiReturnOfXdsLinkage LinkageResult (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest))
        {
             ApiResponse<ApiReturnOfXdsLinkage> localVarResponse = LinkageResultWithHttpInfo(xdsLinkageReportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a consumer report with possible data matches; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsLinkage</returns>
        public ApiResponse<ApiReturnOfXdsLinkage> LinkageResultWithHttpInfo (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest))
        {

            var localVarPath = "/api/v6/linkageresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsLinkageReportRequest != null && xdsLinkageReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsLinkageReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsLinkageReportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkageResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsLinkage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsLinkage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsLinkage)));
        }

        /// <summary>
        /// Returns a consumer report with possible data matches; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsLinkage</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsLinkage> LinkageResultAsync (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsLinkage> localVarResponse = await LinkageResultWithHttpInfoAsync(xdsLinkageReportRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a consumer report with possible data matches; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageReportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsLinkage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsLinkage>> LinkageResultWithHttpInfoAsync (XdsLinkageReportRequest xdsLinkageReportRequest = default(XdsLinkageReportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/linkageresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsLinkageReportRequest != null && xdsLinkageReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsLinkageReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsLinkageReportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkageResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsLinkage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsLinkage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsLinkage)));
        }

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsLinkageSearch</returns>
        public ApiReturnOfXdsLinkageSearch LinkageSearch (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest))
        {
             ApiResponse<ApiReturnOfXdsLinkageSearch> localVarResponse = LinkageSearchWithHttpInfo(xdsLinkageSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsLinkageSearch</returns>
        public ApiResponse<ApiReturnOfXdsLinkageSearch> LinkageSearchWithHttpInfo (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest))
        {

            var localVarPath = "/api/v6/linkagesearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsLinkageSearchRequest != null && xdsLinkageSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsLinkageSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsLinkageSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsLinkageSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsLinkageSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsLinkageSearch)));
        }

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsLinkageSearch</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsLinkageSearch> LinkageSearchAsync (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsLinkageSearch> localVarResponse = await LinkageSearchWithHttpInfoAsync(xdsLinkageSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns 2 sets of possible matches for. Return a reference from each set to the LinkageResult; 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsLinkageSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsLinkageSearch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsLinkageSearch>> LinkageSearchWithHttpInfoAsync (XdsLinkageSearchRequest xdsLinkageSearchRequest = default(XdsLinkageSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/linkagesearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsLinkageSearchRequest != null && xdsLinkageSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsLinkageSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsLinkageSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkageSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsLinkageSearch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsLinkageSearch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsLinkageSearch)));
        }

        /// <summary>
        /// Returns the marital status of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        public ApiReturnOfXdsHomeAffairs MaritalStatusRealTime (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = MaritalStatusRealTimeWithHttpInfo(xdsMaritalStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the marital status of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        public ApiResponse<ApiReturnOfXdsHomeAffairs> MaritalStatusRealTimeWithHttpInfo (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest))
        {

            var localVarPath = "/api/v6/maritalstatusrealtime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsMaritalStatusRequest != null && xdsMaritalStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsMaritalStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsMaritalStatusRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaritalStatusRealTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Returns the marital status of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> MaritalStatusRealTimeAsync (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = await MaritalStatusRealTimeWithHttpInfoAsync(xdsMaritalStatusRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the marital status of an individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsMaritalStatusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> MaritalStatusRealTimeWithHttpInfoAsync (XdsMaritalStatusRequest xdsMaritalStatusRequest = default(XdsMaritalStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/maritalstatusrealtime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsMaritalStatusRequest != null && xdsMaritalStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsMaritalStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsMaritalStatusRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MaritalStatusRealTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsAccountTrace (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsAccountTraceWithHttpInfo(xdsAccountTraceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsAccountTraceWithHttpInfo (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest))
        {

            var localVarPath = "/api/v6/xdsaccounttrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsAccountTraceRequest != null && xdsAccountTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsAccountTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsAccountTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsAccountTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsAccountTraceAsync (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsAccountTraceWithHttpInfoAsync(xdsAccountTraceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using account data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsAccountTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsAccountTraceWithHttpInfoAsync (XdsAccountTraceRequest xdsAccountTraceRequest = default(XdsAccountTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsaccounttrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsAccountTraceRequest != null && xdsAccountTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsAccountTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsAccountTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsAccountTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiReturnOfXdsAccountVerificationResult XdsBankAccountIndividualById (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = XdsBankAccountIndividualByIdWithHttpInfo(xdsBankVerificationIDRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByIdWithHttpInfo (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest))
        {

            var localVarPath = "/api/v6/xdsbankaccountindividualbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationIDRequest != null && xdsBankVerificationIDRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationIDRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationIDRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountIndividualById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByIdAsync (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = await XdsBankAccountIndividualByIdWithHttpInfoAsync(xdsBankVerificationIDRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationIDRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountIndividualByIdWithHttpInfoAsync (XdsBankVerificationIDRequest xdsBankVerificationIDRequest = default(XdsBankVerificationIDRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbankaccountindividualbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationIDRequest != null && xdsBankVerificationIDRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationIDRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationIDRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountIndividualById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiReturnOfXdsAccountVerificationResult XdsBankAccountIndividualByPassport (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = XdsBankAccountIndividualByPassportWithHttpInfo(xdsBankVerificationPassportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByPassportWithHttpInfo (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest))
        {

            var localVarPath = "/api/v6/xdsbankaccountindividualbypassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationPassportRequest != null && xdsBankVerificationPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationPassportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountIndividualByPassport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountIndividualByPassportAsync (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = await XdsBankAccountIndividualByPassportWithHttpInfoAsync(xdsBankVerificationPassportRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns bank account verification data for individual. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountIndividualByPassportWithHttpInfoAsync (XdsBankVerificationPassportRequest xdsBankVerificationPassportRequest = default(XdsBankVerificationPassportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbankaccountindividualbypassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationPassportRequest != null && xdsBankVerificationPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationPassportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountIndividualByPassport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsBiometricList (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsBiometricListWithHttpInfo(xdsBiometricSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsBiometricListWithHttpInfo (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest))
        {

            var localVarPath = "/api/v6/xdsbiometriclist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBiometricSearchRequest != null && xdsBiometricSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBiometricSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBiometricSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBiometricList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsBiometricListAsync (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsBiometricListWithHttpInfoAsync(xdsBiometricSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a list of consumers by ID Numbers for Biometric data including ID photo. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsBiometricListWithHttpInfoAsync (XdsBiometricSearchRequest xdsBiometricSearchRequest = default(XdsBiometricSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbiometriclist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBiometricSearchRequest != null && xdsBiometricSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBiometricSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBiometricSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBiometricList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsHomeAffairs</returns>
        public ApiReturnOfXdsHomeAffairs XdsBiometricResult (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = XdsBiometricResultWithHttpInfo(xdsBiometricResultRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsHomeAffairs</returns>
        public ApiResponse<ApiReturnOfXdsHomeAffairs> XdsBiometricResultWithHttpInfo (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest))
        {

            var localVarPath = "/api/v6/xdsbiometricresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBiometricResultRequest != null && xdsBiometricResultRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBiometricResultRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBiometricResultRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBiometricResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsHomeAffairs</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsHomeAffairs> XdsBiometricResultAsync (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsHomeAffairs> localVarResponse = await XdsBiometricResultWithHttpInfoAsync(xdsBiometricResultRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit reference number from XdsBiometricList call and optional fingerprint data for verification.  Returns biometric data including ID photo's. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBiometricResultRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsHomeAffairs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsHomeAffairs>> XdsBiometricResultWithHttpInfoAsync (XdsBiometricResultRequest xdsBiometricResultRequest = default(XdsBiometricResultRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbiometricresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBiometricResultRequest != null && xdsBiometricResultRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBiometricResultRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBiometricResultRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBiometricResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsHomeAffairs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsHomeAffairs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsHomeAffairs)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiry (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsConsumerCreditEnquiryWithHttpInfo(xdsConsumerCreditEnquiryIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryWithHttpInfo (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryIdRequest != null && xdsConsumerCreditEnquiryIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryAsync (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsConsumerCreditEnquiryWithHttpInfoAsync(xdsConsumerCreditEnquiryIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using Id number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryWithHttpInfoAsync (XdsConsumerCreditEnquiryIdRequest xdsConsumerCreditEnquiryIdRequest = default(XdsConsumerCreditEnquiryIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryIdRequest != null && xdsConsumerCreditEnquiryIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiryNames (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsConsumerCreditEnquiryNamesWithHttpInfo(xdsConsumerCreditEnquiryNamesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryNamesWithHttpInfo (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquirynames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryNamesRequest != null && xdsConsumerCreditEnquiryNamesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryNamesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryNamesRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiryNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryNamesAsync (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsConsumerCreditEnquiryNamesWithHttpInfoAsync(xdsConsumerCreditEnquiryNamesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using names Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryNamesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryNamesWithHttpInfoAsync (XdsConsumerCreditEnquiryNamesRequest xdsConsumerCreditEnquiryNamesRequest = default(XdsConsumerCreditEnquiryNamesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquirynames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryNamesRequest != null && xdsConsumerCreditEnquiryNamesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryNamesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryNamesRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiryNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsConsumerCreditEnquiryPassport (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsConsumerCreditEnquiryPassportWithHttpInfo(xdsConsumerCreditEnquiryPassportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryPassportWithHttpInfo (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquirypassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryPassportRequest != null && xdsConsumerCreditEnquiryPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryPassportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiryPassport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsConsumerCreditEnquiryPassportAsync (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsConsumerCreditEnquiryPassportWithHttpInfoAsync(xdsConsumerCreditEnquiryPassportRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using passport. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsConsumerCreditEnquiryPassportRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsConsumerCreditEnquiryPassportWithHttpInfoAsync (XdsConsumerCreditEnquiryPassportRequest xdsConsumerCreditEnquiryPassportRequest = default(XdsConsumerCreditEnquiryPassportRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsconsumercreditenquirypassport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsConsumerCreditEnquiryPassportRequest != null && xdsConsumerCreditEnquiryPassportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsConsumerCreditEnquiryPassportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsConsumerCreditEnquiryPassportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsConsumerCreditEnquiryPassport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsEasyTrace (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsEasyTraceWithHttpInfo(xdsEasyTraceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsEasyTraceWithHttpInfo (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest))
        {

            var localVarPath = "/api/v6/xdseasytrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsEasyTraceRequest != null && xdsEasyTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsEasyTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsEasyTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsEasyTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsEasyTraceAsync (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsEasyTraceWithHttpInfoAsync(xdsEasyTraceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using consumer data. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsEasyTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsEasyTraceWithHttpInfoAsync (XdsEasyTraceRequest xdsEasyTraceRequest = default(XdsEasyTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdseasytrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsEasyTraceRequest != null && xdsEasyTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsEasyTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsEasyTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsEasyTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Return bonus segments available for one of the trace search results 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfBonusSegmentArray</returns>
        public ApiReturnOfBonusSegmentArray XdsGetBonusSegments (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfBonusSegmentArray> localVarResponse = XdsGetBonusSegmentsWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return bonus segments available for one of the trace search results 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfBonusSegmentArray</returns>
        public ApiResponse<ApiReturnOfBonusSegmentArray> XdsGetBonusSegmentsWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/xdsgetbonussegments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsGetBonusSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfBonusSegmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfBonusSegmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfBonusSegmentArray)));
        }

        /// <summary>
        /// Return bonus segments available for one of the trace search results 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfBonusSegmentArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfBonusSegmentArray> XdsGetBonusSegmentsAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfBonusSegmentArray> localVarResponse = await XdsGetBonusSegmentsWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return bonus segments available for one of the trace search results 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfBonusSegmentArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfBonusSegmentArray>> XdsGetBonusSegmentsWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsgetbonussegments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsGetBonusSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfBonusSegmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfBonusSegmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfBonusSegmentArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsIdTrace (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsIdTraceWithHttpInfo(xdsTraceIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsIdTraceWithHttpInfo (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest))
        {

            var localVarPath = "/api/v6/xdsidtrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceIdRequest != null && xdsTraceIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsIdTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsIdTraceAsync (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsIdTraceWithHttpInfoAsync(xdsTraceIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsIdTraceWithHttpInfoAsync (XdsTraceIdRequest xdsTraceIdRequest = default(XdsTraceIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsidtrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceIdRequest != null && xdsTraceIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsIdTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsPostalAddress (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsPostalAddressWithHttpInfo(xdsTraceAddressPostalRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsPostalAddressWithHttpInfo (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest))
        {

            var localVarPath = "/api/v6/xdspostaladdress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceAddressPostalRequest != null && xdsTraceAddressPostalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceAddressPostalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceAddressPostalRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsPostalAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsPostalAddressAsync (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsPostalAddressWithHttpInfoAsync(xdsTraceAddressPostalRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using postal address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressPostalRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsPostalAddressWithHttpInfoAsync (XdsTraceAddressPostalRequest xdsTraceAddressPostalRequest = default(XdsTraceAddressPostalRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdspostaladdress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceAddressPostalRequest != null && xdsTraceAddressPostalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceAddressPostalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceAddressPostalRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsPostalAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsStreetTrace (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsStreetTraceWithHttpInfo(xdsTraceAddressStreetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsStreetTraceWithHttpInfo (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest))
        {

            var localVarPath = "/api/v6/xdsstreettrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceAddressStreetRequest != null && xdsTraceAddressStreetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceAddressStreetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceAddressStreetRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsStreetTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsStreetTraceAsync (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsStreetTraceWithHttpInfoAsync(xdsTraceAddressStreetRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using street address. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceAddressStreetRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsStreetTraceWithHttpInfoAsync (XdsTraceAddressStreetRequest xdsTraceAddressStreetRequest = default(XdsTraceAddressStreetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsstreettrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceAddressStreetRequest != null && xdsTraceAddressStreetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceAddressStreetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceAddressStreetRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsStreetTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsTelephoneToID (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsTelephoneToIDWithHttpInfo(servicesXdsTelephoneToIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsTelephoneToIDWithHttpInfo (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest))
        {

            var localVarPath = "/api/v6/xdstelephonetoid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (servicesXdsTelephoneToIdRequest != null && servicesXdsTelephoneToIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(servicesXdsTelephoneToIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = servicesXdsTelephoneToIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTelephoneToID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsTelephoneToIDAsync (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsTelephoneToIDWithHttpInfoAsync(servicesXdsTelephoneToIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumers with ID numbers searching by telephone only. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="servicesXdsTelephoneToIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsTelephoneToIDWithHttpInfoAsync (ServicesXdsTelephoneToIdRequest servicesXdsTelephoneToIdRequest = default(ServicesXdsTelephoneToIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdstelephonetoid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (servicesXdsTelephoneToIdRequest != null && servicesXdsTelephoneToIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(servicesXdsTelephoneToIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = servicesXdsTelephoneToIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTelephoneToID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray XdsTelephoneTrace (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = XdsTelephoneTraceWithHttpInfo(xdsTraceTelephoneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> XdsTelephoneTraceWithHttpInfo (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest))
        {

            var localVarPath = "/api/v6/xdstelephonetrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceTelephoneRequest != null && xdsTraceTelephoneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceTelephoneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceTelephoneRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTelephoneTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> XdsTelephoneTraceAsync (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await XdsTelephoneTraceWithHttpInfoAsync(xdsTraceTelephoneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone and surname. Pass one of the references to the TraceResult call to retrieve the report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsTraceTelephoneRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> XdsTelephoneTraceWithHttpInfoAsync (XdsTraceTelephoneRequest xdsTraceTelephoneRequest = default(XdsTraceTelephoneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdstelephonetrace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsTraceTelephoneRequest != null && xdsTraceTelephoneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsTraceTelephoneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsTraceTelephoneRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTelephoneTrace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsConsumer</returns>
        public ApiReturnOfXdsConsumer XdsTraceResult (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest))
        {
             ApiResponse<ApiReturnOfXdsConsumer> localVarResponse = XdsTraceResultWithHttpInfo(referenceBonusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsConsumer</returns>
        public ApiResponse<ApiReturnOfXdsConsumer> XdsTraceResultWithHttpInfo (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest))
        {

            var localVarPath = "/api/v6/xdstraceresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceBonusRequest != null && referenceBonusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceBonusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceBonusRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTraceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsConsumer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsConsumer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsConsumer)));
        }

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsConsumer</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsConsumer> XdsTraceResultAsync (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsConsumer> localVarResponse = await XdsTraceResultWithHttpInfoAsync(referenceBonusRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The consumer data using a reference number obtained from one of the trace search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceBonusRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsConsumer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsConsumer>> XdsTraceResultWithHttpInfoAsync (ReferenceBonusRequest referenceBonusRequest = default(ReferenceBonusRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdstraceresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceBonusRequest != null && referenceBonusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceBonusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceBonusRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsTraceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsConsumer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsConsumer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsConsumer)));
        }

    }
}
