/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransUnionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiReturnOfTransunionConsumer118BureauResponse TUConsumerForeignPassportReport (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest));

        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerForeignPassportReportWithHttpInfo (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest));
        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiReturnOfTransunionConsumer118BureauResponse TUConsumerFraudReport (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest));

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerFraudReportWithHttpInfo (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest));
        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiReturnOfTransunionConsumer118BureauResponse TUConsumerIdReport (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest));

        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerIdReportWithHttpInfo (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray TUConsumerTraceByAddressAndSurname (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByAddressAndSurnameWithHttpInfo (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray TUConsumerTraceByID (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByIDWithHttpInfo (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest));
        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        ApiReturnOfConsumerSearchArray TUConsumerTraceByTelephone (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest));

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByTelephoneWithHttpInfo (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest));
        /// <summary>
        /// Returns full trace data for given reference number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiReturnOfTransunionConsumer118BureauResponse TUConsumerTraceResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Returns full trace data for given reference number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerTraceResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerForeignPassportReportAsync (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerForeignPassportReportWithHttpInfoAsync (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerFraudReportAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerFraudReportWithHttpInfoAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerIdReportAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns full consumer data for given consumer details.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerIdReportWithHttpInfoAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByAddressAndSurnameAsync (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByAddressAndSurnameWithHttpInfoAsync (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByIDAsync (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByIDWithHttpInfoAsync (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByTelephoneAsync (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByTelephoneWithHttpInfoAsync (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns full trace data for given reference number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerTraceResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns full trace data for given reference number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerTraceResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransUnionApi : ITransUnionApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransUnionApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransUnionApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransUnionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransUnionApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiReturnOfTransunionConsumer118BureauResponse TUConsumerForeignPassportReport (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = TUConsumerForeignPassportReportWithHttpInfo(transunionConsumerPassportEnquiryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerForeignPassportReportWithHttpInfo (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest))
        {

            var localVarPath = "/api/v6/tuconsumerforeignpassportreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerPassportEnquiryRequest != null && transunionConsumerPassportEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerPassportEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerPassportEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerForeignPassportReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerForeignPassportReportAsync (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = await TUConsumerForeignPassportReportWithHttpInfoAsync(transunionConsumerPassportEnquiryRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerPassportEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerForeignPassportReportWithHttpInfoAsync (TransunionConsumerPassportEnquiryRequest transunionConsumerPassportEnquiryRequest = default(TransunionConsumerPassportEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumerforeignpassportreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerPassportEnquiryRequest != null && transunionConsumerPassportEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerPassportEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerPassportEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerForeignPassportReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiReturnOfTransunionConsumer118BureauResponse TUConsumerFraudReport (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = TUConsumerFraudReportWithHttpInfo(transunionConsumerIdEnquiryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerFraudReportWithHttpInfo (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest))
        {

            var localVarPath = "/api/v6/tuconsumerfraudreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdEnquiryRequest != null && transunionConsumerIdEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerFraudReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerFraudReportAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = await TUConsumerFraudReportWithHttpInfoAsync(transunionConsumerIdEnquiryRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns full consumer data + fraud data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerFraudReportWithHttpInfoAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumerfraudreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdEnquiryRequest != null && transunionConsumerIdEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerFraudReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiReturnOfTransunionConsumer118BureauResponse TUConsumerIdReport (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = TUConsumerIdReportWithHttpInfo(transunionConsumerIdEnquiryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerIdReportWithHttpInfo (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest))
        {

            var localVarPath = "/api/v6/tuconsumeridreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdEnquiryRequest != null && transunionConsumerIdEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerIdReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerIdReportAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = await TUConsumerIdReportWithHttpInfoAsync(transunionConsumerIdEnquiryRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns full consumer data for given consumer details. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdEnquiryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerIdReportWithHttpInfoAsync (TransunionConsumerIdEnquiryRequest transunionConsumerIdEnquiryRequest = default(TransunionConsumerIdEnquiryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumeridreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdEnquiryRequest != null && transunionConsumerIdEnquiryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdEnquiryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdEnquiryRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerIdReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray TUConsumerTraceByAddressAndSurname (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = TUConsumerTraceByAddressAndSurnameWithHttpInfo(transunionConsumerAddressSurnameRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByAddressAndSurnameWithHttpInfo (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest))
        {

            var localVarPath = "/api/v6/tuconsumertracebyaddressandsurname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerAddressSurnameRequest != null && transunionConsumerAddressSurnameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerAddressSurnameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerAddressSurnameRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByAddressAndSurname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByAddressAndSurnameAsync (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await TUConsumerTraceByAddressAndSurnameWithHttpInfoAsync(transunionConsumerAddressSurnameRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using address and surname. Pass one of the references to the TraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerAddressSurnameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByAddressAndSurnameWithHttpInfoAsync (TransunionConsumerAddressSurnameRequest transunionConsumerAddressSurnameRequest = default(TransunionConsumerAddressSurnameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumertracebyaddressandsurname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerAddressSurnameRequest != null && transunionConsumerAddressSurnameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerAddressSurnameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerAddressSurnameRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByAddressAndSurname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray TUConsumerTraceByID (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = TUConsumerTraceByIDWithHttpInfo(transunionConsumerIdTraceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByIDWithHttpInfo (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest))
        {

            var localVarPath = "/api/v6/tuconsumertracebyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdTraceRequest != null && transunionConsumerIdTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByIDAsync (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await TUConsumerTraceByIDWithHttpInfoAsync(transunionConsumerIdTraceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using ID number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerIdTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByIDWithHttpInfoAsync (TransunionConsumerIdTraceRequest transunionConsumerIdTraceRequest = default(TransunionConsumerIdTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumertracebyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerIdTraceRequest != null && transunionConsumerIdTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerIdTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerIdTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <returns>ApiReturnOfConsumerSearchArray</returns>
        public ApiReturnOfConsumerSearchArray TUConsumerTraceByTelephone (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = TUConsumerTraceByTelephoneWithHttpInfo(transunionConsumerTelephoneTraceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfConsumerSearchArray</returns>
        public ApiResponse<ApiReturnOfConsumerSearchArray> TUConsumerTraceByTelephoneWithHttpInfo (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest))
        {

            var localVarPath = "/api/v6/tuconsumertracebytelephone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerTelephoneTraceRequest != null && transunionConsumerTelephoneTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerTelephoneTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerTelephoneTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByTelephone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfConsumerSearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfConsumerSearchArray> TUConsumerTraceByTelephoneAsync (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfConsumerSearchArray> localVarResponse = await TUConsumerTraceByTelephoneWithHttpInfoAsync(transunionConsumerTelephoneTraceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible consumer matches using telephone number. Pass one of the references to the TransUnionConsumerTraceResult call to retrieve full consumer detail. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transunionConsumerTelephoneTraceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfConsumerSearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfConsumerSearchArray>> TUConsumerTraceByTelephoneWithHttpInfoAsync (TransunionConsumerTelephoneTraceRequest transunionConsumerTelephoneTraceRequest = default(TransunionConsumerTelephoneTraceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumertracebytelephone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transunionConsumerTelephoneTraceRequest != null && transunionConsumerTelephoneTraceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transunionConsumerTelephoneTraceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transunionConsumerTelephoneTraceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceByTelephone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfConsumerSearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfConsumerSearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfConsumerSearchArray)));
        }

        /// <summary>
        /// Returns full trace data for given reference number. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiReturnOfTransunionConsumer118BureauResponse TUConsumerTraceResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = TUConsumerTraceResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns full trace data for given reference number. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerTraceResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/tuconsumertraceresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

        /// <summary>
        /// Returns full trace data for given reference number. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfTransunionConsumer118BureauResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfTransunionConsumer118BureauResponse> TUConsumerTraceResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse> localVarResponse = await TUConsumerTraceResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns full trace data for given reference number. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfTransunionConsumer118BureauResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>> TUConsumerTraceResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/tuconsumertraceresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TUConsumerTraceResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfTransunionConsumer118BureauResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfTransunionConsumer118BureauResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfTransunionConsumer118BureauResponse)));
        }

    }
}
