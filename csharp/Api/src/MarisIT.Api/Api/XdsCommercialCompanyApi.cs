/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IXdsCommercialCompanyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns bank account verification data for a business.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        ApiReturnOfXdsAccountVerificationResult XdsBankAccountVerificationBusiness (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest));

        /// <summary>
        /// Returns bank account verification data for a business.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountVerificationBusinessWithHttpInfo (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest));
        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray XdsBusinessMatchName (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest));

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchNameWithHttpInfo (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest));
        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray XdsBusinessMatchRegistration (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest));

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchRegistrationWithHttpInfo (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest));
        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        ApiReturnOfXdsCommercial XdsBusinessMatchResultCipc (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultCipcWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        ApiReturnOfXdsCommercial XdsBusinessMatchResultDetailed (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultDetailedWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        ApiReturnOfXdsCommercial XdsBusinessMatchResultStandard (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultStandardWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray XdsBusinessMatchSoleProp (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp));

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchSolePropWithHttpInfo (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp));
        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        ApiReturnOfCompanySearchArray XdsBusinessMatchVatNumber (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest));

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchVatNumberWithHttpInfo (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns bank account verification data for a business.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountVerificationBusinessAsync (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns bank account verification data for a business.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountVerificationBusinessWithHttpInfoAsync (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchNameAsync (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchNameWithHttpInfoAsync (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchRegistrationAsync (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchRegistrationWithHttpInfoAsync (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultCipcAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultCipcWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultDetailedAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultDetailedWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultStandardAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultStandardWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchSolePropAsync (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner&#39;s ID number  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchSolePropWithHttpInfoAsync (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchVatNumberAsync (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchVatNumberWithHttpInfoAsync (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class XdsCommercialCompanyApi : IXdsCommercialCompanyApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialCompanyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public XdsCommercialCompanyApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialCompanyApi"/> class
        /// </summary>
        /// <returns></returns>
        public XdsCommercialCompanyApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="XdsCommercialCompanyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public XdsCommercialCompanyApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns bank account verification data for a business. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiReturnOfXdsAccountVerificationResult XdsBankAccountVerificationBusiness (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = XdsBankAccountVerificationBusinessWithHttpInfo(xdsBankVerificationBusinessRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns bank account verification data for a business. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsAccountVerificationResult</returns>
        public ApiResponse<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountVerificationBusinessWithHttpInfo (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest))
        {

            var localVarPath = "/api/v6/xdsbankaccountverificationbusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationBusinessRequest != null && xdsBankVerificationBusinessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationBusinessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationBusinessRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountVerificationBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Returns bank account verification data for a business. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsAccountVerificationResult</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsAccountVerificationResult> XdsBankAccountVerificationBusinessAsync (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsAccountVerificationResult> localVarResponse = await XdsBankAccountVerificationBusinessWithHttpInfoAsync(xdsBankVerificationBusinessRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns bank account verification data for a business. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBankVerificationBusinessRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsAccountVerificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsAccountVerificationResult>> XdsBankAccountVerificationBusinessWithHttpInfoAsync (XdsBankVerificationBusinessRequest xdsBankVerificationBusinessRequest = default(XdsBankVerificationBusinessRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbankaccountverificationbusiness";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBankVerificationBusinessRequest != null && xdsBankVerificationBusinessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBankVerificationBusinessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBankVerificationBusinessRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBankAccountVerificationBusiness", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsAccountVerificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsAccountVerificationResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsAccountVerificationResult)));
        }

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray XdsBusinessMatchName (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = XdsBusinessMatchNameWithHttpInfo(xdsBusinessNameRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchNameWithHttpInfo (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessNameRequest != null && xdsBusinessNameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessNameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessNameRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchNameAsync (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await XdsBusinessMatchNameWithHttpInfoAsync(xdsBusinessNameRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible company matches using a business name.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessNameRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchNameWithHttpInfoAsync (XdsBusinessNameRequest xdsBusinessNameRequest = default(XdsBusinessNameRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessNameRequest != null && xdsBusinessNameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessNameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessNameRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray XdsBusinessMatchRegistration (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = XdsBusinessMatchRegistrationWithHttpInfo(xdsBusinessRegNumberRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchRegistrationWithHttpInfo (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchregistration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessRegNumberRequest != null && xdsBusinessRegNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessRegNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessRegNumberRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchRegistrationAsync (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await XdsBusinessMatchRegistrationWithHttpInfoAsync(xdsBusinessRegNumberRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible company matches using registration number.   Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessRegNumberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchRegistrationWithHttpInfoAsync (XdsBusinessRegNumberRequest xdsBusinessRegNumberRequest = default(XdsBusinessRegNumberRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchregistration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessRegNumberRequest != null && xdsBusinessRegNumberRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessRegNumberRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessRegNumberRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchRegistration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        public ApiReturnOfXdsCommercial XdsBusinessMatchResultCipc (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = XdsBusinessMatchResultCipcWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        public ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultCipcWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultcipc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultCipc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultCipcAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = await XdsBusinessMatchResultCipcWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a CIPC business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultCipcWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultcipc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultCipc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        public ApiReturnOfXdsCommercial XdsBusinessMatchResultDetailed (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = XdsBusinessMatchResultDetailedWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        public ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultDetailedWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultdetailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultDetailedAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = await XdsBusinessMatchResultDetailedWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a detailed business report. Use a referene number from one of business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultDetailedWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultdetailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfXdsCommercial</returns>
        public ApiReturnOfXdsCommercial XdsBusinessMatchResultStandard (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = XdsBusinessMatchResultStandardWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfXdsCommercial</returns>
        public ApiResponse<ApiReturnOfXdsCommercial> XdsBusinessMatchResultStandardWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultstandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfXdsCommercial</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfXdsCommercial> XdsBusinessMatchResultStandardAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfXdsCommercial> localVarResponse = await XdsBusinessMatchResultStandardWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a standard business report. Use a referene number from one business search calls. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfXdsCommercial)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfXdsCommercial>> XdsBusinessMatchResultStandardWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchresultstandard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchResultStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfXdsCommercial>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfXdsCommercial) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfXdsCommercial)));
        }

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray XdsBusinessMatchSoleProp (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = XdsBusinessMatchSolePropWithHttpInfo(xdsBusinessSoleProp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchSolePropWithHttpInfo (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchsoleprop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessSoleProp != null && xdsBusinessSoleProp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessSoleProp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessSoleProp; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchSoleProp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchSolePropAsync (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await XdsBusinessMatchSolePropWithHttpInfoAsync(xdsBusinessSoleProp, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible sole proprietor companies matching the owner's ID number  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessSoleProp"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchSolePropWithHttpInfoAsync (XdsBusinessSoleProp xdsBusinessSoleProp = default(XdsBusinessSoleProp), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchsoleprop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessSoleProp != null && xdsBusinessSoleProp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessSoleProp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessSoleProp; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchSoleProp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <returns>ApiReturnOfCompanySearchArray</returns>
        public ApiReturnOfCompanySearchArray XdsBusinessMatchVatNumber (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = XdsBusinessMatchVatNumberWithHttpInfo(xdsBusinessVatRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfCompanySearchArray</returns>
        public ApiResponse<ApiReturnOfCompanySearchArray> XdsBusinessMatchVatNumberWithHttpInfo (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchvatnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessVatRequest != null && xdsBusinessVatRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessVatRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessVatRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchVatNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfCompanySearchArray</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfCompanySearchArray> XdsBusinessMatchVatNumberAsync (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfCompanySearchArray> localVarResponse = await XdsBusinessMatchVatNumberWithHttpInfoAsync(xdsBusinessVatRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of possible company matches using a VAT registration number.  Use one of the references to get a standard, details or CIPC report. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xdsBusinessVatRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfCompanySearchArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfCompanySearchArray>> XdsBusinessMatchVatNumberWithHttpInfoAsync (XdsBusinessVatRequest xdsBusinessVatRequest = default(XdsBusinessVatRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/xdsbusinessmatchvatnumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xdsBusinessVatRequest != null && xdsBusinessVatRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xdsBusinessVatRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xdsBusinessVatRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XdsBusinessMatchVatNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfCompanySearchArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfCompanySearchArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfCompanySearchArray)));
        }

    }
}
