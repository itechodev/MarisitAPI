/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWindeedOfficeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiReturnOfWindeedOfficeDocumentResponse AgriculturalResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> AgriculturalResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem AgriculturalSearch (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> AgriculturalSearchWithHttpInfo (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedCompanySearchResponse</returns>
        ApiReturnOfWindeedCompanySearchResponse CompanyResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedCompanySearchResponse</returns>
        ApiResponse<ApiReturnOfWindeedCompanySearchResponse> CompanyResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem CompanySearch (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> CompanySearchWithHttpInfo (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiReturnOfWindeedOfficeDocumentResponse ErfResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> ErfResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem ErfSearch (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> ErfSearchWithHttpInfo (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult FarmRemainingExtentSearch (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> FarmRemainingExtentSearchWithHttpInfo (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiReturnOfWindeedOfficeDocumentResponse FarmResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> FarmResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem FarmSearch (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> FarmSearchWithHttpInfo (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedSpiderSpiderResponse</returns>
        ApiReturnOfWindeedSpiderSpiderResponse PersonResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedSpiderSpiderResponse</returns>
        ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse> PersonResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem PersonSearch (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> PersonSearchWithHttpInfo (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiReturnOfWindeedOfficeDocumentResponse SectionalSchemeResult (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> SectionalSchemeResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit SectionalSchemeSearch (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> SectionalSchemeSearchWithHttpInfo (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> AgriculturalResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> AgriculturalResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> AgriculturalSearchAsync (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem>> AgriculturalSearchWithHttpInfoAsync (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedCompanySearchResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedCompanySearchResponse> CompanyResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedCompanySearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedCompanySearchResponse>> CompanyResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> CompanySearchAsync (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem>> CompanySearchWithHttpInfoAsync (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> ErfResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> ErfResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> ErfSearchAsync (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem>> ErfSearchWithHttpInfoAsync (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> FarmRemainingExtentSearchAsync (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult>> FarmRemainingExtentSearchWithHttpInfoAsync (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> FarmResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> FarmResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> FarmSearchAsync (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem>> FarmSearchWithHttpInfoAsync (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedSpiderSpiderResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedSpiderSpiderResponse> PersonResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedSpiderSpiderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse>> PersonResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> PersonSearchAsync (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem>> PersonSearchWithHttpInfoAsync (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> SectionalSchemeResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> SectionalSchemeResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> SectionalSchemeSearchAsync (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit>> SectionalSchemeSearchWithHttpInfoAsync (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WindeedOfficeApi : IWindeedOfficeApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WindeedOfficeApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficeApi"/> class
        /// </summary>
        /// <returns></returns>
        public WindeedOfficeApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WindeedOfficeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WindeedOfficeApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiReturnOfWindeedOfficeDocumentResponse AgriculturalResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = AgriculturalResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> AgriculturalResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/agriculturalresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgriculturalResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> AgriculturalResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = await AgriculturalResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> AgriculturalResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/agriculturalresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgriculturalResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        public ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem AgriculturalSearch (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> localVarResponse = AgriculturalSearchWithHttpInfo(windeedAgriculturalSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> AgriculturalSearchWithHttpInfo (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest))
        {

            var localVarPath = "/api/v6/agriculturalsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedAgriculturalSearchRequest != null && windeedAgriculturalSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedAgriculturalSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedAgriculturalSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgriculturalSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> AgriculturalSearchAsync (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem> localVarResponse = await AgriculturalSearchWithHttpInfoAsync(windeedAgriculturalSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedAgriculturalSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem>> AgriculturalSearchWithHttpInfoAsync (WindeedAgriculturalSearchRequest windeedAgriculturalSearchRequest = default(WindeedAgriculturalSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/agriculturalsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedAgriculturalSearchRequest != null && windeedAgriculturalSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedAgriculturalSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedAgriculturalSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AgriculturalSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesAgriculturalHoldingPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedCompanySearchResponse</returns>
        public ApiReturnOfWindeedCompanySearchResponse CompanyResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedCompanySearchResponse> localVarResponse = CompanyResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedCompanySearchResponse</returns>
        public ApiResponse<ApiReturnOfWindeedCompanySearchResponse> CompanyResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/companyresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompanyResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedCompanySearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedCompanySearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedCompanySearchResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedCompanySearchResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedCompanySearchResponse> CompanyResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedCompanySearchResponse> localVarResponse = await CompanyResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedCompanySearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedCompanySearchResponse>> CompanyResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/companyresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompanyResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedCompanySearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedCompanySearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedCompanySearchResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        public ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem CompanySearch (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> localVarResponse = CompanySearchWithHttpInfo(windeedCompanySearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> CompanySearchWithHttpInfo (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest))
        {

            var localVarPath = "/api/v6/companysearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedCompanySearchRequest != null && windeedCompanySearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedCompanySearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedCompanySearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompanySearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> CompanySearchAsync (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem> localVarResponse = await CompanySearchWithHttpInfoAsync(windeedCompanySearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedCompanySearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem>> CompanySearchWithHttpInfoAsync (WindeedCompanySearchRequest windeedCompanySearchRequest = default(WindeedCompanySearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/companysearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedCompanySearchRequest != null && windeedCompanySearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedCompanySearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedCompanySearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompanySearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeBaseOwnerResponseAndWindeedOwnerReferencedItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiReturnOfWindeedOfficeDocumentResponse ErfResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = ErfResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> ErfResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/erfresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErfResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> ErfResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = await ErfResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> ErfResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/erfresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErfResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        public ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem ErfSearch (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> localVarResponse = ErfSearchWithHttpInfo(windeedErfSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> ErfSearchWithHttpInfo (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest))
        {

            var localVarPath = "/api/v6/erfsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedErfSearchRequest != null && windeedErfSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedErfSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedErfSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErfSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> ErfSearchAsync (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem> localVarResponse = await ErfSearchWithHttpInfoAsync(windeedErfSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedErfSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem>> ErfSearchWithHttpInfoAsync (WindeedErfSearchRequest windeedErfSearchRequest = default(WindeedErfSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/erfsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedErfSearchRequest != null && windeedErfSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedErfSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedErfSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ErfSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesErfPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        public ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult FarmRemainingExtentSearch (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest))
        {
             ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> localVarResponse = FarmRemainingExtentSearchWithHttpInfo(windeedFarmSearchRemainingExtentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        public ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> FarmRemainingExtentSearchWithHttpInfo (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest))
        {

            var localVarPath = "/api/v6/farmremainingextentsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedFarmSearchRemainingExtentRequest != null && windeedFarmSearchRemainingExtentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedFarmSearchRemainingExtentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedFarmSearchRemainingExtentRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmRemainingExtentSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> FarmRemainingExtentSearchAsync (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult> localVarResponse = await FarmRemainingExtentSearchWithHttpInfoAsync(windeedFarmSearchRemainingExtentRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRemainingExtentRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult>> FarmRemainingExtentSearchWithHttpInfoAsync (WindeedFarmSearchRemainingExtentRequest windeedFarmSearchRemainingExtentRequest = default(WindeedFarmSearchRemainingExtentRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/farmremainingextentsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedFarmSearchRemainingExtentRequest != null && windeedFarmSearchRemainingExtentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedFarmSearchRemainingExtentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedFarmSearchRemainingExtentRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmRemainingExtentSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficev1ProxiesFarmSearchResult)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiReturnOfWindeedOfficeDocumentResponse FarmResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = FarmResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> FarmResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/farmresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> FarmResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = await FarmResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> FarmResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/farmresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        public ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem FarmSearch (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> localVarResponse = FarmSearchWithHttpInfo(windeedFarmSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> FarmSearchWithHttpInfo (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest))
        {

            var localVarPath = "/api/v6/farmsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedFarmSearchRequest != null && windeedFarmSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedFarmSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedFarmSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> FarmSearchAsync (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem> localVarResponse = await FarmSearchWithHttpInfoAsync(windeedFarmSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedFarmSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem>> FarmSearchWithHttpInfoAsync (WindeedFarmSearchRequest windeedFarmSearchRequest = default(WindeedFarmSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/farmsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedFarmSearchRequest != null && windeedFarmSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedFarmSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedFarmSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FarmSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesFarmPortionItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedSpiderSpiderResponse</returns>
        public ApiReturnOfWindeedSpiderSpiderResponse PersonResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse> localVarResponse = PersonResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedSpiderSpiderResponse</returns>
        public ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse> PersonResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/personresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PersonResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedSpiderSpiderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedSpiderSpiderResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedSpiderSpiderResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedSpiderSpiderResponse> PersonResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse> localVarResponse = await PersonResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedSpiderSpiderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse>> PersonResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/personresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PersonResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedSpiderSpiderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedSpiderSpiderResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedSpiderSpiderResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        public ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem PersonSearch (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> localVarResponse = PersonSearchWithHttpInfo(windeedPersonSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> PersonSearchWithHttpInfo (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest))
        {

            var localVarPath = "/api/v6/personsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedPersonSearchRequest != null && windeedPersonSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedPersonSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedPersonSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PersonSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> PersonSearchAsync (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem> localVarResponse = await PersonSearchWithHttpInfoAsync(windeedPersonSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedPersonSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem>> PersonSearchWithHttpInfoAsync (WindeedPersonSearchRequest windeedPersonSearchRequest = default(WindeedPersonSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/personsearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedPersonSearchRequest != null && windeedPersonSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedPersonSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedPersonSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PersonSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficePersonResponseAndWindeedOwnerReferencedItem)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiReturnOfWindeedOfficeDocumentResponse SectionalSchemeResult (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = SectionalSchemeResultWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> SectionalSchemeResultWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/sectionalschemeresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SectionalSchemeResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfWindeedOfficeDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfWindeedOfficeDocumentResponse> SectionalSchemeResultAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse> localVarResponse = await SectionalSchemeResultWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfWindeedOfficeDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>> SectionalSchemeResultWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/sectionalschemeresult";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SectionalSchemeResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfWindeedOfficeDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfWindeedOfficeDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfWindeedOfficeDocumentResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        public ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit SectionalSchemeSearch (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> localVarResponse = SectionalSchemeSearchWithHttpInfo(windeedUnitSearchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        public ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> SectionalSchemeSearchWithHttpInfo (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest))
        {

            var localVarPath = "/api/v6/sectionalschemesearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedUnitSearchRequest != null && windeedUnitSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedUnitSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedUnitSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SectionalSchemeSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> SectionalSchemeSearchAsync (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit> localVarResponse = await SectionalSchemeSearchWithHttpInfoAsync(windeedUnitSearchRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="windeedUnitSearchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit>> SectionalSchemeSearchWithHttpInfoAsync (WindeedUnitSearchRequest windeedUnitSearchRequest = default(WindeedUnitSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/sectionalschemesearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (windeedUnitSearchRequest != null && windeedUnitSearchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(windeedUnitSearchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = windeedUnitSearchRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SectionalSchemeSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfWindeedOfficeDocumentResponseAndWindeedOfficeProxiesSectionalSchemeUnit)));
        }

    }
}
