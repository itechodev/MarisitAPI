/*
 * MarisIT API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * Contact: development@marisit.co.za
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using MarisIT.Api.Client;
using MarisIT.Api.Model;

namespace MarisIT.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerifyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        ApiReturnOfVerifyReferenceResponse CriminalCheck (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));

        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        ApiResponse<ApiReturnOfVerifyReferenceResponse> CriminalCheckWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView CriminalCheckReport (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> CriminalCheckReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        ApiReturnOfVerifyReferenceResponse DeathCertificate (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));

        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        ApiResponse<ApiReturnOfVerifyReferenceResponse> DeathCertificateWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        ApiReturnOfApiReturnOfVerifyResultsNoModel DeathCertificateReport (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel> DeathCertificateReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        ApiReturnOfVerifyReferenceResponse DriversLicence (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));

        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        ApiResponse<ApiReturnOfVerifyReferenceResponse> DriversLicenceWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView DriversLicenceReport (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> DriversLicenceReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        ApiReturnOfVerifyReferenceResponse MatricCertificate (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest));

        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        ApiResponse<ApiReturnOfVerifyReferenceResponse> MatricCertificateWithHttpInfo (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView MatricCertificateReport (ReferenceRequest referenceRequest = default(ReferenceRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> MatricCertificateReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> CriminalCheckAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit a request for an individual&#39;s criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> CriminalCheckWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> CriminalCheckReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView>> CriminalCheckReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> DeathCertificateAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit a request for an individual&#39;s death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> DeathCertificateWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsNoModel> DeathCertificateReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsNoModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel>> DeathCertificateReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> DriversLicenceAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit a request for an individual&#39;s drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> DriversLicenceWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> DriversLicenceReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView>> DriversLicenceReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> MatricCertificateAsync (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit a request for an individual&#39;s matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> MatricCertificateWithHttpInfoAsync (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> MatricCertificateReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView>> MatricCertificateReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VerifyApi : IVerifyApi
    {
        private MarisIT.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerifyApi(String basePath)
        {
            this.Configuration = new MarisIT.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// </summary>
        /// <returns></returns>
        public VerifyApi()
        {
            this.Configuration = MarisIT.Api.Client.Configuration.Default;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerifyApi(MarisIT.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MarisIT.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MarisIT.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MarisIT.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MarisIT.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        public ApiReturnOfVerifyReferenceResponse CriminalCheck (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = CriminalCheckWithHttpInfo(verifyVerifyIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        public ApiResponse<ApiReturnOfVerifyReferenceResponse> CriminalCheckWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {

            var localVarPath = "/api/v6/criminalcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CriminalCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> CriminalCheckAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = await CriminalCheckWithHttpInfoAsync(verifyVerifyIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a request for an individual's criminal record. You will be notified when the report is ready. Use the reference and pass to the CriminalCheckReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> CriminalCheckWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/criminalcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CriminalCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        public ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView CriminalCheckReport (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> localVarResponse = CriminalCheckReportWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        public ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> CriminalCheckReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/criminalcheckreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CriminalCheckReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> CriminalCheckReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView> localVarResponse = await CriminalCheckReportWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView>> CriminalCheckReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/criminalcheckreport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CriminalCheckReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsCriminalCheckResultView)));
        }

        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        public ApiReturnOfVerifyReferenceResponse DeathCertificate (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = DeathCertificateWithHttpInfo(verifyVerifyIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        public ApiResponse<ApiReturnOfVerifyReferenceResponse> DeathCertificateWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {

            var localVarPath = "/api/v6/deathcertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeathCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> DeathCertificateAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = await DeathCertificateWithHttpInfoAsync(verifyVerifyIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a request for an individual's death certificate. You will be notified when the report is ready. Use the reference and pass to the DeathCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> DeathCertificateWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/deathcertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeathCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        public ApiReturnOfApiReturnOfVerifyResultsNoModel DeathCertificateReport (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel> localVarResponse = DeathCertificateReportWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        public ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel> DeathCertificateReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/deathcertificatereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeathCertificateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsNoModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsNoModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsNoModel</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsNoModel> DeathCertificateReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel> localVarResponse = await DeathCertificateReportWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsNoModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel>> DeathCertificateReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/deathcertificatereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeathCertificateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsNoModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsNoModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsNoModel)));
        }

        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        public ApiReturnOfVerifyReferenceResponse DriversLicence (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = DriversLicenceWithHttpInfo(verifyVerifyIdRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        public ApiResponse<ApiReturnOfVerifyReferenceResponse> DriversLicenceWithHttpInfo (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest))
        {

            var localVarPath = "/api/v6/driverslicence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DriversLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> DriversLicenceAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = await DriversLicenceWithHttpInfoAsync(verifyVerifyIdRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a request for an individual's drivers licences. You will be notified when the report is ready. Use the reference and pass to the DriversLicenceReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyVerifyIdRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> DriversLicenceWithHttpInfoAsync (VerifyVerifyIdRequest verifyVerifyIdRequest = default(VerifyVerifyIdRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/driverslicence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyVerifyIdRequest != null && verifyVerifyIdRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyVerifyIdRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyVerifyIdRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DriversLicence", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        public ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView DriversLicenceReport (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> localVarResponse = DriversLicenceReportWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        public ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> DriversLicenceReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/driverslicencereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DriversLicenceReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> DriversLicenceReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView> localVarResponse = await DriversLicenceReportWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView>> DriversLicenceReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/driverslicencereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DriversLicenceReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfApiReturnOfVerifyResultsDriversLicenceReportView)));
        }

        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <returns>ApiReturnOfVerifyReferenceResponse</returns>
        public ApiReturnOfVerifyReferenceResponse MatricCertificate (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = MatricCertificateWithHttpInfo(verifyMatricCertificateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfVerifyReferenceResponse</returns>
        public ApiResponse<ApiReturnOfVerifyReferenceResponse> MatricCertificateWithHttpInfo (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest))
        {

            var localVarPath = "/api/v6/matriccertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyMatricCertificateRequest != null && verifyMatricCertificateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyMatricCertificateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyMatricCertificateRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatricCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfVerifyReferenceResponse</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfVerifyReferenceResponse> MatricCertificateAsync (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfVerifyReferenceResponse> localVarResponse = await MatricCertificateWithHttpInfoAsync(verifyMatricCertificateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a request for an individual's matric certificate. You will be notified when the report is ready. Use the reference and pass to the MatricCertificateReport. 
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyMatricCertificateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfVerifyReferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfVerifyReferenceResponse>> MatricCertificateWithHttpInfoAsync (VerifyMatricCertificateRequest verifyMatricCertificateRequest = default(VerifyMatricCertificateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/matriccertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyMatricCertificateRequest != null && verifyMatricCertificateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyMatricCertificateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyMatricCertificateRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatricCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfVerifyReferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfVerifyReferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfVerifyReferenceResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        public ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView MatricCertificateReport (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> localVarResponse = MatricCertificateReportWithHttpInfo(referenceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <returns>ApiResponse of ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        public ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> MatricCertificateReportWithHttpInfo (ReferenceRequest referenceRequest = default(ReferenceRequest))
        {

            var localVarPath = "/api/v6/matriccertificatereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatricCertificateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView</returns>
        public async System.Threading.Tasks.Task<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> MatricCertificateReportAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView> localVarResponse = await MatricCertificateReportWithHttpInfoAsync(referenceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MarisIT.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView>> MatricCertificateReportWithHttpInfoAsync (ReferenceRequest referenceRequest = default(ReferenceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v6/matriccertificatereport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceRequest != null && referenceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(referenceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = referenceRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatricCertificateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiReturnOfApiReturnOfVerifyResultsMatricVerifyView)));
        }

    }
}
